# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _epl
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


TRUE = _epl.TRUE
FALSE = _epl.FALSE
NS_STATUS_SUCCESS = _epl.NS_STATUS_SUCCESS
NS_STATUS_FAILURE = _epl.NS_STATUS_FAILURE
NS_STATUS_INVALID_PARM = _epl.NS_STATUS_INVALID_PARM
NS_STATUS_RESOURCES = _epl.NS_STATUS_RESOURCES
NS_STATUS_NOT_SUPPORTED = _epl.NS_STATUS_NOT_SUPPORTED
NS_STATUS_ABORTED = _epl.NS_STATUS_ABORTED
NS_STATUS_HARDWARE_FAILURE = _epl.NS_STATUS_HARDWARE_FAILURE
EPL_ENUM_MDIO_BIT_BANG = _epl.EPL_ENUM_MDIO_BIT_BANG
EPL_ENUM_DIRECT = _epl.EPL_ENUM_DIRECT
EPL_ENUM_CYUSB_MDIO = _epl.EPL_ENUM_CYUSB_MDIO
EPL_CAPA_NONE = _epl.EPL_CAPA_NONE
EPL_CAPA_TDR = _epl.EPL_CAPA_TDR
EPL_CAPA_LINK_QUALITY = _epl.EPL_CAPA_LINK_QUALITY
EPL_CAPA_MII_PORT_CFG = _epl.EPL_CAPA_MII_PORT_CFG
EPL_CAPA_MII_REG_ACCESS = _epl.EPL_CAPA_MII_REG_ACCESS
DEV_UNKNOWN = _epl.DEV_UNKNOWN
DEV_DP83848 = _epl.DEV_DP83848
DEV_DP83849 = _epl.DEV_DP83849
DEV_DP83640 = _epl.DEV_DP83640
class EPL_DEV_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPL_DEV_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPL_DEV_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceType"] = _epl.EPL_DEV_INFO_deviceType_set
    __swig_getmethods__["deviceType"] = _epl.EPL_DEV_INFO_deviceType_get
    if _newclass:deviceType = _swig_property(_epl.EPL_DEV_INFO_deviceType_get, _epl.EPL_DEV_INFO_deviceType_set)
    __swig_setmethods__["numOfPorts"] = _epl.EPL_DEV_INFO_numOfPorts_set
    __swig_getmethods__["numOfPorts"] = _epl.EPL_DEV_INFO_numOfPorts_get
    if _newclass:numOfPorts = _swig_property(_epl.EPL_DEV_INFO_numOfPorts_get, _epl.EPL_DEV_INFO_numOfPorts_set)
    __swig_setmethods__["deviceModelNum"] = _epl.EPL_DEV_INFO_deviceModelNum_set
    __swig_getmethods__["deviceModelNum"] = _epl.EPL_DEV_INFO_deviceModelNum_get
    if _newclass:deviceModelNum = _swig_property(_epl.EPL_DEV_INFO_deviceModelNum_get, _epl.EPL_DEV_INFO_deviceModelNum_set)
    __swig_setmethods__["deviceRevision"] = _epl.EPL_DEV_INFO_deviceRevision_set
    __swig_getmethods__["deviceRevision"] = _epl.EPL_DEV_INFO_deviceRevision_get
    if _newclass:deviceRevision = _swig_property(_epl.EPL_DEV_INFO_deviceRevision_get, _epl.EPL_DEV_INFO_deviceRevision_set)
    __swig_setmethods__["numExtRegisterPages"] = _epl.EPL_DEV_INFO_numExtRegisterPages_set
    __swig_getmethods__["numExtRegisterPages"] = _epl.EPL_DEV_INFO_numExtRegisterPages_get
    if _newclass:numExtRegisterPages = _swig_property(_epl.EPL_DEV_INFO_numExtRegisterPages_get, _epl.EPL_DEV_INFO_numExtRegisterPages_set)
    def __init__(self, *args): 
        this = _epl.new_EPL_DEV_INFO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_EPL_DEV_INFO
    __del__ = lambda self : None;
EPL_DEV_INFO_swigregister = _epl.EPL_DEV_INFO_swigregister
EPL_DEV_INFO_swigregister(EPL_DEV_INFO)

class DEVICE_OBJ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DEVICE_OBJ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DEVICE_OBJ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _epl.DEVICE_OBJ_link_set
    __swig_getmethods__["link"] = _epl.DEVICE_OBJ_link_get
    if _newclass:link = _swig_property(_epl.DEVICE_OBJ_link_get, _epl.DEVICE_OBJ_link_set)
    __swig_setmethods__["portObjs"] = _epl.DEVICE_OBJ_portObjs_set
    __swig_getmethods__["portObjs"] = _epl.DEVICE_OBJ_portObjs_get
    if _newclass:portObjs = _swig_property(_epl.DEVICE_OBJ_portObjs_get, _epl.DEVICE_OBJ_portObjs_set)
    __swig_setmethods__["oaiDevHandle"] = _epl.DEVICE_OBJ_oaiDevHandle_set
    __swig_getmethods__["oaiDevHandle"] = _epl.DEVICE_OBJ_oaiDevHandle_get
    if _newclass:oaiDevHandle = _swig_property(_epl.DEVICE_OBJ_oaiDevHandle_get, _epl.DEVICE_OBJ_oaiDevHandle_set)
    __swig_setmethods__["baseMdioAddress"] = _epl.DEVICE_OBJ_baseMdioAddress_set
    __swig_getmethods__["baseMdioAddress"] = _epl.DEVICE_OBJ_baseMdioAddress_get
    if _newclass:baseMdioAddress = _swig_property(_epl.DEVICE_OBJ_baseMdioAddress_get, _epl.DEVICE_OBJ_baseMdioAddress_set)
    __swig_setmethods__["devInfo"] = _epl.DEVICE_OBJ_devInfo_set
    __swig_getmethods__["devInfo"] = _epl.DEVICE_OBJ_devInfo_get
    if _newclass:devInfo = _swig_property(_epl.DEVICE_OBJ_devInfo_get, _epl.DEVICE_OBJ_devInfo_set)
    __swig_setmethods__["capa"] = _epl.DEVICE_OBJ_capa_set
    __swig_getmethods__["capa"] = _epl.DEVICE_OBJ_capa_get
    if _newclass:capa = _swig_property(_epl.DEVICE_OBJ_capa_get, _epl.DEVICE_OBJ_capa_set)
    def __init__(self, *args): 
        this = _epl.new_DEVICE_OBJ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_DEVICE_OBJ
    __del__ = lambda self : None;
DEVICE_OBJ_swigregister = _epl.DEVICE_OBJ_swigregister
DEVICE_OBJ_swigregister(DEVICE_OBJ)

class PORT_OBJ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PORT_OBJ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PORT_OBJ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _epl.PORT_OBJ_link_set
    __swig_getmethods__["link"] = _epl.PORT_OBJ_link_get
    if _newclass:link = _swig_property(_epl.PORT_OBJ_link_get, _epl.PORT_OBJ_link_set)
    __swig_setmethods__["oaiDevHandle"] = _epl.PORT_OBJ_oaiDevHandle_set
    __swig_getmethods__["oaiDevHandle"] = _epl.PORT_OBJ_oaiDevHandle_get
    if _newclass:oaiDevHandle = _swig_property(_epl.PORT_OBJ_oaiDevHandle_get, _epl.PORT_OBJ_oaiDevHandle_set)
    __swig_setmethods__["deviceObj"] = _epl.PORT_OBJ_deviceObj_set
    __swig_getmethods__["deviceObj"] = _epl.PORT_OBJ_deviceObj_get
    if _newclass:deviceObj = _swig_property(_epl.PORT_OBJ_deviceObj_get, _epl.PORT_OBJ_deviceObj_set)
    __swig_setmethods__["portMdioAddress"] = _epl.PORT_OBJ_portMdioAddress_set
    __swig_getmethods__["portMdioAddress"] = _epl.PORT_OBJ_portMdioAddress_get
    if _newclass:portMdioAddress = _swig_property(_epl.PORT_OBJ_portMdioAddress_get, _epl.PORT_OBJ_portMdioAddress_set)
    __swig_setmethods__["ifType"] = _epl.PORT_OBJ_ifType_set
    __swig_getmethods__["ifType"] = _epl.PORT_OBJ_ifType_get
    if _newclass:ifType = _swig_property(_epl.PORT_OBJ_ifType_get, _epl.PORT_OBJ_ifType_set)
    __swig_setmethods__["usePhyControlFrames"] = _epl.PORT_OBJ_usePhyControlFrames_set
    __swig_getmethods__["usePhyControlFrames"] = _epl.PORT_OBJ_usePhyControlFrames_get
    if _newclass:usePhyControlFrames = _swig_property(_epl.PORT_OBJ_usePhyControlFrames_get, _epl.PORT_OBJ_usePhyControlFrames_set)
    __swig_setmethods__["pcfDA_SEL"] = _epl.PORT_OBJ_pcfDA_SEL_set
    __swig_getmethods__["pcfDA_SEL"] = _epl.PORT_OBJ_pcfDA_SEL_get
    if _newclass:pcfDA_SEL = _swig_property(_epl.PORT_OBJ_pcfDA_SEL_get, _epl.PORT_OBJ_pcfDA_SEL_set)
    __swig_setmethods__["rxConfigOptions"] = _epl.PORT_OBJ_rxConfigOptions_set
    __swig_getmethods__["rxConfigOptions"] = _epl.PORT_OBJ_rxConfigOptions_get
    if _newclass:rxConfigOptions = _swig_property(_epl.PORT_OBJ_rxConfigOptions_get, _epl.PORT_OBJ_rxConfigOptions_set)
    __swig_setmethods__["tsSecondsLen"] = _epl.PORT_OBJ_tsSecondsLen_set
    __swig_getmethods__["tsSecondsLen"] = _epl.PORT_OBJ_tsSecondsLen_get
    if _newclass:tsSecondsLen = _swig_property(_epl.PORT_OBJ_tsSecondsLen_get, _epl.PORT_OBJ_tsSecondsLen_set)
    __swig_setmethods__["rxTsNanoSecOffset"] = _epl.PORT_OBJ_rxTsNanoSecOffset_set
    __swig_getmethods__["rxTsNanoSecOffset"] = _epl.PORT_OBJ_rxTsNanoSecOffset_get
    if _newclass:rxTsNanoSecOffset = _swig_property(_epl.PORT_OBJ_rxTsNanoSecOffset_get, _epl.PORT_OBJ_rxTsNanoSecOffset_set)
    __swig_setmethods__["rxTsSecondsOffset"] = _epl.PORT_OBJ_rxTsSecondsOffset_set
    __swig_getmethods__["rxTsSecondsOffset"] = _epl.PORT_OBJ_rxTsSecondsOffset_get
    if _newclass:rxTsSecondsOffset = _swig_property(_epl.PORT_OBJ_rxTsSecondsOffset_get, _epl.PORT_OBJ_rxTsSecondsOffset_set)
    __swig_setmethods__["psfConfigOptions"] = _epl.PORT_OBJ_psfConfigOptions_set
    __swig_getmethods__["psfConfigOptions"] = _epl.PORT_OBJ_psfConfigOptions_get
    if _newclass:psfConfigOptions = _swig_property(_epl.PORT_OBJ_psfConfigOptions_get, _epl.PORT_OBJ_psfConfigOptions_set)
    __swig_setmethods__["psfList"] = _epl.PORT_OBJ_psfList_set
    __swig_getmethods__["psfList"] = _epl.PORT_OBJ_psfList_get
    if _newclass:psfList = _swig_property(_epl.PORT_OBJ_psfList_get, _epl.PORT_OBJ_psfList_set)
    __swig_setmethods__["psfSrcMacAddr"] = _epl.PORT_OBJ_psfSrcMacAddr_set
    __swig_getmethods__["psfSrcMacAddr"] = _epl.PORT_OBJ_psfSrcMacAddr_get
    if _newclass:psfSrcMacAddr = _swig_property(_epl.PORT_OBJ_psfSrcMacAddr_get, _epl.PORT_OBJ_psfSrcMacAddr_set)
    __swig_setmethods__["pktList"] = _epl.PORT_OBJ_pktList_set
    __swig_getmethods__["pktList"] = _epl.PORT_OBJ_pktList_get
    if _newclass:pktList = _swig_property(_epl.PORT_OBJ_pktList_get, _epl.PORT_OBJ_pktList_set)
    def __init__(self, *args): 
        this = _epl.new_PORT_OBJ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PORT_OBJ
    __del__ = lambda self : None;
PORT_OBJ_swigregister = _epl.PORT_OBJ_swigregister
PORT_OBJ_swigregister(PORT_OBJ)

class ALP_ENDPOINTS_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ALP_ENDPOINTS_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ALP_ENDPOINTS_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_CNTRL_WR"] = _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_WR_set
    __swig_getmethods__["REG_CNTRL_WR"] = _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_WR_get
    if _newclass:REG_CNTRL_WR = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_WR_get, _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_WR_set)
    __swig_setmethods__["REG_TX_FRAME_SIZE"] = _epl.ALP_ENDPOINTS_STRUCT_REG_TX_FRAME_SIZE_set
    __swig_getmethods__["REG_TX_FRAME_SIZE"] = _epl.ALP_ENDPOINTS_STRUCT_REG_TX_FRAME_SIZE_get
    if _newclass:REG_TX_FRAME_SIZE = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_TX_FRAME_SIZE_get, _epl.ALP_ENDPOINTS_STRUCT_REG_TX_FRAME_SIZE_set)
    __swig_setmethods__["REG_MDIO_ADDR"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_set
    __swig_getmethods__["REG_MDIO_ADDR"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_get
    if _newclass:REG_MDIO_ADDR = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_get, _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_set)
    __swig_setmethods__["REG_MDIO_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_set
    __swig_getmethods__["REG_MDIO_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_get
    if _newclass:REG_MDIO_DATA = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_get, _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_set)
    __swig_setmethods__["DATA_FIFO_LOAD"] = _epl.ALP_ENDPOINTS_STRUCT_DATA_FIFO_LOAD_set
    __swig_getmethods__["DATA_FIFO_LOAD"] = _epl.ALP_ENDPOINTS_STRUCT_DATA_FIFO_LOAD_get
    if _newclass:DATA_FIFO_LOAD = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_DATA_FIFO_LOAD_get, _epl.ALP_ENDPOINTS_STRUCT_DATA_FIFO_LOAD_set)
    __swig_setmethods__["TX_BURST_COUNT"] = _epl.ALP_ENDPOINTS_STRUCT_TX_BURST_COUNT_set
    __swig_getmethods__["TX_BURST_COUNT"] = _epl.ALP_ENDPOINTS_STRUCT_TX_BURST_COUNT_get
    if _newclass:TX_BURST_COUNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_TX_BURST_COUNT_get, _epl.ALP_ENDPOINTS_STRUCT_TX_BURST_COUNT_set)
    __swig_setmethods__["REG_CNTRL_OUT_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_OUT_RD_set
    __swig_getmethods__["REG_CNTRL_OUT_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_OUT_RD_get
    if _newclass:REG_CNTRL_OUT_RD = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_OUT_RD_get, _epl.ALP_ENDPOINTS_STRUCT_REG_CNTRL_OUT_RD_set)
    __swig_setmethods__["REG_MDIO_ADDR_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_RD_set
    __swig_getmethods__["REG_MDIO_ADDR_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_RD_get
    if _newclass:REG_MDIO_ADDR_RD = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_RD_get, _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_ADDR_RD_set)
    __swig_setmethods__["REG_MDIO_DATA_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_RD_set
    __swig_getmethods__["REG_MDIO_DATA_RD"] = _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_RD_get
    if _newclass:REG_MDIO_DATA_RD = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_RD_get, _epl.ALP_ENDPOINTS_STRUCT_REG_MDIO_DATA_RD_set)
    __swig_setmethods__["RX_DATA_ADDR"] = _epl.ALP_ENDPOINTS_STRUCT_RX_DATA_ADDR_set
    __swig_getmethods__["RX_DATA_ADDR"] = _epl.ALP_ENDPOINTS_STRUCT_RX_DATA_ADDR_get
    if _newclass:RX_DATA_ADDR = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_DATA_ADDR_get, _epl.ALP_ENDPOINTS_STRUCT_RX_DATA_ADDR_set)
    __swig_setmethods__["RX_BYTE_COUNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_BYTE_COUNT_set
    __swig_getmethods__["RX_BYTE_COUNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_BYTE_COUNT_get
    if _newclass:RX_BYTE_COUNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_BYTE_COUNT_get, _epl.ALP_ENDPOINTS_STRUCT_RX_BYTE_COUNT_set)
    __swig_setmethods__["RX_CRC_ERROR_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_CRC_ERROR_CNT_set
    __swig_getmethods__["RX_CRC_ERROR_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_CRC_ERROR_CNT_get
    if _newclass:RX_CRC_ERROR_CNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_CRC_ERROR_CNT_get, _epl.ALP_ENDPOINTS_STRUCT_RX_CRC_ERROR_CNT_set)
    __swig_setmethods__["RX_RUNT_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_RUNT_CNT_set
    __swig_getmethods__["RX_RUNT_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_RUNT_CNT_get
    if _newclass:RX_RUNT_CNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_RUNT_CNT_get, _epl.ALP_ENDPOINTS_STRUCT_RX_RUNT_CNT_set)
    __swig_setmethods__["RX_ERROR_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_ERROR_CNT_set
    __swig_getmethods__["RX_ERROR_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_ERROR_CNT_get
    if _newclass:RX_ERROR_CNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_ERROR_CNT_get, _epl.ALP_ENDPOINTS_STRUCT_RX_ERROR_CNT_set)
    __swig_setmethods__["RX_MISSED_PKT_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_MISSED_PKT_CNT_set
    __swig_getmethods__["RX_MISSED_PKT_CNT"] = _epl.ALP_ENDPOINTS_STRUCT_RX_MISSED_PKT_CNT_get
    if _newclass:RX_MISSED_PKT_CNT = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_MISSED_PKT_CNT_get, _epl.ALP_ENDPOINTS_STRUCT_RX_MISSED_PKT_CNT_set)
    __swig_setmethods__["MDIO_TRIGGER_IN"] = _epl.ALP_ENDPOINTS_STRUCT_MDIO_TRIGGER_IN_set
    __swig_getmethods__["MDIO_TRIGGER_IN"] = _epl.ALP_ENDPOINTS_STRUCT_MDIO_TRIGGER_IN_get
    if _newclass:MDIO_TRIGGER_IN = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_MDIO_TRIGGER_IN_get, _epl.ALP_ENDPOINTS_STRUCT_MDIO_TRIGGER_IN_set)
    __swig_setmethods__["MAC_CTRL"] = _epl.ALP_ENDPOINTS_STRUCT_MAC_CTRL_set
    __swig_getmethods__["MAC_CTRL"] = _epl.ALP_ENDPOINTS_STRUCT_MAC_CTRL_get
    if _newclass:MAC_CTRL = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_MAC_CTRL_get, _epl.ALP_ENDPOINTS_STRUCT_MAC_CTRL_set)
    __swig_setmethods__["START_TX"] = _epl.ALP_ENDPOINTS_STRUCT_START_TX_set
    __swig_getmethods__["START_TX"] = _epl.ALP_ENDPOINTS_STRUCT_START_TX_get
    if _newclass:START_TX = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_START_TX_get, _epl.ALP_ENDPOINTS_STRUCT_START_TX_set)
    __swig_setmethods__["PKT_RD_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_PKT_RD_DONE_set
    __swig_getmethods__["PKT_RD_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_PKT_RD_DONE_get
    if _newclass:PKT_RD_DONE = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_PKT_RD_DONE_get, _epl.ALP_ENDPOINTS_STRUCT_PKT_RD_DONE_set)
    __swig_setmethods__["TX_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_TX_DONE_set
    __swig_getmethods__["TX_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_TX_DONE_get
    if _newclass:TX_DONE = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_TX_DONE_get, _epl.ALP_ENDPOINTS_STRUCT_TX_DONE_set)
    __swig_setmethods__["MDIO_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_MDIO_DONE_set
    __swig_getmethods__["MDIO_DONE"] = _epl.ALP_ENDPOINTS_STRUCT_MDIO_DONE_get
    if _newclass:MDIO_DONE = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_MDIO_DONE_get, _epl.ALP_ENDPOINTS_STRUCT_MDIO_DONE_set)
    __swig_setmethods__["RX_PKT_READY"] = _epl.ALP_ENDPOINTS_STRUCT_RX_PKT_READY_set
    __swig_getmethods__["RX_PKT_READY"] = _epl.ALP_ENDPOINTS_STRUCT_RX_PKT_READY_get
    if _newclass:RX_PKT_READY = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_PKT_READY_get, _epl.ALP_ENDPOINTS_STRUCT_RX_PKT_READY_set)
    __swig_setmethods__["TX_FIFO_WR_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_TX_FIFO_WR_DATA_set
    __swig_getmethods__["TX_FIFO_WR_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_TX_FIFO_WR_DATA_get
    if _newclass:TX_FIFO_WR_DATA = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_TX_FIFO_WR_DATA_get, _epl.ALP_ENDPOINTS_STRUCT_TX_FIFO_WR_DATA_set)
    __swig_setmethods__["RX_FIFO_WR_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_RX_FIFO_WR_DATA_set
    __swig_getmethods__["RX_FIFO_WR_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_RX_FIFO_WR_DATA_get
    if _newclass:RX_FIFO_WR_DATA = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RX_FIFO_WR_DATA_get, _epl.ALP_ENDPOINTS_STRUCT_RX_FIFO_WR_DATA_set)
    __swig_setmethods__["TXFIFO_RD_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_TXFIFO_RD_DATA_set
    __swig_getmethods__["TXFIFO_RD_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_TXFIFO_RD_DATA_get
    if _newclass:TXFIFO_RD_DATA = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_TXFIFO_RD_DATA_get, _epl.ALP_ENDPOINTS_STRUCT_TXFIFO_RD_DATA_set)
    __swig_setmethods__["RXFIFO_RD_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_RXFIFO_RD_DATA_set
    __swig_getmethods__["RXFIFO_RD_DATA"] = _epl.ALP_ENDPOINTS_STRUCT_RXFIFO_RD_DATA_get
    if _newclass:RXFIFO_RD_DATA = _swig_property(_epl.ALP_ENDPOINTS_STRUCT_RXFIFO_RD_DATA_get, _epl.ALP_ENDPOINTS_STRUCT_RXFIFO_RD_DATA_set)
    def __init__(self, *args): 
        this = _epl.new_ALP_ENDPOINTS_STRUCT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_ALP_ENDPOINTS_STRUCT
    __del__ = lambda self : None;
ALP_ENDPOINTS_STRUCT_swigregister = _epl.ALP_ENDPOINTS_STRUCT_swigregister
ALP_ENDPOINTS_STRUCT_swigregister(ALP_ENDPOINTS_STRUCT)

PLATFORM_PCF_DEFAULT = _epl.PLATFORM_PCF_DEFAULT
class OAI_DEV_HANDLE_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OAI_DEV_HANDLE_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OAI_DEV_HANDLE_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ifHandle"] = _epl.OAI_DEV_HANDLE_STRUCT_ifHandle_set
    __swig_getmethods__["ifHandle"] = _epl.OAI_DEV_HANDLE_STRUCT_ifHandle_get
    if _newclass:ifHandle = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_ifHandle_get, _epl.OAI_DEV_HANDLE_STRUCT_ifHandle_set)
    __swig_setmethods__["pcfDefault"] = _epl.OAI_DEV_HANDLE_STRUCT_pcfDefault_set
    __swig_getmethods__["pcfDefault"] = _epl.OAI_DEV_HANDLE_STRUCT_pcfDefault_get
    if _newclass:pcfDefault = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_pcfDefault_get, _epl.OAI_DEV_HANDLE_STRUCT_pcfDefault_set)
    __swig_setmethods__["board"] = _epl.OAI_DEV_HANDLE_STRUCT_board_set
    __swig_getmethods__["board"] = _epl.OAI_DEV_HANDLE_STRUCT_board_get
    if _newclass:board = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_board_get, _epl.OAI_DEV_HANDLE_STRUCT_board_set)
    __swig_setmethods__["connector"] = _epl.OAI_DEV_HANDLE_STRUCT_connector_set
    __swig_getmethods__["connector"] = _epl.OAI_DEV_HANDLE_STRUCT_connector_get
    if _newclass:connector = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_connector_get, _epl.OAI_DEV_HANDLE_STRUCT_connector_set)
    __swig_setmethods__["address"] = _epl.OAI_DEV_HANDLE_STRUCT_address_set
    __swig_getmethods__["address"] = _epl.OAI_DEV_HANDLE_STRUCT_address_get
    if _newclass:address = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_address_get, _epl.OAI_DEV_HANDLE_STRUCT_address_set)
    __swig_setmethods__["udpChksumEnable"] = _epl.OAI_DEV_HANDLE_STRUCT_udpChksumEnable_set
    __swig_getmethods__["udpChksumEnable"] = _epl.OAI_DEV_HANDLE_STRUCT_udpChksumEnable_get
    if _newclass:udpChksumEnable = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_udpChksumEnable_get, _epl.OAI_DEV_HANDLE_STRUCT_udpChksumEnable_set)
    __swig_setmethods__["killThread"] = _epl.OAI_DEV_HANDLE_STRUCT_killThread_set
    __swig_getmethods__["killThread"] = _epl.OAI_DEV_HANDLE_STRUCT_killThread_get
    if _newclass:killThread = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_killThread_get, _epl.OAI_DEV_HANDLE_STRUCT_killThread_set)
    __swig_setmethods__["regularMutex"] = _epl.OAI_DEV_HANDLE_STRUCT_regularMutex_set
    __swig_getmethods__["regularMutex"] = _epl.OAI_DEV_HANDLE_STRUCT_regularMutex_get
    if _newclass:regularMutex = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_regularMutex_get, _epl.OAI_DEV_HANDLE_STRUCT_regularMutex_set)
    __swig_setmethods__["multiOpMutex"] = _epl.OAI_DEV_HANDLE_STRUCT_multiOpMutex_set
    __swig_getmethods__["multiOpMutex"] = _epl.OAI_DEV_HANDLE_STRUCT_multiOpMutex_get
    if _newclass:multiOpMutex = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_multiOpMutex_get, _epl.OAI_DEV_HANDLE_STRUCT_multiOpMutex_set)
    __swig_setmethods__["Python"] = _epl.OAI_DEV_HANDLE_STRUCT_Python_set
    __swig_getmethods__["Python"] = _epl.OAI_DEV_HANDLE_STRUCT_Python_get
    if _newclass:Python = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_Python_get, _epl.OAI_DEV_HANDLE_STRUCT_Python_set)
    __swig_setmethods__["guiObj"] = _epl.OAI_DEV_HANDLE_STRUCT_guiObj_set
    __swig_getmethods__["guiObj"] = _epl.OAI_DEV_HANDLE_STRUCT_guiObj_get
    if _newclass:guiObj = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_guiObj_get, _epl.OAI_DEV_HANDLE_STRUCT_guiObj_set)
    __swig_setmethods__["stdioCallback"] = _epl.OAI_DEV_HANDLE_STRUCT_stdioCallback_set
    __swig_getmethods__["stdioCallback"] = _epl.OAI_DEV_HANDLE_STRUCT_stdioCallback_get
    if _newclass:stdioCallback = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_stdioCallback_get, _epl.OAI_DEV_HANDLE_STRUCT_stdioCallback_set)
    __swig_setmethods__["statusUpdateCallback"] = _epl.OAI_DEV_HANDLE_STRUCT_statusUpdateCallback_set
    __swig_getmethods__["statusUpdateCallback"] = _epl.OAI_DEV_HANDLE_STRUCT_statusUpdateCallback_get
    if _newclass:statusUpdateCallback = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_statusUpdateCallback_get, _epl.OAI_DEV_HANDLE_STRUCT_statusUpdateCallback_set)
    __swig_setmethods__["pythonThrdSave"] = _epl.OAI_DEV_HANDLE_STRUCT_pythonThrdSave_set
    __swig_getmethods__["pythonThrdSave"] = _epl.OAI_DEV_HANDLE_STRUCT_pythonThrdSave_get
    if _newclass:pythonThrdSave = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_pythonThrdSave_get, _epl.OAI_DEV_HANDLE_STRUCT_pythonThrdSave_set)
    __swig_setmethods__["sprintfBuffer"] = _epl.OAI_DEV_HANDLE_STRUCT_sprintfBuffer_set
    __swig_getmethods__["sprintfBuffer"] = _epl.OAI_DEV_HANDLE_STRUCT_sprintfBuffer_get
    if _newclass:sprintfBuffer = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_sprintfBuffer_get, _epl.OAI_DEV_HANDLE_STRUCT_sprintfBuffer_set)
    __swig_setmethods__["alpEP"] = _epl.OAI_DEV_HANDLE_STRUCT_alpEP_set
    __swig_getmethods__["alpEP"] = _epl.OAI_DEV_HANDLE_STRUCT_alpEP_get
    if _newclass:alpEP = _swig_property(_epl.OAI_DEV_HANDLE_STRUCT_alpEP_get, _epl.OAI_DEV_HANDLE_STRUCT_alpEP_set)
    def __init__(self, *args): 
        this = _epl.new_OAI_DEV_HANDLE_STRUCT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_OAI_DEV_HANDLE_STRUCT
    __del__ = lambda self : None;
OAI_DEV_HANDLE_STRUCT_swigregister = _epl.OAI_DEV_HANDLE_STRUCT_swigregister
OAI_DEV_HANDLE_STRUCT_swigregister(OAI_DEV_HANDLE_STRUCT)

PHY_BMCR = _epl.PHY_BMCR
PHY_BMSR = _epl.PHY_BMSR
PHY_IDR1 = _epl.PHY_IDR1
PHY_IDR2 = _epl.PHY_IDR2
PHY_ANAR = _epl.PHY_ANAR
PHY_ANLPAR = _epl.PHY_ANLPAR
PHY_ANER = _epl.PHY_ANER
PHY_ANNPTR = _epl.PHY_ANNPTR
PHY_PHYSTS = _epl.PHY_PHYSTS
PHY_MICR = _epl.PHY_MICR
PHY_MISR = _epl.PHY_MISR
PHY_PAGESEL = _epl.PHY_PAGESEL
PHY_FCSCR = _epl.PHY_FCSCR
PHY_RECR = _epl.PHY_RECR
PHY_PCSR = _epl.PHY_PCSR
PHY_RBR = _epl.PHY_RBR
PHY_LEDCR = _epl.PHY_LEDCR
PHY_PHYCTRL = _epl.PHY_PHYCTRL
PHY_10BTSCR = _epl.PHY_10BTSCR
PHY_CDCTRL1 = _epl.PHY_CDCTRL1
PHY_EDCR = _epl.PHY_EDCR
PHY_AFECR = _epl.PHY_AFECR
PHY_AFEAR = _epl.PHY_AFEAR
PHY_PG0_PHYCR2 = _epl.PHY_PG0_PHYCR2
PHY_PG1_PMDCNFG = _epl.PHY_PG1_PMDCNFG
PHY_PG1_TMR1 = _epl.PHY_PG1_TMR1
PHY_PG1_TMR2 = _epl.PHY_PG1_TMR2
PHY_PG1_DSP_CTRL1 = _epl.PHY_PG1_DSP_CTRL1
PHY_PG1_DSP_CTRL2 = _epl.PHY_PG1_DSP_CTRL2
PHY_PG1_TRL_CTRL = _epl.PHY_PG1_TRL_CTRL
PHY_PG1_DEQ_CTRL = _epl.PHY_PG1_DEQ_CTRL
PHY_PG1_ANEG_TST = _epl.PHY_PG1_ANEG_TST
PHY_PG1_EXTCFG = _epl.PHY_PG1_EXTCFG
PHY_PG1_TST_CTRL = _epl.PHY_PG1_TST_CTRL
PHY_PG1_SD_CNFG = _epl.PHY_PG1_SD_CNFG
PHY_PG1_TSTDAT = _epl.PHY_PG1_TSTDAT
PHY_PG2_LEN100_DET = _epl.PHY_PG2_LEN100_DET
PHY_PG2_FREQ100 = _epl.PHY_PG2_FREQ100
PHY_PG2_TDR_CTRL = _epl.PHY_PG2_TDR_CTRL
PHY_PG2_TDR_WIN = _epl.PHY_PG2_TDR_WIN
PHY_PG2_TDR_PEAK = _epl.PHY_PG2_TDR_PEAK
PHY_PG2_TDR_THR = _epl.PHY_PG2_TDR_THR
PHY_PG2_VAR_CTRL = _epl.PHY_PG2_VAR_CTRL
PHY_PG2_VAR_DATA = _epl.PHY_PG2_VAR_DATA
PHY_PG2_LQMR = _epl.PHY_PG2_LQMR
PHY_PG2_LQDR = _epl.PHY_PG2_LQDR
PHY_PG2_LQMR2 = _epl.PHY_PG2_LQMR2
PHY_PG3_CGCR = _epl.PHY_PG3_CGCR
PHY_PG3_PTPTR = _epl.PHY_PG3_PTPTR
PHY_PG3_CDCR1 = _epl.PHY_PG3_CDCR1
PHY_PG3_CDCR2 = _epl.PHY_PG3_CDCR2
PHY_PG3_FCO1CR = _epl.PHY_PG3_FCO1CR
PHY_PG3_FCO2CR = _epl.PHY_PG3_FCO2CR
PHY_PG3_ADCCR1 = _epl.PHY_PG3_ADCCR1
PHY_PG3_ADCCR2 = _epl.PHY_PG3_ADCCR2
PHY_PG3_BGREGCR = _epl.PHY_PG3_BGREGCR
PHY_PG3_CGMCR = _epl.PHY_PG3_CGMCR
PHY_PG3_PGMCR = _epl.PHY_PG3_PGMCR
PHY_PG4_PTP_CTL = _epl.PHY_PG4_PTP_CTL
PHY_PG4_PTP_TDR = _epl.PHY_PG4_PTP_TDR
PHY_PG4_PTP_STS = _epl.PHY_PG4_PTP_STS
PHY_PG4_PTP_TSTS = _epl.PHY_PG4_PTP_TSTS
PHY_PG4_PTP_RATEL = _epl.PHY_PG4_PTP_RATEL
PHY_PG4_PTP_RATEH = _epl.PHY_PG4_PTP_RATEH
PHY_PG4_PTP_RDCKSUM = _epl.PHY_PG4_PTP_RDCKSUM
PHY_PG4_PTP_WRCKSUM = _epl.PHY_PG4_PTP_WRCKSUM
PHY_PG4_PTP_TXTS = _epl.PHY_PG4_PTP_TXTS
PHY_PG4_PTP_RXTS = _epl.PHY_PG4_PTP_RXTS
PHY_PG4_PTP_ESTS = _epl.PHY_PG4_PTP_ESTS
PHY_PG4_PTP_EDATA = _epl.PHY_PG4_PTP_EDATA
PHY_PG5_PTP_TRIG = _epl.PHY_PG5_PTP_TRIG
PHY_PG5_PTP_EVNT = _epl.PHY_PG5_PTP_EVNT
PHY_PG5_PTP_TXCFG0 = _epl.PHY_PG5_PTP_TXCFG0
PHY_PG5_PTP_TXCFG1 = _epl.PHY_PG5_PTP_TXCFG1
PHY_PG5_PSF_CFG0 = _epl.PHY_PG5_PSF_CFG0
PHY_PG5_PTP_RXCFG0 = _epl.PHY_PG5_PTP_RXCFG0
PHY_PG5_PTP_RXCFG1 = _epl.PHY_PG5_PTP_RXCFG1
PHY_PG5_PTP_RXCFG2 = _epl.PHY_PG5_PTP_RXCFG2
PHY_PG5_PTP_RXCFG3 = _epl.PHY_PG5_PTP_RXCFG3
PHY_PG5_PTP_RXCFG4 = _epl.PHY_PG5_PTP_RXCFG4
PHY_PG5_PTP_TRDL = _epl.PHY_PG5_PTP_TRDL
PHY_PG5_PTP_TRDH = _epl.PHY_PG5_PTP_TRDH
PHY_PG6_PTP_COC = _epl.PHY_PG6_PTP_COC
PHY_PG6_PSF_CFG1 = _epl.PHY_PG6_PSF_CFG1
PHY_PG6_PSF_CFG2 = _epl.PHY_PG6_PSF_CFG2
PHY_PG6_PSF_CFG3 = _epl.PHY_PG6_PSF_CFG3
PHY_PG6_PSF_CFG4 = _epl.PHY_PG6_PSF_CFG4
PHY_PG6_PTP_SFDCFG = _epl.PHY_PG6_PTP_SFDCFG
PHY_PG6_PTP_INTCTL = _epl.PHY_PG6_PTP_INTCTL
PHY_PG6_PTP_CLKSRC = _epl.PHY_PG6_PTP_CLKSRC
PHY_PG6_PTP_ETR = _epl.PHY_PG6_PTP_ETR
PHY_PG6_PTP_OFF = _epl.PHY_PG6_PTP_OFF
PHY_PG6_PTP_GPIOMON = _epl.PHY_PG6_PTP_GPIOMON
PHY_PG6_PTP_RXHASH = _epl.PHY_PG6_PTP_RXHASH
BMCR_FORCE_SPEED_1000 = _epl.BMCR_FORCE_SPEED_1000
BMCR_COLLISION_TEST = _epl.BMCR_COLLISION_TEST
BMCR_FORCE_FULL_DUP = _epl.BMCR_FORCE_FULL_DUP
BMCR_RESTART_AUTONEG = _epl.BMCR_RESTART_AUTONEG
BMCR_ISOLATE = _epl.BMCR_ISOLATE
BMCR_POWER_DOWN = _epl.BMCR_POWER_DOWN
BMCR_AUTO_NEG_ENABLE = _epl.BMCR_AUTO_NEG_ENABLE
BMCR_FORCE_SPEED_100 = _epl.BMCR_FORCE_SPEED_100
BMCR_FORCE_SPEED_10 = _epl.BMCR_FORCE_SPEED_10
BMCR_FORCE_SPEED_MASK = _epl.BMCR_FORCE_SPEED_MASK
BMCR_LOOPBACK = _epl.BMCR_LOOPBACK
BMCR_RESET = _epl.BMCR_RESET
BMSR_EXTENDED_CAPABLE = _epl.BMSR_EXTENDED_CAPABLE
BMSR_JABBER_DETECT = _epl.BMSR_JABBER_DETECT
BMSR_LINK_STATUS = _epl.BMSR_LINK_STATUS
BMSR_AUTO_NEG_ABILITY = _epl.BMSR_AUTO_NEG_ABILITY
BMSR_REMOTE_FAULT = _epl.BMSR_REMOTE_FAULT
BMSR_AUTO_NEG_COMPLETE = _epl.BMSR_AUTO_NEG_COMPLETE
BMSR_PREAMBLE_SUPPRESS = _epl.BMSR_PREAMBLE_SUPPRESS
BMSR_RESERVED = _epl.BMSR_RESERVED
BMSR_1000T_EXT_STATUS = _epl.BMSR_1000T_EXT_STATUS
BMSR_100T2_HALF_DUP = _epl.BMSR_100T2_HALF_DUP
BMSR_100T2_FULL_DUP = _epl.BMSR_100T2_FULL_DUP
BMSR_10T_HALF_DUP = _epl.BMSR_10T_HALF_DUP
BMSR_10T_FULL_DUP = _epl.BMSR_10T_FULL_DUP
BMSR_100X_HALF_DUP = _epl.BMSR_100X_HALF_DUP
BMSR_100X_FULL_DUP = _epl.BMSR_100X_FULL_DUP
BMSR_100T4_CAPABLE = _epl.BMSR_100T4_CAPABLE
IDR1_NATIONAL_OUI_VAL = _epl.IDR1_NATIONAL_OUI_VAL
IDR2_OUI_MASK = _epl.IDR2_OUI_MASK
IDR2_MODEL_NUMBER_MASK = _epl.IDR2_MODEL_NUMBER_MASK
IDR2_REVISION_MASK = _epl.IDR2_REVISION_MASK
IDR2_MODEL_SHIFT = _epl.IDR2_MODEL_SHIFT
IDR2_NATIONAL_OUI_VAL = _epl.IDR2_NATIONAL_OUI_VAL
IDR2_MODEL_DP83848_VAL = _epl.IDR2_MODEL_DP83848_VAL
IDR2_MODEL_DP48_MINI_VAL = _epl.IDR2_MODEL_DP48_MINI_VAL
IDR2_MODEL_DP83849_VAL = _epl.IDR2_MODEL_DP83849_VAL
IDR2_MODEL_DP83640_VAL = _epl.IDR2_MODEL_DP83640_VAL
IDR2_REV_DP83848E_VAL = _epl.IDR2_REV_DP83848E_VAL
ANAR_PROTO_SEL_MASK = _epl.ANAR_PROTO_SEL_MASK
ANAR_PROTO_8023 = _epl.ANAR_PROTO_8023
ANAR_10T_HALF_DUP = _epl.ANAR_10T_HALF_DUP
ANAR_10T_FULL_DUP = _epl.ANAR_10T_FULL_DUP
ANAR_100T_HALF_DUP = _epl.ANAR_100T_HALF_DUP
ANAR_100T_FULL_DUP = _epl.ANAR_100T_FULL_DUP
ANAR_100T4_SUPPORT = _epl.ANAR_100T4_SUPPORT
ANAR_PAUSE_SUPPORT = _epl.ANAR_PAUSE_SUPPORT
ANAR_ASY_PAUSE_SUPPORT = _epl.ANAR_ASY_PAUSE_SUPPORT
ANAR_RESERVED0 = _epl.ANAR_RESERVED0
ANAR_REMOTE_FAULT = _epl.ANAR_REMOTE_FAULT
ANAR_RESERVED1 = _epl.ANAR_RESERVED1
ANAR_NEXT_PAGE_IND = _epl.ANAR_NEXT_PAGE_IND
ANLPAR_PROTO_SEL_MASK = _epl.ANLPAR_PROTO_SEL_MASK
ANLPAR_10T_HALF_DUP = _epl.ANLPAR_10T_HALF_DUP
ANLPAR_10T_FULL_DUP = _epl.ANLPAR_10T_FULL_DUP
ANLPAR_100T_HALF_DUP = _epl.ANLPAR_100T_HALF_DUP
ANLPAR_100T_FULL_DUP = _epl.ANLPAR_100T_FULL_DUP
ANLPAR_100T4_SUPPORT = _epl.ANLPAR_100T4_SUPPORT
ANLPAR_PAUSE_SUPPORT = _epl.ANLPAR_PAUSE_SUPPORT
ANLPAR_ASY_PAUSE = _epl.ANLPAR_ASY_PAUSE
ANLPAR_RESERVED0 = _epl.ANLPAR_RESERVED0
ANLPAR_REMOTE_FAULT = _epl.ANLPAR_REMOTE_FAULT
ANLPAR_ACK = _epl.ANLPAR_ACK
ANLPAR_NEXT_PAGE_IND = _epl.ANLPAR_NEXT_PAGE_IND
ANER_AUTO_NEG_CAPABLE = _epl.ANER_AUTO_NEG_CAPABLE
ANER_PAGE_RX = _epl.ANER_PAGE_RX
ANER_NEXT_PAGE_ABLE = _epl.ANER_NEXT_PAGE_ABLE
ANER_PRT_NEXT_PAGE_ABLE = _epl.ANER_PRT_NEXT_PAGE_ABLE
ANER_PARALLEL_DET_FAULT = _epl.ANER_PARALLEL_DET_FAULT
ANNPTR_CODE_MASK = _epl.ANNPTR_CODE_MASK
ANNPTR_TOGGLE = _epl.ANNPTR_TOGGLE
ANNPTR_ACK2 = _epl.ANNPTR_ACK2
ANNPTR_MSG_PAGE = _epl.ANNPTR_MSG_PAGE
ANNPTR_ACK = _epl.ANNPTR_ACK
ANNPTR_NEXT_PAGE_IND = _epl.ANNPTR_NEXT_PAGE_IND
P848_STS_LINK = _epl.P848_STS_LINK
P848_STS_SPEED = _epl.P848_STS_SPEED
P848_STS_DUPLEX = _epl.P848_STS_DUPLEX
P848_STS_LOOPBACK = _epl.P848_STS_LOOPBACK
P848_STS_AUTO_NEG_DONE = _epl.P848_STS_AUTO_NEG_DONE
P848_STS_JABBER_DETECT = _epl.P848_STS_JABBER_DETECT
P848_STS_REMOTE_FAULT = _epl.P848_STS_REMOTE_FAULT
P848_STS_MII_INTERRUPT = _epl.P848_STS_MII_INTERRUPT
P848_STS_PAGE_RXED = _epl.P848_STS_PAGE_RXED
P848_STS_DESCRAMBLER = _epl.P848_STS_DESCRAMBLER
P848_STS_SIGNAL_DETECT = _epl.P848_STS_SIGNAL_DETECT
P848_STS_FALSE_CARRIER = _epl.P848_STS_FALSE_CARRIER
P848_STS_POLARITY = _epl.P848_STS_POLARITY
P848_STS_RX_ERROR_LATCH = _epl.P848_STS_RX_ERROR_LATCH
P848_STS_MDIX_MODE = _epl.P848_STS_MDIX_MODE
P848_MICR_INTEN = _epl.P848_MICR_INTEN
P848_MICR_UNMSK_INT = _epl.P848_MICR_UNMSK_INT
P848_MICR_TINT = _epl.P848_MICR_TINT
P848_MISR_UNMSK_RHF = _epl.P848_MISR_UNMSK_RHF
P848_MISR_UNMSK_FHF = _epl.P848_MISR_UNMSK_FHF
P848_MISR_UNMSK_ANC = _epl.P848_MISR_UNMSK_ANC
P848_MISR_UNMSK_RF = _epl.P848_MISR_UNMSK_RF
P848_MISR_UNMSK_JAB = _epl.P848_MISR_UNMSK_JAB
P848_MISR_UNMSK_LINK = _epl.P848_MISR_UNMSK_LINK
P848_MISR_UNMSK_ED = _epl.P848_MISR_UNMSK_ED
P848_MISR_MSK_RHF = _epl.P848_MISR_MSK_RHF
P848_MISR_MSK_FHF = _epl.P848_MISR_MSK_FHF
P848_MISR_MSK_ANC = _epl.P848_MISR_MSK_ANC
P848_MISR_MSK_RF = _epl.P848_MISR_MSK_RF
P848_MISR_MSK_JAB = _epl.P848_MISR_MSK_JAB
P848_MISR_MSK_LINK = _epl.P848_MISR_MSK_LINK
P848_MISR_MSK_ED = _epl.P848_MISR_MSK_ED
P848_PAGESEL_PAGE_SEL = _epl.P848_PAGESEL_PAGE_SEL
P848_PAGESEL_PAGE_0 = _epl.P848_PAGESEL_PAGE_0
P848_PAGESEL_PAGE_1 = _epl.P848_PAGESEL_PAGE_1
P848_PAGESEL_PAGE_2 = _epl.P848_PAGESEL_PAGE_2
P848_PAGESEL_PAGE_3 = _epl.P848_PAGESEL_PAGE_3
P848_FCSCR_FCSCNT_MASK = _epl.P848_FCSCR_FCSCNT_MASK
P848_RECR_RXERRCNT_MASK = _epl.P848_RECR_RXERRCNT_MASK
P848_PCSR_DESCRAM_BYP = _epl.P848_PCSR_DESCRAM_BYP
P848_PCSR_SCRAM_BYP = _epl.P848_PCSR_SCRAM_BYP
P848_PCSR_NRZI_BYP = _epl.P848_PCSR_NRZI_BYP
P848_PCSR_FEFI_EN = _epl.P848_PCSR_FEFI_EN
P848_PCSR_FEFI_TST = _epl.P848_PCSR_FEFI_TST
P848_PCSR_FORCE_100_OK = _epl.P848_PCSR_FORCE_100_OK
P848_PCSR_FX_EN = _epl.P848_PCSR_FX_EN
P848_PCSR_SD_OPTION = _epl.P848_PCSR_SD_OPTION
P848_PCSR_SD_FORCE_PMA = _epl.P848_PCSR_SD_FORCE_PMA
P848_PCSR_TQ_EN = _epl.P848_PCSR_TQ_EN
P848_PCSR_FREE_CLK = _epl.P848_PCSR_FREE_CLK
P848_PCSR_BYP_4B5B = _epl.P848_PCSR_BYP_4B5B
P848_RBR_RX_RD_4 = _epl.P848_RBR_RX_RD_4
P848_RBR_RX_RD_1 = _epl.P848_RBR_RX_RD_1
P848_RBR_RX_RD_2 = _epl.P848_RBR_RX_RD_2
P848_RBR_RX_RD_3 = _epl.P848_RBR_RX_RD_3
P848_RBR_RX_UNF_STS = _epl.P848_RBR_RX_UNF_STS
P848_RBR_RX_OVF_STS = _epl.P848_RBR_RX_OVF_STS
P848_RBR_RMII_REV1_0 = _epl.P848_RBR_RMII_REV1_0
P848_RBR_RMII_MODE = _epl.P848_RBR_RMII_MODE
P848_LED_ACTLED = _epl.P848_LED_ACTLED
P848_LED_LNKLED = _epl.P848_LED_LNKLED
P848_LED_SPDLED = _epl.P848_LED_SPDLED
P848_LED_DRV_ACTLED = _epl.P848_LED_DRV_ACTLED
P848_LED_DRV_LNKLED = _epl.P848_LED_DRV_LNKLED
P848_LED_DRV_SPDLED = _epl.P848_LED_DRV_SPDLED
P848_PHYCTRL_ADDR_MASK = _epl.P848_PHYCTRL_ADDR_MASK
P848_PHYCTRL_LED_CFG0 = _epl.P848_PHYCTRL_LED_CFG0
P848_PHYCTRL_LED_CFG1 = _epl.P848_PHYCTRL_LED_CFG1
P848_PHYCTRL_BP_STRETCH = _epl.P848_PHYCTRL_BP_STRETCH
P848_PHYCTRL_BIST_START = _epl.P848_PHYCTRL_BIST_START
P848_PHYCTRL_BIST_STS = _epl.P848_PHYCTRL_BIST_STS
P848_PHYCTRL_PSR_15 = _epl.P848_PHYCTRL_PSR_15
P848_PHYCTRL_BIST_FE = _epl.P848_PHYCTRL_BIST_FE
P848_PHYCTRL_PAUSE_TX = _epl.P848_PHYCTRL_PAUSE_TX
P848_PHYCTRL_PAUSE_RX = _epl.P848_PHYCTRL_PAUSE_RX
P848_PHYCTRL_FORCE_MDIX = _epl.P848_PHYCTRL_FORCE_MDIX
P848_PHYCTRL_MDIX_EN = _epl.P848_PHYCTRL_MDIX_EN
P848_10BTSCR_JABBER_DIS = _epl.P848_10BTSCR_JABBER_DIS
P848_10BTSCR_HRTBT_DIS = _epl.P848_10BTSCR_HRTBT_DIS
P848_10BTSCR_SCALE_MSB = _epl.P848_10BTSCR_SCALE_MSB
P848_10BTSCR_ATDIS = _epl.P848_10BTSCR_ATDIS
P848_10BTSCR_POLARITY = _epl.P848_10BTSCR_POLARITY
P848_10BTSCR_FORCEPOL = _epl.P848_10BTSCR_FORCEPOL
P848_10BTSCR_FRC_10 = _epl.P848_10BTSCR_FRC_10
P848_10BTSCR_LP_DIS = _epl.P848_10BTSCR_LP_DIS
P848_10BTSCR_LP_10_DIS = _epl.P848_10BTSCR_LP_10_DIS
P848_10BTSCR_SQLCH_MASK = _epl.P848_10BTSCR_SQLCH_MASK
P848_10BTSCR_ERRRG_MASK = _epl.P848_10BTSCR_ERRRG_MASK
P848_10BTSCR_REJECT100T = _epl.P848_10BTSCR_REJECT100T
P848_10BTSCR_10BT_SER = _epl.P848_10BTSCR_10BT_SER
P848_CDCTRL1_CDPATTSEL0 = _epl.P848_CDCTRL1_CDPATTSEL0
P848_CDCTRL1_CDPATTSEL1 = _epl.P848_CDCTRL1_CDPATTSEL1
P848_CDCTRL1_10MEG_PG = _epl.P848_CDCTRL1_10MEG_PG
P848_CDCTRL1_CDPATTEN10 = _epl.P848_CDCTRL1_CDPATTEN10
P848_CDCTRL1_BIST_CONT = _epl.P848_CDCTRL1_BIST_CONT
P848_CDCTRL1_BIST_EC_MSK = _epl.P848_CDCTRL1_BIST_EC_MSK
P848_EDCR_DATA_CNT_MASK = _epl.P848_EDCR_DATA_CNT_MASK
P848_EDCR_ERR_CNT_MASK = _epl.P848_EDCR_ERR_CNT_MASK
P848_EDCR_DATA_MET = _epl.P848_EDCR_DATA_MET
P848_EDCR_ERR_MET = _epl.P848_EDCR_ERR_MET
P848_EDCR_PWR_STATE = _epl.P848_EDCR_PWR_STATE
P848_EDCR_BURST_DIS = _epl.P848_EDCR_BURST_DIS
P848_EDCR_MANUAL_POWER = _epl.P848_EDCR_MANUAL_POWER
P848_EDCR_AUTO_DOWN = _epl.P848_EDCR_AUTO_DOWN
P848_EDCR_AUTO_UP = _epl.P848_EDCR_AUTO_UP
P848_EDCR_ENABLE = _epl.P848_EDCR_ENABLE
P849_RBR_ELAST_BUF_MASK = _epl.P849_RBR_ELAST_BUF_MASK
P849_RBR_ELAST_14_BIT = _epl.P849_RBR_ELAST_14_BIT
P849_RBR_ELAST_2_BIT = _epl.P849_RBR_ELAST_2_BIT
P849_RBR_ELAST_6_BIT = _epl.P849_RBR_ELAST_6_BIT
P849_RBR_ELAST_10_BIT = _epl.P849_RBR_ELAST_10_BIT
P849_RBR_SINGLE_CLK_TX = _epl.P849_RBR_SINGLE_CLK_TX
P849_RBR_SINGLE_CLK_RX = _epl.P849_RBR_SINGLE_CLK_RX
P849_RBR_PMD_LOOP = _epl.P849_RBR_PMD_LOOP
P849_RBR_TX_SOURCE_MASK = _epl.P849_RBR_TX_SOURCE_MASK
P849_RBR_TX_NORMAL = _epl.P849_RBR_TX_NORMAL
P849_RBR_TX_OPPOSITE = _epl.P849_RBR_TX_OPPOSITE
P849_RBR_TX_OPPOSITE_RX = _epl.P849_RBR_TX_OPPOSITE_RX
P849_RBR_TX_DISABLED = _epl.P849_RBR_TX_DISABLED
P849_RBR_RX_PORT_MASK = _epl.P849_RBR_RX_PORT_MASK
P849_RBR_RX_NORMAL = _epl.P849_RBR_RX_NORMAL
P849_RBR_RX_OPPOSITE = _epl.P849_RBR_RX_OPPOSITE
P849_RBR_RX_BOTH_PORTS = _epl.P849_RBR_RX_BOTH_PORTS
P849_RBR_RX_DISABLED = _epl.P849_RBR_RX_DISABLED
P849_RBR_DIS_TX_LAT_OPT = _epl.P849_RBR_DIS_TX_LAT_OPT
P849_RBR_SIM_WRITE_EN = _epl.P849_RBR_SIM_WRITE_EN
P849_RBR_NORMAL = _epl.P849_RBR_NORMAL
P849_RBR_SWAP = _epl.P849_RBR_SWAP
P849_RBR_EXT = _epl.P849_RBR_EXT
P849_FAST_ADAPT = _epl.P849_FAST_ADAPT
P849_SOFT_RESET = _epl.P849_SOFT_RESET
PHYCR2_SYNC_ENET_EN = _epl.PHYCR2_SYNC_ENET_EN
PHYCR2_CLK_OUT_RX_EN = _epl.PHYCR2_CLK_OUT_RX_EN
PHYCR2_BC_WRITE_EN = _epl.PHYCR2_BC_WRITE_EN
PHYCR2_PHY_CMP_MD = _epl.PHYCR2_PHY_CMP_MD
PHYCR2_SOFT_RESET = _epl.PHYCR2_SOFT_RESET
PHYCR2_CLK_OUT_DIS = _epl.PHYCR2_CLK_OUT_DIS
P849_TEST_MODE_MASK = _epl.P849_TEST_MODE_MASK
P849_TEST_MODE_NORMAL = _epl.P849_TEST_MODE_NORMAL
P849_TEST_MODE_ED_OB = _epl.P849_TEST_MODE_ED_OB
P849_TEST_MODE_MDIX_OB = _epl.P849_TEST_MODE_MDIX_OB
P849_TEST_MODE_FXC_OB = _epl.P849_TEST_MODE_FXC_OB
P849_LEN100_AEQ = _epl.P849_LEN100_AEQ
P849_PMD_SOFT_RESET = _epl.P849_PMD_SOFT_RESET
P849_AUTO_NEG_LOOPBACK = _epl.P849_AUTO_NEG_LOOPBACK
P849_TEST_SEL_MASK = _epl.P849_TEST_SEL_MASK
P849_TEST_SEL_NORMAL = _epl.P849_TEST_SEL_NORMAL
P849_TEST_SEL_ADC = _epl.P849_TEST_SEL_ADC
P849_TEST_SEL_CD_OB = _epl.P849_TEST_SEL_CD_OB
P849_TEST_SEL_AN_RX_SM = _epl.P849_TEST_SEL_AN_RX_SM
P849_TEST_SEL_AN_TX_SM = _epl.P849_TEST_SEL_AN_TX_SM
P849_TEST_SEL_AN_ARM_SM = _epl.P849_TEST_SEL_AN_ARM_SM
P849_TEST_SEL_NLPLIT_SM = _epl.P849_TEST_SEL_NLPLIT_SM
P849_NRZ_OBSERVE = _epl.P849_NRZ_OBSERVE
P849_BYP_PLLS = _epl.P849_BYP_PLLS
P849_BYP_ADC = _epl.P849_BYP_ADC
P849_DIS_IO_TURBO = _epl.P849_DIS_IO_TURBO
P849_ATP0_EN = _epl.P849_ATP0_EN
P849_ATP1_EN = _epl.P849_ATP1_EN
P849_SD_OBSERVE = _epl.P849_SD_OBSERVE
P849_PWRUP_OBSERVE = _epl.P849_PWRUP_OBSERVE
P849_FCO_CTL_EN_OB = _epl.P849_FCO_CTL_EN_OB
P849_INVERT_ADC_CLK = _epl.P849_INVERT_ADC_CLK
P849_MDIX_TX_INV = _epl.P849_MDIX_TX_INV
P849_ADC_CLK_BYPASS = _epl.P849_ADC_CLK_BYPASS
P849_ADC_CLK_OE = _epl.P849_ADC_CLK_OE
P849_PGM_VFILTER_LOW = _epl.P849_PGM_VFILTER_LOW
P849_PGM_VFILTER_HIGH = _epl.P849_PGM_VFILTER_HIGH
P849_CGM_VFILTER_LOW = _epl.P849_CGM_VFILTER_LOW
P849_CGM_VFILTER_HIGH = _epl.P849_CGM_VFILTER_HIGH
P849_MR_AAGC_10MB_MASK = _epl.P849_MR_AAGC_10MB_MASK
P849_MR_AAGC_10MB_SHIFT = _epl.P849_MR_AAGC_10MB_SHIFT
P849_MR_TM_RXSEL_MASK = _epl.P849_MR_TM_RXSEL_MASK
P849_MR_TM_RXSEL_SHIFT = _epl.P849_MR_TM_RXSEL_SHIFT
P849_MR_TM_TXSEL_MASK = _epl.P849_MR_TM_TXSEL_MASK
P849_MR_TM_TXSEL_SHIFT = _epl.P849_MR_TM_TXSEL_SHIFT
P849_AGC_ALPHA_MASK = _epl.P849_AGC_ALPHA_MASK
P849_FREEZE_AGC = _epl.P849_FREEZE_AGC
P849_LOAD_AGC = _epl.P849_LOAD_AGC
P849_FREEZE_BLW = _epl.P849_FREEZE_BLW
P849_LOAD_BLW = _epl.P849_LOAD_BLW
P849_FORCE_MSE_NOTOK = _epl.P849_FORCE_MSE_NOTOK
P849_FORCE_MSE_OK = _epl.P849_FORCE_MSE_OK
P849_INIT_MSE = _epl.P849_INIT_MSE
P849_MSE_THSEL = _epl.P849_MSE_THSEL
P849_AGC_7BITS = _epl.P849_AGC_7BITS
P849_BLW_8BITS = _epl.P849_BLW_8BITS
P849_IGNORE_MSEOK = _epl.P849_IGNORE_MSEOK
P849_DIS_PMD_INIT = _epl.P849_DIS_PMD_INIT
P849_PMD_INIT_TEST = _epl.P849_PMD_INIT_TEST
P849_AAGC_THRESH_MASK = _epl.P849_AAGC_THRESH_MASK
P849_AAGC_FREEZE = _epl.P849_AAGC_FREEZE
P849_LOAD_AAGC_ACC = _epl.P849_LOAD_AAGC_ACC
P849_LOAD_AAGC_TMR = _epl.P849_LOAD_AAGC_TMR
P849_FORCE_AEQ = _epl.P849_FORCE_AEQ
P849_FORCE_AEQ_VAL_MASK = _epl.P849_FORCE_AEQ_VAL_MASK
P849_FORCE_AEQ_VAL_SHIFT = _epl.P849_FORCE_AEQ_VAL_SHIFT
P849_MAX_AEQ_MASK = _epl.P849_MAX_AEQ_MASK
P849_MAX_AEQ_SHIFT = _epl.P849_MAX_AEQ_SHIFT
P849_DIS_AEQ_DECR = _epl.P849_DIS_AEQ_DECR
P849_LOAD_AEQ_THRESH = _epl.P849_LOAD_AEQ_THRESH
P849_TRL_ALPHA_MASK = _epl.P849_TRL_ALPHA_MASK
P849_TRL_ALPHA_SHIFT = _epl.P849_TRL_ALPHA_SHIFT
P849_TRL_BETA_MASK = _epl.P849_TRL_BETA_MASK
P849_TRL_BETA_SHIFT = _epl.P849_TRL_BETA_SHIFT
P849_TRL_THRESH_MASK = _epl.P849_TRL_THRESH_MASK
P849_TRL_THRESH_SHIFT = _epl.P849_TRL_THRESH_SHIFT
P849_TRL_KILLREG = _epl.P849_TRL_KILLREG
P849_TRL_SEL_REG = _epl.P849_TRL_SEL_REG
P849_RST_TRL_ON_ERR = _epl.P849_RST_TRL_ON_ERR
P849_TRL_FRZ_ACC = _epl.P849_TRL_FRZ_ACC
P849_TRL_FRZ_LFO = _epl.P849_TRL_FRZ_LFO
P849_LOAD_TRL_PHASE = _epl.P849_LOAD_TRL_PHASE
P849_LOAD_TRL_LFO = _epl.P849_LOAD_TRL_LFO
P849_LOAD_TRL_BETA = _epl.P849_LOAD_TRL_BETA
P849_KILL_COEFF_N1 = _epl.P849_KILL_COEFF_N1
P849_KILL_EQ_TAP0 = _epl.P849_KILL_EQ_TAP0
P849_KILL_COEF1 = _epl.P849_KILL_COEF1
P849_KILL_COEF2 = _epl.P849_KILL_COEF2
P849_KILL_COEF3 = _epl.P849_KILL_COEF3
P849_FREEZE_COEF = _epl.P849_FREEZE_COEF
P849_NOSHIFT_N1 = _epl.P849_NOSHIFT_N1
P849_EQ_LOAD_COEF1 = _epl.P849_EQ_LOAD_COEF1
P849_EQ_LOAD_COEF2 = _epl.P849_EQ_LOAD_COEF2
P849_EQ_LOAD_COEF3 = _epl.P849_EQ_LOAD_COEF3
P849_COEF1_9BITS = _epl.P849_COEF1_9BITS
P849_COEF2_8BITS = _epl.P849_COEF2_8BITS
P849_COEF3_7BITS = _epl.P849_COEF3_7BITS
P849_ALLOW_POS_C1 = _epl.P849_ALLOW_POS_C1
P849_LOAD_ARB_TIMER = _epl.P849_LOAD_ARB_TIMER
P849_LOAD_TX_TIMER = _epl.P849_LOAD_TX_TIMER
P849_LOAD_FLP_DATA_TIMER = _epl.P849_LOAD_FLP_DATA_TIMER
P849_LOAD_NLP_MIN_TIMER = _epl.P849_LOAD_NLP_MIN_TIMER
P849_LOAD_NLP_MAX_TIMER = _epl.P849_LOAD_NLP_MAX_TIMER
P849_LOAD_NLP_RX_TIMER = _epl.P849_LOAD_NLP_RX_TIMER
P849_LOAD_ED_TIMER = _epl.P849_LOAD_ED_TIMER
P849_ADC_WATCHDOG_EN = _epl.P849_ADC_WATCHDOG_EN
P849_ADC_WATCHDOG_TO_EN = _epl.P849_ADC_WATCHDOG_TO_EN
P849_ADC_WATCHDOG_ERR = _epl.P849_ADC_WATCHDOG_ERR
P849_MR_10BT_LR_MASK = _epl.P849_MR_10BT_LR_MASK
P849_MR_10BT_LR_SHIFT = _epl.P849_MR_10BT_LR_SHIFT
P849_MR_NLP_RX_FIX = _epl.P849_MR_NLP_RX_FIX
P849_ADC_WD_THRESH_MASK = _epl.P849_ADC_WD_THRESH_MASK
P849_ADC_WD_THRESH_SHIFT = _epl.P849_ADC_WD_THRESH_SHIFT
P849_LP_THRESHOLD_MASK = _epl.P849_LP_THRESHOLD_MASK
P849_LP_THRESHOLD_SHIFT = _epl.P849_LP_THRESHOLD_SHIFT
P849_SAMPLE_DATA = _epl.P849_SAMPLE_DATA
P849_PLLBIST_RSTN = _epl.P849_PLLBIST_RSTN
P849_PLLBIST_EN = _epl.P849_PLLBIST_EN
P849_PLLBIST_MODE = _epl.P849_PLLBIST_MODE
P849_PLLBIST_DONE = _epl.P849_PLLBIST_DONE
P849_TEST_DATA_SEL_MASK = _epl.P849_TEST_DATA_SEL_MASK
P849_TEST_DATA_SEL_SHIFT = _epl.P849_TEST_DATA_SEL_SHIFT
P849_SDOFFT_MASK = _epl.P849_SDOFFT_MASK
P849_SDOFFT_SHIFT = _epl.P849_SDOFFT_SHIFT
P849_SDONT_MASK = _epl.P849_SDONT_MASK
P849_SDONT_SHIFT = _epl.P849_SDONT_SHIFT
P849_SIG_DET_TIME = _epl.P849_SIG_DET_TIME
P849_FORCE_SIG_DET_PMD = _epl.P849_FORCE_SIG_DET_PMD
P849_10B_SCALE_LSB = _epl.P849_10B_SCALE_LSB
P849_MR_SHORT_CABLE = _epl.P849_MR_SHORT_CABLE
P849_SIG_DET_TH_DELTA = _epl.P849_SIG_DET_TH_DELTA
P849_100B_PMA_TEST_EN = _epl.P849_100B_PMA_TEST_EN
P849_AUTO_NEG_TEST_EN = _epl.P849_AUTO_NEG_TEST_EN
P849_SIG_DET_PTOP = _epl.P849_SIG_DET_PTOP
P849_CABLE_LEN_MASK = _epl.P849_CABLE_LEN_MASK
P849_CABLE_LEN_SHIFT = _epl.P849_CABLE_LEN_SHIFT
P849_AEQ_VAL_MASK = _epl.P849_AEQ_VAL_MASK
P849_AEQ_VAL_SHIFT = _epl.P849_AEQ_VAL_SHIFT
P849_FREQ_OFFSET_MASK = _epl.P849_FREQ_OFFSET_MASK
P849_FREQ_OFFSET_SHIFT = _epl.P849_FREQ_OFFSET_SHIFT
P849_SEL_FC = _epl.P849_SEL_FC
P849_SAMPLE_FREQ = _epl.P849_SAMPLE_FREQ
P849_RX_THRESHOLD_MASK = _epl.P849_RX_THRESHOLD_MASK
P849_RX_THRESHOLD_SHIFT = _epl.P849_RX_THRESHOLD_SHIFT
P849_TDR_MIN_MODE = _epl.P849_TDR_MIN_MODE
P849_TDR_WIDTH_MASK = _epl.P849_TDR_WIDTH_MASK
P849_TDR_WIDTH_SHIFT = _epl.P849_TDR_WIDTH_SHIFT
P849_SEND_TDR = _epl.P849_SEND_TDR
P849_RX_CHANNEL = _epl.P849_RX_CHANNEL
P849_TX_CHANNEL = _epl.P849_TX_CHANNEL
P849_TDR_100MB = _epl.P849_TDR_100MB
P849_TDR_ENABLE = _epl.P849_TDR_ENABLE
P849_TDR_STOP_MASK = _epl.P849_TDR_STOP_MASK
P849_TDR_STOP_SHIFT = _epl.P849_TDR_STOP_SHIFT
P849_TDR_START_MASK = _epl.P849_TDR_START_MASK
P849_TDR_START_SHIFT = _epl.P849_TDR_START_SHIFT
P849_TDR_PEAK_TIME_MASK = _epl.P849_TDR_PEAK_TIME_MASK
P849_TDR_PEAK_TIME_SHIFT = _epl.P849_TDR_PEAK_TIME_SHIFT
P849_TDR_PEAK_MASK = _epl.P849_TDR_PEAK_MASK
P849_TDR_PEAK_SHIFT = _epl.P849_TDR_PEAK_SHIFT
P849_TDR_THR_TIME_MASK = _epl.P849_TDR_THR_TIME_MASK
P849_TDR_THR_TIME_SHIFT = _epl.P849_TDR_THR_TIME_SHIFT
P849_TDR_THR_MET = _epl.P849_TDR_THR_MET
P849_VAR_ENABLE = _epl.P849_VAR_ENABLE
P849_VAR_TIMER_MASK = _epl.P849_VAR_TIMER_MASK
P849_VAR_FREEZE = _epl.P849_VAR_FREEZE
P849_VAR_RDY = _epl.P849_VAR_RDY
P849_C1_LO_WARN = _epl.P849_C1_LO_WARN
P849_C1_HI_WARN = _epl.P849_C1_HI_WARN
P849_DAGC_LO_WARN = _epl.P849_DAGC_LO_WARN
P849_DAGC_HI_WARN = _epl.P849_DAGC_HI_WARN
P849_DBLW_LO_WARN = _epl.P849_DBLW_LO_WARN
P849_DBLW_HI_WARN = _epl.P849_DBLW_HI_WARN
P849_FREQ_LO_WARN = _epl.P849_FREQ_LO_WARN
P849_FREQ_HI_WARN = _epl.P849_FREQ_HI_WARN
P849_FC_LO_WARN = _epl.P849_FC_LO_WARN
P849_FC_HI_WARN = _epl.P849_FC_HI_WARN
P849_BRK_LNK_C1 = _epl.P849_BRK_LNK_C1
P849_BRK_LNK_DAGC = _epl.P849_BRK_LNK_DAGC
P849_BRK_LNK_DBLW = _epl.P849_BRK_LNK_DBLW
P849_BRK_LNK_FREQ = _epl.P849_BRK_LNK_FREQ
P849_BRK_LNK_FC = _epl.P849_BRK_LNK_FC
P849_LQM_ENABLE = _epl.P849_LQM_ENABLE
P849_LQ_THR_DATA_MASK = _epl.P849_LQ_THR_DATA_MASK
P849_LQ_THR_DATA_SHIFT = _epl.P849_LQ_THR_DATA_SHIFT
P849_LQ_THR_SEL = _epl.P849_LQ_THR_SEL
P849_LQ_PARAM_SEL_MASK = _epl.P849_LQ_PARAM_SEL_MASK
P849_LQ_PARAM_SEL_SHIFT = _epl.P849_LQ_PARAM_SEL_SHIFT
P849_WRITE_LQ_THR = _epl.P849_WRITE_LQ_THR
P849_SAMPLE_PARAM = _epl.P849_SAMPLE_PARAM
P640_PCFCR = _epl.P640_PCFCR
P640_PCF_EN = _epl.P640_PCF_EN
P640_PCF_BUF_SHIFT = _epl.P640_PCF_BUF_SHIFT
P640_PCF_BUF_MASK = _epl.P640_PCF_BUF_MASK
P640_PCF_BC_DIS = _epl.P640_PCF_BC_DIS
P640_PCF_INT_CTL_SHIFT = _epl.P640_PCF_INT_CTL_SHIFT
P640_PCF_INT_CTL_MASK = _epl.P640_PCF_INT_CTL_MASK
P640_PCF_DA_SEL = _epl.P640_PCF_DA_SEL
P640_PCF_STS_OK = _epl.P640_PCF_STS_OK
P640_PCF_STS_ERR = _epl.P640_PCF_STS_ERR
P640_RESTART_ON_VAR = _epl.P640_RESTART_ON_VAR
P640_VAR_HIGH_WARN = _epl.P640_VAR_HIGH_WARN
P640_DIS_TRIG_UPD_GATE = _epl.P640_DIS_TRIG_UPD_GATE
P640_DIS_TX_TS_GATE = _epl.P640_DIS_TX_TS_GATE
P640_DIS_RX_TS_GATE = _epl.P640_DIS_RX_TS_GATE
P640_DIS_RX_INFO_GATE = _epl.P640_DIS_RX_INFO_GATE
P640_DIS_EVNT_GATE = _epl.P640_DIS_EVNT_GATE
P640_DIS_CLK_UPD_GATE = _epl.P640_DIS_CLK_UPD_GATE
P640_DIS_REG125_GATE = _epl.P640_DIS_REG125_GATE
P640_DIS_CLKTX_GATE = _epl.P640_DIS_CLKTX_GATE
P640_DIS_CLKRX_GATE = _epl.P640_DIS_CLKRX_GATE
P640_DIS_CLK125_GATE = _epl.P640_DIS_CLK125_GATE
P640_DIS_CLKDIV_GATE = _epl.P640_DIS_CLKDIV_GATE
P640_DIS_ADC125_GATE = _epl.P640_DIS_ADC125_GATE
P640_DIS_ADC80_GATE = _epl.P640_DIS_ADC80_GATE
P640_DIS_REGCLK_GATE = _epl.P640_DIS_REGCLK_GATE
P640_TRIG_SEL_SHIFT = _epl.P640_TRIG_SEL_SHIFT
P640_TRIG_SEL_MASK = _epl.P640_TRIG_SEL_MASK
P640_TRIG_DIS = _epl.P640_TRIG_DIS
P640_TRIG_EN = _epl.P640_TRIG_EN
P640_TRIG_READ = _epl.P640_TRIG_READ
P640_TRIG_LOAD = _epl.P640_TRIG_LOAD
P640_PTP_RD_CLK = _epl.P640_PTP_RD_CLK
P640_PTP_LOAD_CLK = _epl.P640_PTP_LOAD_CLK
P640_PTP_STEP_CLK = _epl.P640_PTP_STEP_CLK
P640_PTP_ENABLE = _epl.P640_PTP_ENABLE
P640_PTP_DISABLE = _epl.P640_PTP_DISABLE
P640_PTP_RESET = _epl.P640_PTP_RESET
P640_TXTS_RDY = _epl.P640_TXTS_RDY
P640_RXTS_RDY = _epl.P640_RXTS_RDY
P640_TRIG_DONE = _epl.P640_TRIG_DONE
P640_EVENT_RDY = _epl.P640_EVENT_RDY
P640_TXTS_IE = _epl.P640_TXTS_IE
P640_RXTS_IE = _epl.P640_RXTS_IE
P640_TRIG_IE = _epl.P640_TRIG_IE
P640_EVENT_IE = _epl.P640_EVENT_IE
P640_TRIG7_ERROR = _epl.P640_TRIG7_ERROR
P640_TRIG7_ACTIVE = _epl.P640_TRIG7_ACTIVE
P640_TRIG6_ERROR = _epl.P640_TRIG6_ERROR
P640_TRIG6_ACTIVE = _epl.P640_TRIG6_ACTIVE
P640_TRIG5_ERROR = _epl.P640_TRIG5_ERROR
P640_TRIG5_ACTIVE = _epl.P640_TRIG5_ACTIVE
P640_TRIG4_ERROR = _epl.P640_TRIG4_ERROR
P640_TRIG4_ACTIVE = _epl.P640_TRIG4_ACTIVE
P640_TRIG3_ERROR = _epl.P640_TRIG3_ERROR
P640_TRIG3_ACTIVE = _epl.P640_TRIG3_ACTIVE
P640_TRIG2_ERROR = _epl.P640_TRIG2_ERROR
P640_TRIG2_ACTIVE = _epl.P640_TRIG2_ACTIVE
P640_TRIG1_ERROR = _epl.P640_TRIG1_ERROR
P640_TRIG1_ACTIVE = _epl.P640_TRIG1_ACTIVE
P640_TRIG0_ERROR = _epl.P640_TRIG0_ERROR
P640_TRIG0_ACTIVE = _epl.P640_TRIG0_ACTIVE
P640_PTP_RATE_DIR = _epl.P640_PTP_RATE_DIR
P640_PTP_TMP_RATE = _epl.P640_PTP_TMP_RATE
P640_PTP_RATE_HI_MASK = _epl.P640_PTP_RATE_HI_MASK
P640_PTP_RATE_HI_SHIFT = _epl.P640_PTP_RATE_HI_SHIFT
P640_EVNTS_MISSED_SHIFT = _epl.P640_EVNTS_MISSED_SHIFT
P640_EVNTS_MISSED_MASK = _epl.P640_EVNTS_MISSED_MASK
P640_EVNTS_TS_LEN_SHIFT = _epl.P640_EVNTS_TS_LEN_SHIFT
P640_EVNTS_TS_LEN_MASK = _epl.P640_EVNTS_TS_LEN_MASK
P640_EVNT_RF = _epl.P640_EVNT_RF
P640_EVNT_NUM_SHIFT = _epl.P640_EVNT_NUM_SHIFT
P640_EVNT_NUM_MASK = _epl.P640_EVNT_NUM_MASK
P640_MULT_EVENT = _epl.P640_MULT_EVENT
P640_EVENT_DET = _epl.P640_EVENT_DET
P640_E7_RISE = _epl.P640_E7_RISE
P640_E7_DET = _epl.P640_E7_DET
P640_E6_RISE = _epl.P640_E6_RISE
P640_E6_DET = _epl.P640_E6_DET
P640_E5_RISE = _epl.P640_E5_RISE
P640_E5_DET = _epl.P640_E5_DET
P640_E4_RISE = _epl.P640_E4_RISE
P640_E4_DET = _epl.P640_E4_DET
P640_E3_RISE = _epl.P640_E3_RISE
P640_E3_DET = _epl.P640_E3_DET
P640_E2_RISE = _epl.P640_E2_RISE
P640_E2_DET = _epl.P640_E2_DET
P640_E1_RISE = _epl.P640_E1_RISE
P640_E1_DET = _epl.P640_E1_DET
P640_E0_RISE = _epl.P640_E0_RISE
P640_E0_DET = _epl.P640_E0_DET
P640_TRIG_PULSE = _epl.P640_TRIG_PULSE
P640_TRIG_PER = _epl.P640_TRIG_PER
P640_TRIG_IF_LATE = _epl.P640_TRIG_IF_LATE
P640_TRIG_NOTIFY = _epl.P640_TRIG_NOTIFY
P640_TRIG_GPIO_SHIFT = _epl.P640_TRIG_GPIO_SHIFT
P640_TRIG_GPIO_MASK = _epl.P640_TRIG_GPIO_MASK
P640_TRIG_TOGGLE = _epl.P640_TRIG_TOGGLE
P640_TRIG_CSEL_SHIFT = _epl.P640_TRIG_CSEL_SHIFT
P640_TRIG_CSEL_MASK = _epl.P640_TRIG_CSEL_MASK
P640_TRIG_WR = _epl.P640_TRIG_WR
P640_EVNT_RISE = _epl.P640_EVNT_RISE
P640_EVNT_FALL = _epl.P640_EVNT_FALL
P640_EVNT_SINGLE = _epl.P640_EVNT_SINGLE
P640_EVNT_GPIO_SHIFT = _epl.P640_EVNT_GPIO_SHIFT
P640_EVNT_GPIO_MASK = _epl.P640_EVNT_GPIO_MASK
P640_EVNT_SEL_SHIFT = _epl.P640_EVNT_SEL_SHIFT
P640_EVNT_SEL_MASK = _epl.P640_EVNT_SEL_MASK
P640_EVNT_WR = _epl.P640_EVNT_WR
P640_SYNC_1STEP = _epl.P640_SYNC_1STEP
P640_DR_INSERT = _epl.P640_DR_INSERT
P640_NTP_TS_EN = _epl.P640_NTP_TS_EN
P640_IGNORE_2STEP = _epl.P640_IGNORE_2STEP
P640_CRC_1STEP = _epl.P640_CRC_1STEP
P640_CHK_1STEP = _epl.P640_CHK_1STEP
P640_IP1588_EN = _epl.P640_IP1588_EN
P640_TX_L2_EN = _epl.P640_TX_L2_EN
P640_TX_IPV6_EN = _epl.P640_TX_IPV6_EN
P640_TX_IPV4_EN = _epl.P640_TX_IPV4_EN
P640_TX_PTP_VER_SHIFT = _epl.P640_TX_PTP_VER_SHIFT
P640_TX_PTP_VER_MASK = _epl.P640_TX_PTP_VER_MASK
P640_TX_TS_EN = _epl.P640_TX_TS_EN
P640_BYTE0_MASK_SHIFT = _epl.P640_BYTE0_MASK_SHIFT
P640_BYTE0_MASK_MASK = _epl.P640_BYTE0_MASK_MASK
P640_BYTE0_DATA_SHIFT = _epl.P640_BYTE0_DATA_SHIFT
P640_BYTE0_DATA_MASK = _epl.P640_BYTE0_DATA_MASK
P640_MAC_SRC_ADD_SHIFT = _epl.P640_MAC_SRC_ADD_SHIFT
P640_MAC_SRC_ADD_MASK = _epl.P640_MAC_SRC_ADD_MASK
P640_MIN_PRE_SHIFT = _epl.P640_MIN_PRE_SHIFT
P640_MIN_PRE_MASK = _epl.P640_MIN_PRE_MASK
P640_PKT_ENDIAN = _epl.P640_PKT_ENDIAN
P640_PKT_IPV4 = _epl.P640_PKT_IPV4
P640_PKT_PCFR_EN = _epl.P640_PKT_PCFR_EN
P640_PKT_ERR_EN = _epl.P640_PKT_ERR_EN
P640_PKT_TXTS_EN = _epl.P640_PKT_TXTS_EN
P640_PKT_RXTS_EN = _epl.P640_PKT_RXTS_EN
P640_PKT_TRIG_EN = _epl.P640_PKT_TRIG_EN
P640_PKT_EVNT_EN = _epl.P640_PKT_EVNT_EN
P640_DOMAIN_EN = _epl.P640_DOMAIN_EN
P640_ALT_MAST_DIS = _epl.P640_ALT_MAST_DIS
P640_USER_IP_SEL = _epl.P640_USER_IP_SEL
P640_USER_IP_EN = _epl.P640_USER_IP_EN
P640_RX_SLAVE = _epl.P640_RX_SLAVE
P640_IP1588_EN2 = _epl.P640_IP1588_EN2
P640_IP1588_EN1 = _epl.P640_IP1588_EN1
P640_IP1588_EN0 = _epl.P640_IP1588_EN0
P640_RX_L2_EN = _epl.P640_RX_L2_EN
P640_RX_IPV6_EN = _epl.P640_RX_IPV6_EN
P640_RX_IPV4_EN = _epl.P640_RX_IPV4_EN
P640_RX_PTP_VER_SHIFT = _epl.P640_RX_PTP_VER_SHIFT
P640_RX_PTP_VER_MASK = _epl.P640_RX_PTP_VER_MASK
P640_RX_TS_EN = _epl.P640_RX_TS_EN
P640_TS_MIN_IFG_SHIFT = _epl.P640_TS_MIN_IFG_SHIFT
P640_TS_MIN_IFG_MASK = _epl.P640_TS_MIN_IFG_MASK
P640_ACC_UDP = _epl.P640_ACC_UDP
P640_ACC_CRC = _epl.P640_ACC_CRC
P640_TS_APPEND = _epl.P640_TS_APPEND
P640_TS_INSERT = _epl.P640_TS_INSERT
P640_PTP_DOMAIN_SHIFT = _epl.P640_PTP_DOMAIN_SHIFT
P640_PTP_DOMAIN_MASK = _epl.P640_PTP_DOMAIN_MASK
P640_IPV4_UDP_MOD = _epl.P640_IPV4_UDP_MOD
P640_TS_SEC_EN = _epl.P640_TS_SEC_EN
P640_TS_SEC_LEN_SHIFT = _epl.P640_TS_SEC_LEN_SHIFT
P640_TS_SEC_LEN_MASK = _epl.P640_TS_SEC_LEN_MASK
P640_RXTS_NS_OFF_SHIFT = _epl.P640_RXTS_NS_OFF_SHIFT
P640_RXTS_NS_OFF_MASK = _epl.P640_RXTS_NS_OFF_MASK
P640_RXTS_SEC_OFF_SHIFT = _epl.P640_RXTS_SEC_OFF_SHIFT
P640_RXTS_SEC_OFF_MASK = _epl.P640_RXTS_SEC_OFF_MASK
P640_PTP_TR_DURH_SHIFT = _epl.P640_PTP_TR_DURH_SHIFT
P640_PTP_TR_DURH_MASK = _epl.P640_PTP_TR_DURH_MASK
P640_PTP_CLKOUT_EN = _epl.P640_PTP_CLKOUT_EN
P640_PTP_CLKOUT_SEL = _epl.P640_PTP_CLKOUT_SEL
P640_PTP_CLKOUT_SPSEL = _epl.P640_PTP_CLKOUT_SPSEL
P640_PTP_CLKDIV_SHIFT = _epl.P640_PTP_CLKDIV_SHIFT
P640_PTP_CLKDIV_MASK = _epl.P640_PTP_CLKDIV_MASK
P640_PTP_RESERVED_SHIFT = _epl.P640_PTP_RESERVED_SHIFT
P640_PTP_RESERVED_MASK = _epl.P640_PTP_RESERVED_MASK
P640_VERSION_PTP_SHIFT = _epl.P640_VERSION_PTP_SHIFT
P640_VERSION_PTP_MASK = _epl.P640_VERSION_PTP_MASK
P640_TRANSP_SPEC_SHIFT = _epl.P640_TRANSP_SPEC_SHIFT
P640_TRANSP_SPEC_MASK = _epl.P640_TRANSP_SPEC_MASK
P640_MESSAGE_TYPE_SHIFT = _epl.P640_MESSAGE_TYPE_SHIFT
P640_MESSAGE_TYPE_MASK = _epl.P640_MESSAGE_TYPE_MASK
P640_IP_SA_BYTE1_SHIFT = _epl.P640_IP_SA_BYTE1_SHIFT
P640_IP_SA_BYTE1_MASK = _epl.P640_IP_SA_BYTE1_MASK
P640_IP_SA_BYTE0_SHIFT = _epl.P640_IP_SA_BYTE0_SHIFT
P640_IP_SA_BYTE0_MASK = _epl.P640_IP_SA_BYTE0_MASK
P640_IP_SA_BYTE3_SHIFT = _epl.P640_IP_SA_BYTE3_SHIFT
P640_IP_SA_BYTE3_MASK = _epl.P640_IP_SA_BYTE3_MASK
P640_IP_SA_BYTE2_SHIFT = _epl.P640_IP_SA_BYTE2_SHIFT
P640_IP_SA_BYTE2_MASK = _epl.P640_IP_SA_BYTE2_MASK
P640_TX_SFD_GPIO_SHIFT = _epl.P640_TX_SFD_GPIO_SHIFT
P640_TX_SFD_GPIO_MASK = _epl.P640_TX_SFD_GPIO_MASK
P640_RX_SFD_GPIO_SHIFT = _epl.P640_RX_SFD_GPIO_SHIFT
P640_RX_SFD_GPIO_MASK = _epl.P640_RX_SFD_GPIO_MASK
P640_PTP_INT_GPIO_SHIFT = _epl.P640_PTP_INT_GPIO_SHIFT
P640_PTP_INT_GPIO_MASK = _epl.P640_PTP_INT_GPIO_MASK
P640_CLK_SRC_SHIFT = _epl.P640_CLK_SRC_SHIFT
P640_CLK_SRC_MASK = _epl.P640_CLK_SRC_MASK
P640_CLK_SRC_PER_SHIFT = _epl.P640_CLK_SRC_PER_SHIFT
P640_CLK_SRC_PER_MASK = _epl.P640_CLK_SRC_PER_MASK
P640_PTP_OFFSET_SHIFT = _epl.P640_PTP_OFFSET_SHIFT
P640_PTP_OFFSET_MASK = _epl.P640_PTP_OFFSET_MASK
P640_PTP_GPIO_IN_SHIFT = _epl.P640_PTP_GPIO_IN_SHIFT
P640_PTP_GPIO_IN_MASK = _epl.P640_PTP_GPIO_IN_MASK
P640_RX_HASH_EN = _epl.P640_RX_HASH_EN
P640_PTP_RX_HASH_SHIFT = _epl.P640_PTP_RX_HASH_SHIFT
P640_PTP_RX_HASH_MASK = _epl.P640_PTP_RX_HASH_MASK
OAIInitialize = _epl.OAIInitialize
OAIAlloc = _epl.OAIAlloc
OAIFree = _epl.OAIFree
OAICreateMutex = _epl.OAICreateMutex
OAIReleaseMutex = _epl.OAIReleaseMutex
OAIBeginCriticalSection = _epl.OAIBeginCriticalSection
OAIEndCriticalSection = _epl.OAIEndCriticalSection
OAIBeginRegCriticalSection = _epl.OAIBeginRegCriticalSection
OAIEndRegCriticalSection = _epl.OAIEndRegCriticalSection
OAIBeginMultiCriticalSection = _epl.OAIBeginMultiCriticalSection
OAIEndMultiCriticalSection = _epl.OAIEndMultiCriticalSection
OAIManagementError = _epl.OAIManagementError
EPLInitialize = _epl.EPLInitialize
EPLDeinitialize = _epl.EPLDeinitialize
EPLEnumDevice = _epl.EPLEnumDevice
EPLSetMgmtInterfaceConfig = _epl.EPLSetMgmtInterfaceConfig
EPLGetDeviceInfo = _epl.EPLGetDeviceInfo
EPLIsDeviceCapable = _epl.EPLIsDeviceCapable
EPLResetDevice = _epl.EPLResetDevice
EPLEnumPort = _epl.EPLEnumPort
EPLGetDeviceHandle = _epl.EPLGetDeviceHandle
EPLReadReg = _epl.EPLReadReg
EPLWriteReg = _epl.EPLWriteReg
EPLGetPortMdioAddress = _epl.EPLGetPortMdioAddress
EPLSetPortPowerMode = _epl.EPLSetPortPowerMode
EPLBistStartTxTest = _epl.EPLBistStartTxTest
EPLBistStopTxTest = _epl.EPLBistStopTxTest
EPLBistGetStatus = _epl.EPLBistGetStatus
MDIX_AUTO = _epl.MDIX_AUTO
MDIX_FORCE_NORMAL = _epl.MDIX_FORCE_NORMAL
MDIX_FORCE_SWAP = _epl.MDIX_FORCE_SWAP
class EPL_LINK_STS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPL_LINK_STS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPL_LINK_STS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["linkup"] = _epl.EPL_LINK_STS_linkup_set
    __swig_getmethods__["linkup"] = _epl.EPL_LINK_STS_linkup_get
    if _newclass:linkup = _swig_property(_epl.EPL_LINK_STS_linkup_get, _epl.EPL_LINK_STS_linkup_set)
    __swig_setmethods__["autoNegEnabled"] = _epl.EPL_LINK_STS_autoNegEnabled_set
    __swig_getmethods__["autoNegEnabled"] = _epl.EPL_LINK_STS_autoNegEnabled_get
    if _newclass:autoNegEnabled = _swig_property(_epl.EPL_LINK_STS_autoNegEnabled_get, _epl.EPL_LINK_STS_autoNegEnabled_set)
    __swig_setmethods__["autoNegCompleted"] = _epl.EPL_LINK_STS_autoNegCompleted_set
    __swig_getmethods__["autoNegCompleted"] = _epl.EPL_LINK_STS_autoNegCompleted_get
    if _newclass:autoNegCompleted = _swig_property(_epl.EPL_LINK_STS_autoNegCompleted_get, _epl.EPL_LINK_STS_autoNegCompleted_set)
    __swig_setmethods__["speed"] = _epl.EPL_LINK_STS_speed_set
    __swig_getmethods__["speed"] = _epl.EPL_LINK_STS_speed_get
    if _newclass:speed = _swig_property(_epl.EPL_LINK_STS_speed_get, _epl.EPL_LINK_STS_speed_set)
    __swig_setmethods__["duplex"] = _epl.EPL_LINK_STS_duplex_set
    __swig_getmethods__["duplex"] = _epl.EPL_LINK_STS_duplex_get
    if _newclass:duplex = _swig_property(_epl.EPL_LINK_STS_duplex_get, _epl.EPL_LINK_STS_duplex_set)
    __swig_setmethods__["mdixStatus"] = _epl.EPL_LINK_STS_mdixStatus_set
    __swig_getmethods__["mdixStatus"] = _epl.EPL_LINK_STS_mdixStatus_get
    if _newclass:mdixStatus = _swig_property(_epl.EPL_LINK_STS_mdixStatus_get, _epl.EPL_LINK_STS_mdixStatus_set)
    __swig_setmethods__["autoMdixEnabled"] = _epl.EPL_LINK_STS_autoMdixEnabled_set
    __swig_getmethods__["autoMdixEnabled"] = _epl.EPL_LINK_STS_autoMdixEnabled_get
    if _newclass:autoMdixEnabled = _swig_property(_epl.EPL_LINK_STS_autoMdixEnabled_get, _epl.EPL_LINK_STS_autoMdixEnabled_set)
    __swig_setmethods__["polarity"] = _epl.EPL_LINK_STS_polarity_set
    __swig_getmethods__["polarity"] = _epl.EPL_LINK_STS_polarity_get
    if _newclass:polarity = _swig_property(_epl.EPL_LINK_STS_polarity_get, _epl.EPL_LINK_STS_polarity_set)
    __swig_setmethods__["energyDetectPower"] = _epl.EPL_LINK_STS_energyDetectPower_set
    __swig_getmethods__["energyDetectPower"] = _epl.EPL_LINK_STS_energyDetectPower_get
    if _newclass:energyDetectPower = _swig_property(_epl.EPL_LINK_STS_energyDetectPower_get, _epl.EPL_LINK_STS_energyDetectPower_set)
    def __init__(self, *args): 
        this = _epl.new_EPL_LINK_STS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_EPL_LINK_STS
    __del__ = lambda self : None;
EPL_LINK_STS_swigregister = _epl.EPL_LINK_STS_swigregister
EPL_LINK_STS_swigregister(EPL_LINK_STS)

class EPL_LINK_CFG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPL_LINK_CFG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPL_LINK_CFG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autoNegEnable"] = _epl.EPL_LINK_CFG_autoNegEnable_set
    __swig_getmethods__["autoNegEnable"] = _epl.EPL_LINK_CFG_autoNegEnable_get
    if _newclass:autoNegEnable = _swig_property(_epl.EPL_LINK_CFG_autoNegEnable_get, _epl.EPL_LINK_CFG_autoNegEnable_set)
    __swig_setmethods__["speed"] = _epl.EPL_LINK_CFG_speed_set
    __swig_getmethods__["speed"] = _epl.EPL_LINK_CFG_speed_get
    if _newclass:speed = _swig_property(_epl.EPL_LINK_CFG_speed_get, _epl.EPL_LINK_CFG_speed_set)
    __swig_setmethods__["duplex"] = _epl.EPL_LINK_CFG_duplex_set
    __swig_getmethods__["duplex"] = _epl.EPL_LINK_CFG_duplex_get
    if _newclass:duplex = _swig_property(_epl.EPL_LINK_CFG_duplex_get, _epl.EPL_LINK_CFG_duplex_set)
    __swig_setmethods__["pause"] = _epl.EPL_LINK_CFG_pause_set
    __swig_getmethods__["pause"] = _epl.EPL_LINK_CFG_pause_get
    if _newclass:pause = _swig_property(_epl.EPL_LINK_CFG_pause_get, _epl.EPL_LINK_CFG_pause_set)
    __swig_setmethods__["autoMdix"] = _epl.EPL_LINK_CFG_autoMdix_set
    __swig_getmethods__["autoMdix"] = _epl.EPL_LINK_CFG_autoMdix_get
    if _newclass:autoMdix = _swig_property(_epl.EPL_LINK_CFG_autoMdix_get, _epl.EPL_LINK_CFG_autoMdix_set)
    __swig_setmethods__["energyDetect"] = _epl.EPL_LINK_CFG_energyDetect_set
    __swig_getmethods__["energyDetect"] = _epl.EPL_LINK_CFG_energyDetect_get
    if _newclass:energyDetect = _swig_property(_epl.EPL_LINK_CFG_energyDetect_get, _epl.EPL_LINK_CFG_energyDetect_set)
    __swig_setmethods__["energyDetectErrCountThresh"] = _epl.EPL_LINK_CFG_energyDetectErrCountThresh_set
    __swig_getmethods__["energyDetectErrCountThresh"] = _epl.EPL_LINK_CFG_energyDetectErrCountThresh_get
    if _newclass:energyDetectErrCountThresh = _swig_property(_epl.EPL_LINK_CFG_energyDetectErrCountThresh_get, _epl.EPL_LINK_CFG_energyDetectErrCountThresh_set)
    __swig_setmethods__["energyDetectDataCountThresh"] = _epl.EPL_LINK_CFG_energyDetectDataCountThresh_set
    __swig_getmethods__["energyDetectDataCountThresh"] = _epl.EPL_LINK_CFG_energyDetectDataCountThresh_get
    if _newclass:energyDetectDataCountThresh = _swig_property(_epl.EPL_LINK_CFG_energyDetectDataCountThresh_get, _epl.EPL_LINK_CFG_energyDetectDataCountThresh_set)
    def __init__(self, *args): 
        this = _epl.new_EPL_LINK_CFG(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_EPL_LINK_CFG
    __del__ = lambda self : None;
EPL_LINK_CFG_swigregister = _epl.EPL_LINK_CFG_swigregister
EPL_LINK_CFG_swigregister(EPL_LINK_CFG)

EPLIsLinkUp = _epl.EPLIsLinkUp
EPLSetLinkConfig = _epl.EPLSetLinkConfig
EPLGetLinkStatus = _epl.EPLGetLinkStatus
EPLSetLoopbackMode = _epl.EPLSetLoopbackMode
EPLRestartAutoNeg = _epl.EPLRestartAutoNeg
MIIPCFG_UNKNOWN = _epl.MIIPCFG_UNKNOWN
MIIPCFG_NORMAL = _epl.MIIPCFG_NORMAL
MIIPCFG_PORT_SWAP = _epl.MIIPCFG_PORT_SWAP
MIIPCFG_EXT_MEDIA_CONVERTER = _epl.MIIPCFG_EXT_MEDIA_CONVERTER
MIIPCFG_BROADCAST_TX_PORT_A = _epl.MIIPCFG_BROADCAST_TX_PORT_A
MIIPCFG_BROADCAST_TX_PORT_B = _epl.MIIPCFG_BROADCAST_TX_PORT_B
MIIPCFG_MIRROR_RX_CHANNEL_A = _epl.MIIPCFG_MIRROR_RX_CHANNEL_A
MIIPCFG_MIRROR_RX_CHANNEL_B = _epl.MIIPCFG_MIRROR_RX_CHANNEL_B
MIIPCFG_DISABLE_PORT_A = _epl.MIIPCFG_DISABLE_PORT_A
MIIPCFG_DISABLE_PORT_B = _epl.MIIPCFG_DISABLE_PORT_B
EPLGetMiiConfig = _epl.EPLGetMiiConfig
EPLSetMiiConfig = _epl.EPLSetMiiConfig
class DSP_LINK_QUALITY_GET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSP_LINK_QUALITY_GET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSP_LINK_QUALITY_GET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["linkQualityEnabled"] = _epl.DSP_LINK_QUALITY_GET_linkQualityEnabled_set
    __swig_getmethods__["linkQualityEnabled"] = _epl.DSP_LINK_QUALITY_GET_linkQualityEnabled_get
    if _newclass:linkQualityEnabled = _swig_property(_epl.DSP_LINK_QUALITY_GET_linkQualityEnabled_get, _epl.DSP_LINK_QUALITY_GET_linkQualityEnabled_set)
    __swig_setmethods__["freqCtrlHighWarn"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlHighWarn_set
    __swig_getmethods__["freqCtrlHighWarn"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlHighWarn_get
    if _newclass:freqCtrlHighWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqCtrlHighWarn_get, _epl.DSP_LINK_QUALITY_GET_freqCtrlHighWarn_set)
    __swig_setmethods__["freqCtrlLowWarn"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlLowWarn_set
    __swig_getmethods__["freqCtrlLowWarn"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlLowWarn_get
    if _newclass:freqCtrlLowWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqCtrlLowWarn_get, _epl.DSP_LINK_QUALITY_GET_freqCtrlLowWarn_set)
    __swig_setmethods__["freqOffHighWarn"] = _epl.DSP_LINK_QUALITY_GET_freqOffHighWarn_set
    __swig_getmethods__["freqOffHighWarn"] = _epl.DSP_LINK_QUALITY_GET_freqOffHighWarn_get
    if _newclass:freqOffHighWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqOffHighWarn_get, _epl.DSP_LINK_QUALITY_GET_freqOffHighWarn_set)
    __swig_setmethods__["freqOffLowWarn"] = _epl.DSP_LINK_QUALITY_GET_freqOffLowWarn_set
    __swig_getmethods__["freqOffLowWarn"] = _epl.DSP_LINK_QUALITY_GET_freqOffLowWarn_get
    if _newclass:freqOffLowWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqOffLowWarn_get, _epl.DSP_LINK_QUALITY_GET_freqOffLowWarn_set)
    __swig_setmethods__["dblwHighWarn"] = _epl.DSP_LINK_QUALITY_GET_dblwHighWarn_set
    __swig_getmethods__["dblwHighWarn"] = _epl.DSP_LINK_QUALITY_GET_dblwHighWarn_get
    if _newclass:dblwHighWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_dblwHighWarn_get, _epl.DSP_LINK_QUALITY_GET_dblwHighWarn_set)
    __swig_setmethods__["dblwLowWarn"] = _epl.DSP_LINK_QUALITY_GET_dblwLowWarn_set
    __swig_getmethods__["dblwLowWarn"] = _epl.DSP_LINK_QUALITY_GET_dblwLowWarn_get
    if _newclass:dblwLowWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_dblwLowWarn_get, _epl.DSP_LINK_QUALITY_GET_dblwLowWarn_set)
    __swig_setmethods__["dagcHighWarn"] = _epl.DSP_LINK_QUALITY_GET_dagcHighWarn_set
    __swig_getmethods__["dagcHighWarn"] = _epl.DSP_LINK_QUALITY_GET_dagcHighWarn_get
    if _newclass:dagcHighWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_dagcHighWarn_get, _epl.DSP_LINK_QUALITY_GET_dagcHighWarn_set)
    __swig_setmethods__["dagcLowWarn"] = _epl.DSP_LINK_QUALITY_GET_dagcLowWarn_set
    __swig_getmethods__["dagcLowWarn"] = _epl.DSP_LINK_QUALITY_GET_dagcLowWarn_get
    if _newclass:dagcLowWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_dagcLowWarn_get, _epl.DSP_LINK_QUALITY_GET_dagcLowWarn_set)
    __swig_setmethods__["c1HighWarn"] = _epl.DSP_LINK_QUALITY_GET_c1HighWarn_set
    __swig_getmethods__["c1HighWarn"] = _epl.DSP_LINK_QUALITY_GET_c1HighWarn_get
    if _newclass:c1HighWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_c1HighWarn_get, _epl.DSP_LINK_QUALITY_GET_c1HighWarn_set)
    __swig_setmethods__["c1LowWarn"] = _epl.DSP_LINK_QUALITY_GET_c1LowWarn_set
    __swig_getmethods__["c1LowWarn"] = _epl.DSP_LINK_QUALITY_GET_c1LowWarn_get
    if _newclass:c1LowWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_c1LowWarn_get, _epl.DSP_LINK_QUALITY_GET_c1LowWarn_set)
    __swig_setmethods__["freqCtrlHighThresh"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlHighThresh_set
    __swig_getmethods__["freqCtrlHighThresh"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlHighThresh_get
    if _newclass:freqCtrlHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqCtrlHighThresh_get, _epl.DSP_LINK_QUALITY_GET_freqCtrlHighThresh_set)
    __swig_setmethods__["freqCtrlLowThresh"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlLowThresh_set
    __swig_getmethods__["freqCtrlLowThresh"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlLowThresh_get
    if _newclass:freqCtrlLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqCtrlLowThresh_get, _epl.DSP_LINK_QUALITY_GET_freqCtrlLowThresh_set)
    __swig_setmethods__["freqOffHighThresh"] = _epl.DSP_LINK_QUALITY_GET_freqOffHighThresh_set
    __swig_getmethods__["freqOffHighThresh"] = _epl.DSP_LINK_QUALITY_GET_freqOffHighThresh_get
    if _newclass:freqOffHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqOffHighThresh_get, _epl.DSP_LINK_QUALITY_GET_freqOffHighThresh_set)
    __swig_setmethods__["freqOffLowThresh"] = _epl.DSP_LINK_QUALITY_GET_freqOffLowThresh_set
    __swig_getmethods__["freqOffLowThresh"] = _epl.DSP_LINK_QUALITY_GET_freqOffLowThresh_get
    if _newclass:freqOffLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqOffLowThresh_get, _epl.DSP_LINK_QUALITY_GET_freqOffLowThresh_set)
    __swig_setmethods__["dblwHighThresh"] = _epl.DSP_LINK_QUALITY_GET_dblwHighThresh_set
    __swig_getmethods__["dblwHighThresh"] = _epl.DSP_LINK_QUALITY_GET_dblwHighThresh_get
    if _newclass:dblwHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_dblwHighThresh_get, _epl.DSP_LINK_QUALITY_GET_dblwHighThresh_set)
    __swig_setmethods__["dblwLowThresh"] = _epl.DSP_LINK_QUALITY_GET_dblwLowThresh_set
    __swig_getmethods__["dblwLowThresh"] = _epl.DSP_LINK_QUALITY_GET_dblwLowThresh_get
    if _newclass:dblwLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_dblwLowThresh_get, _epl.DSP_LINK_QUALITY_GET_dblwLowThresh_set)
    __swig_setmethods__["dagcHighThresh"] = _epl.DSP_LINK_QUALITY_GET_dagcHighThresh_set
    __swig_getmethods__["dagcHighThresh"] = _epl.DSP_LINK_QUALITY_GET_dagcHighThresh_get
    if _newclass:dagcHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_dagcHighThresh_get, _epl.DSP_LINK_QUALITY_GET_dagcHighThresh_set)
    __swig_setmethods__["dagcLowThresh"] = _epl.DSP_LINK_QUALITY_GET_dagcLowThresh_set
    __swig_getmethods__["dagcLowThresh"] = _epl.DSP_LINK_QUALITY_GET_dagcLowThresh_get
    if _newclass:dagcLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_dagcLowThresh_get, _epl.DSP_LINK_QUALITY_GET_dagcLowThresh_set)
    __swig_setmethods__["c1HighThresh"] = _epl.DSP_LINK_QUALITY_GET_c1HighThresh_set
    __swig_getmethods__["c1HighThresh"] = _epl.DSP_LINK_QUALITY_GET_c1HighThresh_get
    if _newclass:c1HighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_c1HighThresh_get, _epl.DSP_LINK_QUALITY_GET_c1HighThresh_set)
    __swig_setmethods__["c1LowThresh"] = _epl.DSP_LINK_QUALITY_GET_c1LowThresh_set
    __swig_getmethods__["c1LowThresh"] = _epl.DSP_LINK_QUALITY_GET_c1LowThresh_get
    if _newclass:c1LowThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_c1LowThresh_get, _epl.DSP_LINK_QUALITY_GET_c1LowThresh_set)
    __swig_setmethods__["freqCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlSample_set
    __swig_getmethods__["freqCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_freqCtrlSample_get
    if _newclass:freqCtrlSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqCtrlSample_get, _epl.DSP_LINK_QUALITY_GET_freqCtrlSample_set)
    __swig_setmethods__["freqOffSample"] = _epl.DSP_LINK_QUALITY_GET_freqOffSample_set
    __swig_getmethods__["freqOffSample"] = _epl.DSP_LINK_QUALITY_GET_freqOffSample_get
    if _newclass:freqOffSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_freqOffSample_get, _epl.DSP_LINK_QUALITY_GET_freqOffSample_set)
    __swig_setmethods__["dblwCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_dblwCtrlSample_set
    __swig_getmethods__["dblwCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_dblwCtrlSample_get
    if _newclass:dblwCtrlSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_dblwCtrlSample_get, _epl.DSP_LINK_QUALITY_GET_dblwCtrlSample_set)
    __swig_setmethods__["dagcCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_dagcCtrlSample_set
    __swig_getmethods__["dagcCtrlSample"] = _epl.DSP_LINK_QUALITY_GET_dagcCtrlSample_get
    if _newclass:dagcCtrlSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_dagcCtrlSample_get, _epl.DSP_LINK_QUALITY_GET_dagcCtrlSample_set)
    __swig_setmethods__["c1CtrlSample"] = _epl.DSP_LINK_QUALITY_GET_c1CtrlSample_set
    __swig_getmethods__["c1CtrlSample"] = _epl.DSP_LINK_QUALITY_GET_c1CtrlSample_get
    if _newclass:c1CtrlSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_c1CtrlSample_get, _epl.DSP_LINK_QUALITY_GET_c1CtrlSample_set)
    __swig_setmethods__["restartOnC1"] = _epl.DSP_LINK_QUALITY_GET_restartOnC1_set
    __swig_getmethods__["restartOnC1"] = _epl.DSP_LINK_QUALITY_GET_restartOnC1_get
    if _newclass:restartOnC1 = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnC1_get, _epl.DSP_LINK_QUALITY_GET_restartOnC1_set)
    __swig_setmethods__["restartOnDAGC"] = _epl.DSP_LINK_QUALITY_GET_restartOnDAGC_set
    __swig_getmethods__["restartOnDAGC"] = _epl.DSP_LINK_QUALITY_GET_restartOnDAGC_get
    if _newclass:restartOnDAGC = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnDAGC_get, _epl.DSP_LINK_QUALITY_GET_restartOnDAGC_set)
    __swig_setmethods__["restartOnDBLW"] = _epl.DSP_LINK_QUALITY_GET_restartOnDBLW_set
    __swig_getmethods__["restartOnDBLW"] = _epl.DSP_LINK_QUALITY_GET_restartOnDBLW_get
    if _newclass:restartOnDBLW = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnDBLW_get, _epl.DSP_LINK_QUALITY_GET_restartOnDBLW_set)
    __swig_setmethods__["restartOnFreq"] = _epl.DSP_LINK_QUALITY_GET_restartOnFreq_set
    __swig_getmethods__["restartOnFreq"] = _epl.DSP_LINK_QUALITY_GET_restartOnFreq_get
    if _newclass:restartOnFreq = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnFreq_get, _epl.DSP_LINK_QUALITY_GET_restartOnFreq_set)
    __swig_setmethods__["restartOnFC"] = _epl.DSP_LINK_QUALITY_GET_restartOnFC_set
    __swig_getmethods__["restartOnFC"] = _epl.DSP_LINK_QUALITY_GET_restartOnFC_get
    if _newclass:restartOnFC = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnFC_get, _epl.DSP_LINK_QUALITY_GET_restartOnFC_set)
    __swig_setmethods__["restartOnVar"] = _epl.DSP_LINK_QUALITY_GET_restartOnVar_set
    __swig_getmethods__["restartOnVar"] = _epl.DSP_LINK_QUALITY_GET_restartOnVar_get
    if _newclass:restartOnVar = _swig_property(_epl.DSP_LINK_QUALITY_GET_restartOnVar_get, _epl.DSP_LINK_QUALITY_GET_restartOnVar_set)
    __swig_setmethods__["dropLinkStatus"] = _epl.DSP_LINK_QUALITY_GET_dropLinkStatus_set
    __swig_getmethods__["dropLinkStatus"] = _epl.DSP_LINK_QUALITY_GET_dropLinkStatus_get
    if _newclass:dropLinkStatus = _swig_property(_epl.DSP_LINK_QUALITY_GET_dropLinkStatus_get, _epl.DSP_LINK_QUALITY_GET_dropLinkStatus_set)
    __swig_setmethods__["varianceEnable"] = _epl.DSP_LINK_QUALITY_GET_varianceEnable_set
    __swig_getmethods__["varianceEnable"] = _epl.DSP_LINK_QUALITY_GET_varianceEnable_get
    if _newclass:varianceEnable = _swig_property(_epl.DSP_LINK_QUALITY_GET_varianceEnable_get, _epl.DSP_LINK_QUALITY_GET_varianceEnable_set)
    __swig_setmethods__["varianceSampleTime"] = _epl.DSP_LINK_QUALITY_GET_varianceSampleTime_set
    __swig_getmethods__["varianceSampleTime"] = _epl.DSP_LINK_QUALITY_GET_varianceSampleTime_get
    if _newclass:varianceSampleTime = _swig_property(_epl.DSP_LINK_QUALITY_GET_varianceSampleTime_get, _epl.DSP_LINK_QUALITY_GET_varianceSampleTime_set)
    __swig_setmethods__["varianceWarn"] = _epl.DSP_LINK_QUALITY_GET_varianceWarn_set
    __swig_getmethods__["varianceWarn"] = _epl.DSP_LINK_QUALITY_GET_varianceWarn_get
    if _newclass:varianceWarn = _swig_property(_epl.DSP_LINK_QUALITY_GET_varianceWarn_get, _epl.DSP_LINK_QUALITY_GET_varianceWarn_set)
    __swig_setmethods__["varianceHighThresh"] = _epl.DSP_LINK_QUALITY_GET_varianceHighThresh_set
    __swig_getmethods__["varianceHighThresh"] = _epl.DSP_LINK_QUALITY_GET_varianceHighThresh_get
    if _newclass:varianceHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_GET_varianceHighThresh_get, _epl.DSP_LINK_QUALITY_GET_varianceHighThresh_set)
    __swig_setmethods__["varianceSample"] = _epl.DSP_LINK_QUALITY_GET_varianceSample_set
    __swig_getmethods__["varianceSample"] = _epl.DSP_LINK_QUALITY_GET_varianceSample_get
    if _newclass:varianceSample = _swig_property(_epl.DSP_LINK_QUALITY_GET_varianceSample_get, _epl.DSP_LINK_QUALITY_GET_varianceSample_set)
    def __init__(self, *args): 
        this = _epl.new_DSP_LINK_QUALITY_GET(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_DSP_LINK_QUALITY_GET
    __del__ = lambda self : None;
DSP_LINK_QUALITY_GET_swigregister = _epl.DSP_LINK_QUALITY_GET_swigregister
DSP_LINK_QUALITY_GET_swigregister(DSP_LINK_QUALITY_GET)

class DSP_LINK_QUALITY_SET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSP_LINK_QUALITY_SET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSP_LINK_QUALITY_SET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["linkQualityEnabled"] = _epl.DSP_LINK_QUALITY_SET_linkQualityEnabled_set
    __swig_getmethods__["linkQualityEnabled"] = _epl.DSP_LINK_QUALITY_SET_linkQualityEnabled_get
    if _newclass:linkQualityEnabled = _swig_property(_epl.DSP_LINK_QUALITY_SET_linkQualityEnabled_get, _epl.DSP_LINK_QUALITY_SET_linkQualityEnabled_set)
    __swig_setmethods__["c1LowThresh"] = _epl.DSP_LINK_QUALITY_SET_c1LowThresh_set
    __swig_getmethods__["c1LowThresh"] = _epl.DSP_LINK_QUALITY_SET_c1LowThresh_get
    if _newclass:c1LowThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_c1LowThresh_get, _epl.DSP_LINK_QUALITY_SET_c1LowThresh_set)
    __swig_setmethods__["c1HighThresh"] = _epl.DSP_LINK_QUALITY_SET_c1HighThresh_set
    __swig_getmethods__["c1HighThresh"] = _epl.DSP_LINK_QUALITY_SET_c1HighThresh_get
    if _newclass:c1HighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_c1HighThresh_get, _epl.DSP_LINK_QUALITY_SET_c1HighThresh_set)
    __swig_setmethods__["dagcLowThresh"] = _epl.DSP_LINK_QUALITY_SET_dagcLowThresh_set
    __swig_getmethods__["dagcLowThresh"] = _epl.DSP_LINK_QUALITY_SET_dagcLowThresh_get
    if _newclass:dagcLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_dagcLowThresh_get, _epl.DSP_LINK_QUALITY_SET_dagcLowThresh_set)
    __swig_setmethods__["dagcHighThresh"] = _epl.DSP_LINK_QUALITY_SET_dagcHighThresh_set
    __swig_getmethods__["dagcHighThresh"] = _epl.DSP_LINK_QUALITY_SET_dagcHighThresh_get
    if _newclass:dagcHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_dagcHighThresh_get, _epl.DSP_LINK_QUALITY_SET_dagcHighThresh_set)
    __swig_setmethods__["dblwLowThresh"] = _epl.DSP_LINK_QUALITY_SET_dblwLowThresh_set
    __swig_getmethods__["dblwLowThresh"] = _epl.DSP_LINK_QUALITY_SET_dblwLowThresh_get
    if _newclass:dblwLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_dblwLowThresh_get, _epl.DSP_LINK_QUALITY_SET_dblwLowThresh_set)
    __swig_setmethods__["dblwHighThresh"] = _epl.DSP_LINK_QUALITY_SET_dblwHighThresh_set
    __swig_getmethods__["dblwHighThresh"] = _epl.DSP_LINK_QUALITY_SET_dblwHighThresh_get
    if _newclass:dblwHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_dblwHighThresh_get, _epl.DSP_LINK_QUALITY_SET_dblwHighThresh_set)
    __swig_setmethods__["freqOffLowThresh"] = _epl.DSP_LINK_QUALITY_SET_freqOffLowThresh_set
    __swig_getmethods__["freqOffLowThresh"] = _epl.DSP_LINK_QUALITY_SET_freqOffLowThresh_get
    if _newclass:freqOffLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_freqOffLowThresh_get, _epl.DSP_LINK_QUALITY_SET_freqOffLowThresh_set)
    __swig_setmethods__["freqOffHighThresh"] = _epl.DSP_LINK_QUALITY_SET_freqOffHighThresh_set
    __swig_getmethods__["freqOffHighThresh"] = _epl.DSP_LINK_QUALITY_SET_freqOffHighThresh_get
    if _newclass:freqOffHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_freqOffHighThresh_get, _epl.DSP_LINK_QUALITY_SET_freqOffHighThresh_set)
    __swig_setmethods__["freqCtrlLowThresh"] = _epl.DSP_LINK_QUALITY_SET_freqCtrlLowThresh_set
    __swig_getmethods__["freqCtrlLowThresh"] = _epl.DSP_LINK_QUALITY_SET_freqCtrlLowThresh_get
    if _newclass:freqCtrlLowThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_freqCtrlLowThresh_get, _epl.DSP_LINK_QUALITY_SET_freqCtrlLowThresh_set)
    __swig_setmethods__["freqCtrlHighThresh"] = _epl.DSP_LINK_QUALITY_SET_freqCtrlHighThresh_set
    __swig_getmethods__["freqCtrlHighThresh"] = _epl.DSP_LINK_QUALITY_SET_freqCtrlHighThresh_get
    if _newclass:freqCtrlHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_freqCtrlHighThresh_get, _epl.DSP_LINK_QUALITY_SET_freqCtrlHighThresh_set)
    __swig_setmethods__["restartOnC1"] = _epl.DSP_LINK_QUALITY_SET_restartOnC1_set
    __swig_getmethods__["restartOnC1"] = _epl.DSP_LINK_QUALITY_SET_restartOnC1_get
    if _newclass:restartOnC1 = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnC1_get, _epl.DSP_LINK_QUALITY_SET_restartOnC1_set)
    __swig_setmethods__["restartOnDAGC"] = _epl.DSP_LINK_QUALITY_SET_restartOnDAGC_set
    __swig_getmethods__["restartOnDAGC"] = _epl.DSP_LINK_QUALITY_SET_restartOnDAGC_get
    if _newclass:restartOnDAGC = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnDAGC_get, _epl.DSP_LINK_QUALITY_SET_restartOnDAGC_set)
    __swig_setmethods__["restartOnDBLW"] = _epl.DSP_LINK_QUALITY_SET_restartOnDBLW_set
    __swig_getmethods__["restartOnDBLW"] = _epl.DSP_LINK_QUALITY_SET_restartOnDBLW_get
    if _newclass:restartOnDBLW = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnDBLW_get, _epl.DSP_LINK_QUALITY_SET_restartOnDBLW_set)
    __swig_setmethods__["restartOnFreq"] = _epl.DSP_LINK_QUALITY_SET_restartOnFreq_set
    __swig_getmethods__["restartOnFreq"] = _epl.DSP_LINK_QUALITY_SET_restartOnFreq_get
    if _newclass:restartOnFreq = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnFreq_get, _epl.DSP_LINK_QUALITY_SET_restartOnFreq_set)
    __swig_setmethods__["restartOnFC"] = _epl.DSP_LINK_QUALITY_SET_restartOnFC_set
    __swig_getmethods__["restartOnFC"] = _epl.DSP_LINK_QUALITY_SET_restartOnFC_get
    if _newclass:restartOnFC = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnFC_get, _epl.DSP_LINK_QUALITY_SET_restartOnFC_set)
    __swig_setmethods__["restartOnVar"] = _epl.DSP_LINK_QUALITY_SET_restartOnVar_set
    __swig_getmethods__["restartOnVar"] = _epl.DSP_LINK_QUALITY_SET_restartOnVar_get
    if _newclass:restartOnVar = _swig_property(_epl.DSP_LINK_QUALITY_SET_restartOnVar_get, _epl.DSP_LINK_QUALITY_SET_restartOnVar_set)
    __swig_setmethods__["dropLinkStatus"] = _epl.DSP_LINK_QUALITY_SET_dropLinkStatus_set
    __swig_getmethods__["dropLinkStatus"] = _epl.DSP_LINK_QUALITY_SET_dropLinkStatus_get
    if _newclass:dropLinkStatus = _swig_property(_epl.DSP_LINK_QUALITY_SET_dropLinkStatus_get, _epl.DSP_LINK_QUALITY_SET_dropLinkStatus_set)
    __swig_setmethods__["varianceEnable"] = _epl.DSP_LINK_QUALITY_SET_varianceEnable_set
    __swig_getmethods__["varianceEnable"] = _epl.DSP_LINK_QUALITY_SET_varianceEnable_get
    if _newclass:varianceEnable = _swig_property(_epl.DSP_LINK_QUALITY_SET_varianceEnable_get, _epl.DSP_LINK_QUALITY_SET_varianceEnable_set)
    __swig_setmethods__["varianceSampleTime"] = _epl.DSP_LINK_QUALITY_SET_varianceSampleTime_set
    __swig_getmethods__["varianceSampleTime"] = _epl.DSP_LINK_QUALITY_SET_varianceSampleTime_get
    if _newclass:varianceSampleTime = _swig_property(_epl.DSP_LINK_QUALITY_SET_varianceSampleTime_get, _epl.DSP_LINK_QUALITY_SET_varianceSampleTime_set)
    __swig_setmethods__["varianceHighThresh"] = _epl.DSP_LINK_QUALITY_SET_varianceHighThresh_set
    __swig_getmethods__["varianceHighThresh"] = _epl.DSP_LINK_QUALITY_SET_varianceHighThresh_get
    if _newclass:varianceHighThresh = _swig_property(_epl.DSP_LINK_QUALITY_SET_varianceHighThresh_get, _epl.DSP_LINK_QUALITY_SET_varianceHighThresh_set)
    def __init__(self, *args): 
        this = _epl.new_DSP_LINK_QUALITY_SET(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_DSP_LINK_QUALITY_SET
    __del__ = lambda self : None;
DSP_LINK_QUALITY_SET_swigregister = _epl.DSP_LINK_QUALITY_SET_swigregister
DSP_LINK_QUALITY_SET_swigregister(DSP_LINK_QUALITY_SET)

EPLGetCableStatus = _epl.EPLGetCableStatus
EPLDspGetLinkQualityInfo = _epl.EPLDspGetLinkQualityInfo
EPLDspSetLinkQualityConfig = _epl.EPLDspSetLinkQualityConfig
TDR_CABLE_VELOCITY = _epl.TDR_CABLE_VELOCITY
CABLE_STS_TERMINATED = _epl.CABLE_STS_TERMINATED
CABLE_STS_OPEN = _epl.CABLE_STS_OPEN
CABLE_STS_SHORT = _epl.CABLE_STS_SHORT
CABLE_STS_CROSS_SHORTED = _epl.CABLE_STS_CROSS_SHORTED
CABLE_STS_UNKNOWN = _epl.CABLE_STS_UNKNOWN
class TDR_RUN_REQUEST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDR_RUN_REQUEST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDR_RUN_REQUEST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sendPairTx"] = _epl.TDR_RUN_REQUEST_sendPairTx_set
    __swig_getmethods__["sendPairTx"] = _epl.TDR_RUN_REQUEST_sendPairTx_get
    if _newclass:sendPairTx = _swig_property(_epl.TDR_RUN_REQUEST_sendPairTx_get, _epl.TDR_RUN_REQUEST_sendPairTx_set)
    __swig_setmethods__["reflectPairTx"] = _epl.TDR_RUN_REQUEST_reflectPairTx_set
    __swig_getmethods__["reflectPairTx"] = _epl.TDR_RUN_REQUEST_reflectPairTx_get
    if _newclass:reflectPairTx = _swig_property(_epl.TDR_RUN_REQUEST_reflectPairTx_get, _epl.TDR_RUN_REQUEST_reflectPairTx_set)
    __swig_setmethods__["use100MbTx"] = _epl.TDR_RUN_REQUEST_use100MbTx_set
    __swig_getmethods__["use100MbTx"] = _epl.TDR_RUN_REQUEST_use100MbTx_get
    if _newclass:use100MbTx = _swig_property(_epl.TDR_RUN_REQUEST_use100MbTx_get, _epl.TDR_RUN_REQUEST_use100MbTx_set)
    __swig_setmethods__["txPulseTime"] = _epl.TDR_RUN_REQUEST_txPulseTime_set
    __swig_getmethods__["txPulseTime"] = _epl.TDR_RUN_REQUEST_txPulseTime_get
    if _newclass:txPulseTime = _swig_property(_epl.TDR_RUN_REQUEST_txPulseTime_get, _epl.TDR_RUN_REQUEST_txPulseTime_set)
    __swig_setmethods__["detectPosThreshold"] = _epl.TDR_RUN_REQUEST_detectPosThreshold_set
    __swig_getmethods__["detectPosThreshold"] = _epl.TDR_RUN_REQUEST_detectPosThreshold_get
    if _newclass:detectPosThreshold = _swig_property(_epl.TDR_RUN_REQUEST_detectPosThreshold_get, _epl.TDR_RUN_REQUEST_detectPosThreshold_set)
    __swig_setmethods__["rxDiscrimStartTime"] = _epl.TDR_RUN_REQUEST_rxDiscrimStartTime_set
    __swig_getmethods__["rxDiscrimStartTime"] = _epl.TDR_RUN_REQUEST_rxDiscrimStartTime_get
    if _newclass:rxDiscrimStartTime = _swig_property(_epl.TDR_RUN_REQUEST_rxDiscrimStartTime_get, _epl.TDR_RUN_REQUEST_rxDiscrimStartTime_set)
    __swig_setmethods__["rxDiscrimStopTime"] = _epl.TDR_RUN_REQUEST_rxDiscrimStopTime_set
    __swig_getmethods__["rxDiscrimStopTime"] = _epl.TDR_RUN_REQUEST_rxDiscrimStopTime_get
    if _newclass:rxDiscrimStopTime = _swig_property(_epl.TDR_RUN_REQUEST_rxDiscrimStopTime_get, _epl.TDR_RUN_REQUEST_rxDiscrimStopTime_set)
    __swig_setmethods__["rxThreshold"] = _epl.TDR_RUN_REQUEST_rxThreshold_set
    __swig_getmethods__["rxThreshold"] = _epl.TDR_RUN_REQUEST_rxThreshold_get
    if _newclass:rxThreshold = _swig_property(_epl.TDR_RUN_REQUEST_rxThreshold_get, _epl.TDR_RUN_REQUEST_rxThreshold_set)
    def __init__(self, *args): 
        this = _epl.new_TDR_RUN_REQUEST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_TDR_RUN_REQUEST
    __del__ = lambda self : None;
TDR_RUN_REQUEST_swigregister = _epl.TDR_RUN_REQUEST_swigregister
TDR_RUN_REQUEST_swigregister(TDR_RUN_REQUEST)

class TDR_RUN_RESULTS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDR_RUN_RESULTS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDR_RUN_RESULTS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thresholdMet"] = _epl.TDR_RUN_RESULTS_thresholdMet_set
    __swig_getmethods__["thresholdMet"] = _epl.TDR_RUN_RESULTS_thresholdMet_get
    if _newclass:thresholdMet = _swig_property(_epl.TDR_RUN_RESULTS_thresholdMet_get, _epl.TDR_RUN_RESULTS_thresholdMet_set)
    __swig_setmethods__["thresholdTime"] = _epl.TDR_RUN_RESULTS_thresholdTime_set
    __swig_getmethods__["thresholdTime"] = _epl.TDR_RUN_RESULTS_thresholdTime_get
    if _newclass:thresholdTime = _swig_property(_epl.TDR_RUN_RESULTS_thresholdTime_get, _epl.TDR_RUN_RESULTS_thresholdTime_set)
    __swig_setmethods__["thresholdLengthRaw"] = _epl.TDR_RUN_RESULTS_thresholdLengthRaw_set
    __swig_getmethods__["thresholdLengthRaw"] = _epl.TDR_RUN_RESULTS_thresholdLengthRaw_get
    if _newclass:thresholdLengthRaw = _swig_property(_epl.TDR_RUN_RESULTS_thresholdLengthRaw_get, _epl.TDR_RUN_RESULTS_thresholdLengthRaw_set)
    __swig_setmethods__["peakValue"] = _epl.TDR_RUN_RESULTS_peakValue_set
    __swig_getmethods__["peakValue"] = _epl.TDR_RUN_RESULTS_peakValue_get
    if _newclass:peakValue = _swig_property(_epl.TDR_RUN_RESULTS_peakValue_get, _epl.TDR_RUN_RESULTS_peakValue_set)
    __swig_setmethods__["peakTime"] = _epl.TDR_RUN_RESULTS_peakTime_set
    __swig_getmethods__["peakTime"] = _epl.TDR_RUN_RESULTS_peakTime_get
    if _newclass:peakTime = _swig_property(_epl.TDR_RUN_RESULTS_peakTime_get, _epl.TDR_RUN_RESULTS_peakTime_set)
    __swig_setmethods__["peakLengthRaw"] = _epl.TDR_RUN_RESULTS_peakLengthRaw_set
    __swig_getmethods__["peakLengthRaw"] = _epl.TDR_RUN_RESULTS_peakLengthRaw_get
    if _newclass:peakLengthRaw = _swig_property(_epl.TDR_RUN_RESULTS_peakLengthRaw_get, _epl.TDR_RUN_RESULTS_peakLengthRaw_set)
    __swig_setmethods__["adjustedPeakLengthRaw"] = _epl.TDR_RUN_RESULTS_adjustedPeakLengthRaw_set
    __swig_getmethods__["adjustedPeakLengthRaw"] = _epl.TDR_RUN_RESULTS_adjustedPeakLengthRaw_get
    if _newclass:adjustedPeakLengthRaw = _swig_property(_epl.TDR_RUN_RESULTS_adjustedPeakLengthRaw_get, _epl.TDR_RUN_RESULTS_adjustedPeakLengthRaw_set)
    def __init__(self, *args): 
        this = _epl.new_TDR_RUN_RESULTS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_TDR_RUN_RESULTS
    __del__ = lambda self : None;
TDR_RUN_RESULTS_swigregister = _epl.TDR_RUN_RESULTS_swigregister
TDR_RUN_RESULTS_swigregister(TDR_RUN_RESULTS)

EPLInitTDR = _epl.EPLInitTDR
EPLDeinitTDR = _epl.EPLDeinitTDR
EPLMeasureTDRBaseline = _epl.EPLMeasureTDRBaseline
EPLGetTDRPulseShape = _epl.EPLGetTDRPulseShape
EPLGetTDRCableInfo = _epl.EPLGetTDRCableInfo
EPLGatherTDRInfo = _epl.EPLGatherTDRInfo
EPLShortTDRPulseRun = _epl.EPLShortTDRPulseRun
EPLLongTDRPulseRun = _epl.EPLLongTDRPulseRun
EPLRunTDR = _epl.EPLRunTDR
PIN_INPUT_DELAY = _epl.PIN_INPUT_DELAY
TRGOPT_PULSE = _epl.TRGOPT_PULSE
TRGOPT_PERIODIC = _epl.TRGOPT_PERIODIC
TRGOPT_TRG_IF_LATE = _epl.TRGOPT_TRG_IF_LATE
TRGOPT_NOTIFY_EN = _epl.TRGOPT_NOTIFY_EN
TRGOPT_TOGGLE_EN = _epl.TRGOPT_TOGGLE_EN
TXOPT_DR_INSERT = _epl.TXOPT_DR_INSERT
TXOPT_IGNORE_2STEP = _epl.TXOPT_IGNORE_2STEP
TXOPT_CRC_1STEP = _epl.TXOPT_CRC_1STEP
TXOPT_CHK_1STEP = _epl.TXOPT_CHK_1STEP
TXOPT_IP1588_EN = _epl.TXOPT_IP1588_EN
TXOPT_L2_EN = _epl.TXOPT_L2_EN
TXOPT_IPV6_EN = _epl.TXOPT_IPV6_EN
TXOPT_IPV4_EN = _epl.TXOPT_IPV4_EN
TXOPT_TS_EN = _epl.TXOPT_TS_EN
TXOPT_SYNC_1STEP = _epl.TXOPT_SYNC_1STEP
TXOPT_NTP_TS_EN = _epl.TXOPT_NTP_TS_EN
STSOPT_LITTLE_ENDIAN = _epl.STSOPT_LITTLE_ENDIAN
STSOPT_IPV4 = _epl.STSOPT_IPV4
STSOPT_TXTS_EN = _epl.STSOPT_TXTS_EN
STSOPT_RXTS_EN = _epl.STSOPT_RXTS_EN
STSOPT_TRIG_EN = _epl.STSOPT_TRIG_EN
STSOPT_EVENT_EN = _epl.STSOPT_EVENT_EN
STSOPT_ERR_EN = _epl.STSOPT_ERR_EN
STSOPT_PCFR_EN = _epl.STSOPT_PCFR_EN
RXOPT_DOMAIN_EN = _epl.RXOPT_DOMAIN_EN
RXOPT_ALT_MAST_DIS = _epl.RXOPT_ALT_MAST_DIS
RXOPT_USER_IP_EN = _epl.RXOPT_USER_IP_EN
RXOPT_RX_SLAVE = _epl.RXOPT_RX_SLAVE
RXOPT_IP1588_EN0 = _epl.RXOPT_IP1588_EN0
RXOPT_IP1588_EN1 = _epl.RXOPT_IP1588_EN1
RXOPT_IP1588_EN2 = _epl.RXOPT_IP1588_EN2
RXOPT_RX_L2_EN = _epl.RXOPT_RX_L2_EN
RXOPT_RX_IPV6_EN = _epl.RXOPT_RX_IPV6_EN
RXOPT_RX_IPV4_EN = _epl.RXOPT_RX_IPV4_EN
RXOPT_SRC_ID_HASH_EN = _epl.RXOPT_SRC_ID_HASH_EN
RXOPT_RX_TS_EN = _epl.RXOPT_RX_TS_EN
RXOPT_ACC_UDP = _epl.RXOPT_ACC_UDP
RXOPT_ACC_CRC = _epl.RXOPT_ACC_CRC
RXOPT_TS_APPEND = _epl.RXOPT_TS_APPEND
RXOPT_TS_INSERT = _epl.RXOPT_TS_INSERT
RXOPT_IPV4_UDP_MOD = _epl.RXOPT_IPV4_UDP_MOD
RXOPT_TS_SEC_EN = _epl.RXOPT_TS_SEC_EN
STS_SRC_ADDR_1 = _epl.STS_SRC_ADDR_1
STS_SRC_ADDR_2 = _epl.STS_SRC_ADDR_2
STS_SRC_ADDR_3 = _epl.STS_SRC_ADDR_3
STS_SRC_ADDR_USE_MC = _epl.STS_SRC_ADDR_USE_MC
class RX_CFG_ITEMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RX_CFG_ITEMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RX_CFG_ITEMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptpVersion"] = _epl.RX_CFG_ITEMS_ptpVersion_set
    __swig_getmethods__["ptpVersion"] = _epl.RX_CFG_ITEMS_ptpVersion_get
    if _newclass:ptpVersion = _swig_property(_epl.RX_CFG_ITEMS_ptpVersion_get, _epl.RX_CFG_ITEMS_ptpVersion_set)
    __swig_setmethods__["ptpFirstByteMask"] = _epl.RX_CFG_ITEMS_ptpFirstByteMask_set
    __swig_getmethods__["ptpFirstByteMask"] = _epl.RX_CFG_ITEMS_ptpFirstByteMask_get
    if _newclass:ptpFirstByteMask = _swig_property(_epl.RX_CFG_ITEMS_ptpFirstByteMask_get, _epl.RX_CFG_ITEMS_ptpFirstByteMask_set)
    __swig_setmethods__["ptpFirstByteData"] = _epl.RX_CFG_ITEMS_ptpFirstByteData_set
    __swig_getmethods__["ptpFirstByteData"] = _epl.RX_CFG_ITEMS_ptpFirstByteData_get
    if _newclass:ptpFirstByteData = _swig_property(_epl.RX_CFG_ITEMS_ptpFirstByteData_get, _epl.RX_CFG_ITEMS_ptpFirstByteData_set)
    __swig_setmethods__["ipAddrData"] = _epl.RX_CFG_ITEMS_ipAddrData_set
    __swig_getmethods__["ipAddrData"] = _epl.RX_CFG_ITEMS_ipAddrData_get
    if _newclass:ipAddrData = _swig_property(_epl.RX_CFG_ITEMS_ipAddrData_get, _epl.RX_CFG_ITEMS_ipAddrData_set)
    __swig_setmethods__["tsMinIFG"] = _epl.RX_CFG_ITEMS_tsMinIFG_set
    __swig_getmethods__["tsMinIFG"] = _epl.RX_CFG_ITEMS_tsMinIFG_get
    if _newclass:tsMinIFG = _swig_property(_epl.RX_CFG_ITEMS_tsMinIFG_get, _epl.RX_CFG_ITEMS_tsMinIFG_set)
    __swig_setmethods__["srcIdHash"] = _epl.RX_CFG_ITEMS_srcIdHash_set
    __swig_getmethods__["srcIdHash"] = _epl.RX_CFG_ITEMS_srcIdHash_get
    if _newclass:srcIdHash = _swig_property(_epl.RX_CFG_ITEMS_srcIdHash_get, _epl.RX_CFG_ITEMS_srcIdHash_set)
    __swig_setmethods__["ptpDomain"] = _epl.RX_CFG_ITEMS_ptpDomain_set
    __swig_getmethods__["ptpDomain"] = _epl.RX_CFG_ITEMS_ptpDomain_get
    if _newclass:ptpDomain = _swig_property(_epl.RX_CFG_ITEMS_ptpDomain_get, _epl.RX_CFG_ITEMS_ptpDomain_set)
    __swig_setmethods__["tsSecLen"] = _epl.RX_CFG_ITEMS_tsSecLen_set
    __swig_getmethods__["tsSecLen"] = _epl.RX_CFG_ITEMS_tsSecLen_get
    if _newclass:tsSecLen = _swig_property(_epl.RX_CFG_ITEMS_tsSecLen_get, _epl.RX_CFG_ITEMS_tsSecLen_set)
    __swig_setmethods__["rxTsNanoSecOffset"] = _epl.RX_CFG_ITEMS_rxTsNanoSecOffset_set
    __swig_getmethods__["rxTsNanoSecOffset"] = _epl.RX_CFG_ITEMS_rxTsNanoSecOffset_get
    if _newclass:rxTsNanoSecOffset = _swig_property(_epl.RX_CFG_ITEMS_rxTsNanoSecOffset_get, _epl.RX_CFG_ITEMS_rxTsNanoSecOffset_set)
    __swig_setmethods__["rxTsSecondsOffset"] = _epl.RX_CFG_ITEMS_rxTsSecondsOffset_set
    __swig_getmethods__["rxTsSecondsOffset"] = _epl.RX_CFG_ITEMS_rxTsSecondsOffset_get
    if _newclass:rxTsSecondsOffset = _swig_property(_epl.RX_CFG_ITEMS_rxTsSecondsOffset_get, _epl.RX_CFG_ITEMS_rxTsSecondsOffset_set)
    def __init__(self, *args): 
        this = _epl.new_RX_CFG_ITEMS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_RX_CFG_ITEMS
    __del__ = lambda self : None;
RX_CFG_ITEMS_swigregister = _epl.RX_CFG_ITEMS_swigregister
RX_CFG_ITEMS_swigregister(RX_CFG_ITEMS)

CLKOPT_CLK_OUT_EN = _epl.CLKOPT_CLK_OUT_EN
CLKOPT_CLK_OUT_SEL = _epl.CLKOPT_CLK_OUT_SEL
CLKOPT_CLK_OUT_SPEED_SEL = _epl.CLKOPT_CLK_OUT_SPEED_SEL
PHYMSG_STATUS_TX = _epl.PHYMSG_STATUS_TX
PHYMSG_STATUS_RX = _epl.PHYMSG_STATUS_RX
PHYMSG_STATUS_TRIGGER = _epl.PHYMSG_STATUS_TRIGGER
PHYMSG_STATUS_EVENT = _epl.PHYMSG_STATUS_EVENT
PHYMSG_STATUS_ERROR = _epl.PHYMSG_STATUS_ERROR
PHYMSG_STATUS_REG_READ = _epl.PHYMSG_STATUS_REG_READ
class PHYMSG_MESSAGE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_getmethods__["RegReadStatus"] = _epl.PHYMSG_MESSAGE_RegReadStatus_get
    if _newclass:RegReadStatus = _swig_property(_epl.PHYMSG_MESSAGE_RegReadStatus_get)
    __swig_getmethods__["ErrorStatus"] = _epl.PHYMSG_MESSAGE_ErrorStatus_get
    if _newclass:ErrorStatus = _swig_property(_epl.PHYMSG_MESSAGE_ErrorStatus_get)
    __swig_getmethods__["EventStatus"] = _epl.PHYMSG_MESSAGE_EventStatus_get
    if _newclass:EventStatus = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_get)
    __swig_getmethods__["TriggerStatus"] = _epl.PHYMSG_MESSAGE_TriggerStatus_get
    if _newclass:TriggerStatus = _swig_property(_epl.PHYMSG_MESSAGE_TriggerStatus_get)
    __swig_getmethods__["RxStatus"] = _epl.PHYMSG_MESSAGE_RxStatus_get
    if _newclass:RxStatus = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_get)
    __swig_getmethods__["TxStatus"] = _epl.PHYMSG_MESSAGE_TxStatus_get
    if _newclass:TxStatus = _swig_property(_epl.PHYMSG_MESSAGE_TxStatus_get)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE
    __del__ = lambda self : None;
PHYMSG_MESSAGE_swigregister = _epl.PHYMSG_MESSAGE_swigregister
PHYMSG_MESSAGE_swigregister(PHYMSG_MESSAGE)

class PHYMSG_MESSAGE_RegReadStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_RegReadStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_RegReadStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regIndex"] = _epl.PHYMSG_MESSAGE_RegReadStatus_regIndex_set
    __swig_getmethods__["regIndex"] = _epl.PHYMSG_MESSAGE_RegReadStatus_regIndex_get
    if _newclass:regIndex = _swig_property(_epl.PHYMSG_MESSAGE_RegReadStatus_regIndex_get, _epl.PHYMSG_MESSAGE_RegReadStatus_regIndex_set)
    __swig_setmethods__["regPage"] = _epl.PHYMSG_MESSAGE_RegReadStatus_regPage_set
    __swig_getmethods__["regPage"] = _epl.PHYMSG_MESSAGE_RegReadStatus_regPage_get
    if _newclass:regPage = _swig_property(_epl.PHYMSG_MESSAGE_RegReadStatus_regPage_get, _epl.PHYMSG_MESSAGE_RegReadStatus_regPage_set)
    __swig_setmethods__["readRegisterValue"] = _epl.PHYMSG_MESSAGE_RegReadStatus_readRegisterValue_set
    __swig_getmethods__["readRegisterValue"] = _epl.PHYMSG_MESSAGE_RegReadStatus_readRegisterValue_get
    if _newclass:readRegisterValue = _swig_property(_epl.PHYMSG_MESSAGE_RegReadStatus_readRegisterValue_get, _epl.PHYMSG_MESSAGE_RegReadStatus_readRegisterValue_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_RegReadStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_RegReadStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_RegReadStatus_swigregister = _epl.PHYMSG_MESSAGE_RegReadStatus_swigregister
PHYMSG_MESSAGE_RegReadStatus_swigregister(PHYMSG_MESSAGE_RegReadStatus)

class PHYMSG_MESSAGE_ErrorStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_ErrorStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_ErrorStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameBufOverflowFlag"] = _epl.PHYMSG_MESSAGE_ErrorStatus_frameBufOverflowFlag_set
    __swig_getmethods__["frameBufOverflowFlag"] = _epl.PHYMSG_MESSAGE_ErrorStatus_frameBufOverflowFlag_get
    if _newclass:frameBufOverflowFlag = _swig_property(_epl.PHYMSG_MESSAGE_ErrorStatus_frameBufOverflowFlag_get, _epl.PHYMSG_MESSAGE_ErrorStatus_frameBufOverflowFlag_set)
    __swig_setmethods__["frameCounterOverflowFlag"] = _epl.PHYMSG_MESSAGE_ErrorStatus_frameCounterOverflowFlag_set
    __swig_getmethods__["frameCounterOverflowFlag"] = _epl.PHYMSG_MESSAGE_ErrorStatus_frameCounterOverflowFlag_get
    if _newclass:frameCounterOverflowFlag = _swig_property(_epl.PHYMSG_MESSAGE_ErrorStatus_frameCounterOverflowFlag_get, _epl.PHYMSG_MESSAGE_ErrorStatus_frameCounterOverflowFlag_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_ErrorStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_ErrorStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_ErrorStatus_swigregister = _epl.PHYMSG_MESSAGE_ErrorStatus_swigregister
PHYMSG_MESSAGE_ErrorStatus_swigregister(PHYMSG_MESSAGE_ErrorStatus)

class PHYMSG_MESSAGE_EventStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_EventStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_EventStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptpEstsRegBits"] = _epl.PHYMSG_MESSAGE_EventStatus_ptpEstsRegBits_set
    __swig_getmethods__["ptpEstsRegBits"] = _epl.PHYMSG_MESSAGE_EventStatus_ptpEstsRegBits_get
    if _newclass:ptpEstsRegBits = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_ptpEstsRegBits_get, _epl.PHYMSG_MESSAGE_EventStatus_ptpEstsRegBits_set)
    __swig_setmethods__["extendedEventStatusFlag"] = _epl.PHYMSG_MESSAGE_EventStatus_extendedEventStatusFlag_set
    __swig_getmethods__["extendedEventStatusFlag"] = _epl.PHYMSG_MESSAGE_EventStatus_extendedEventStatusFlag_get
    if _newclass:extendedEventStatusFlag = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_extendedEventStatusFlag_get, _epl.PHYMSG_MESSAGE_EventStatus_extendedEventStatusFlag_set)
    __swig_setmethods__["extendedEventInfo"] = _epl.PHYMSG_MESSAGE_EventStatus_extendedEventInfo_set
    __swig_getmethods__["extendedEventInfo"] = _epl.PHYMSG_MESSAGE_EventStatus_extendedEventInfo_get
    if _newclass:extendedEventInfo = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_extendedEventInfo_get, _epl.PHYMSG_MESSAGE_EventStatus_extendedEventInfo_set)
    __swig_setmethods__["evtTimestampSecs"] = _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampSecs_set
    __swig_getmethods__["evtTimestampSecs"] = _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampSecs_get
    if _newclass:evtTimestampSecs = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_evtTimestampSecs_get, _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampSecs_set)
    __swig_setmethods__["evtTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampNanoSecs_set
    __swig_getmethods__["evtTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampNanoSecs_get
    if _newclass:evtTimestampNanoSecs = _swig_property(_epl.PHYMSG_MESSAGE_EventStatus_evtTimestampNanoSecs_get, _epl.PHYMSG_MESSAGE_EventStatus_evtTimestampNanoSecs_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_EventStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_EventStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_EventStatus_swigregister = _epl.PHYMSG_MESSAGE_EventStatus_swigregister
PHYMSG_MESSAGE_EventStatus_swigregister(PHYMSG_MESSAGE_EventStatus)

class PHYMSG_MESSAGE_TriggerStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_TriggerStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_TriggerStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["triggerStatus"] = _epl.PHYMSG_MESSAGE_TriggerStatus_triggerStatus_set
    __swig_getmethods__["triggerStatus"] = _epl.PHYMSG_MESSAGE_TriggerStatus_triggerStatus_get
    if _newclass:triggerStatus = _swig_property(_epl.PHYMSG_MESSAGE_TriggerStatus_triggerStatus_get, _epl.PHYMSG_MESSAGE_TriggerStatus_triggerStatus_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_TriggerStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_TriggerStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_TriggerStatus_swigregister = _epl.PHYMSG_MESSAGE_TriggerStatus_swigregister
PHYMSG_MESSAGE_TriggerStatus_swigregister(PHYMSG_MESSAGE_TriggerStatus)

class PHYMSG_MESSAGE_RxStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_RxStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_RxStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rxTimestampSecs"] = _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampSecs_set
    __swig_getmethods__["rxTimestampSecs"] = _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampSecs_get
    if _newclass:rxTimestampSecs = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_rxTimestampSecs_get, _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampSecs_set)
    __swig_setmethods__["rxTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampNanoSecs_set
    __swig_getmethods__["rxTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampNanoSecs_get
    if _newclass:rxTimestampNanoSecs = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_rxTimestampNanoSecs_get, _epl.PHYMSG_MESSAGE_RxStatus_rxTimestampNanoSecs_set)
    __swig_setmethods__["rxOverflowCount"] = _epl.PHYMSG_MESSAGE_RxStatus_rxOverflowCount_set
    __swig_getmethods__["rxOverflowCount"] = _epl.PHYMSG_MESSAGE_RxStatus_rxOverflowCount_get
    if _newclass:rxOverflowCount = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_rxOverflowCount_get, _epl.PHYMSG_MESSAGE_RxStatus_rxOverflowCount_set)
    __swig_setmethods__["sequenceId"] = _epl.PHYMSG_MESSAGE_RxStatus_sequenceId_set
    __swig_getmethods__["sequenceId"] = _epl.PHYMSG_MESSAGE_RxStatus_sequenceId_get
    if _newclass:sequenceId = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_sequenceId_get, _epl.PHYMSG_MESSAGE_RxStatus_sequenceId_set)
    __swig_setmethods__["messageType"] = _epl.PHYMSG_MESSAGE_RxStatus_messageType_set
    __swig_getmethods__["messageType"] = _epl.PHYMSG_MESSAGE_RxStatus_messageType_get
    if _newclass:messageType = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_messageType_get, _epl.PHYMSG_MESSAGE_RxStatus_messageType_set)
    __swig_setmethods__["sourceHash"] = _epl.PHYMSG_MESSAGE_RxStatus_sourceHash_set
    __swig_getmethods__["sourceHash"] = _epl.PHYMSG_MESSAGE_RxStatus_sourceHash_get
    if _newclass:sourceHash = _swig_property(_epl.PHYMSG_MESSAGE_RxStatus_sourceHash_get, _epl.PHYMSG_MESSAGE_RxStatus_sourceHash_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_RxStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_RxStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_RxStatus_swigregister = _epl.PHYMSG_MESSAGE_RxStatus_swigregister
PHYMSG_MESSAGE_RxStatus_swigregister(PHYMSG_MESSAGE_RxStatus)

class PHYMSG_MESSAGE_TxStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_MESSAGE_TxStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_MESSAGE_TxStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txTimestampSecs"] = _epl.PHYMSG_MESSAGE_TxStatus_txTimestampSecs_set
    __swig_getmethods__["txTimestampSecs"] = _epl.PHYMSG_MESSAGE_TxStatus_txTimestampSecs_get
    if _newclass:txTimestampSecs = _swig_property(_epl.PHYMSG_MESSAGE_TxStatus_txTimestampSecs_get, _epl.PHYMSG_MESSAGE_TxStatus_txTimestampSecs_set)
    __swig_setmethods__["txTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_TxStatus_txTimestampNanoSecs_set
    __swig_getmethods__["txTimestampNanoSecs"] = _epl.PHYMSG_MESSAGE_TxStatus_txTimestampNanoSecs_get
    if _newclass:txTimestampNanoSecs = _swig_property(_epl.PHYMSG_MESSAGE_TxStatus_txTimestampNanoSecs_get, _epl.PHYMSG_MESSAGE_TxStatus_txTimestampNanoSecs_set)
    __swig_setmethods__["txOverflowCount"] = _epl.PHYMSG_MESSAGE_TxStatus_txOverflowCount_set
    __swig_getmethods__["txOverflowCount"] = _epl.PHYMSG_MESSAGE_TxStatus_txOverflowCount_get
    if _newclass:txOverflowCount = _swig_property(_epl.PHYMSG_MESSAGE_TxStatus_txOverflowCount_get, _epl.PHYMSG_MESSAGE_TxStatus_txOverflowCount_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_MESSAGE_TxStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_MESSAGE_TxStatus
    __del__ = lambda self : None;
PHYMSG_MESSAGE_TxStatus_swigregister = _epl.PHYMSG_MESSAGE_TxStatus_swigregister
PHYMSG_MESSAGE_TxStatus_swigregister(PHYMSG_MESSAGE_TxStatus)

class PHYMSG_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHYMSG_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHYMSG_LIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgType"] = _epl.PHYMSG_LIST_msgType_set
    __swig_getmethods__["msgType"] = _epl.PHYMSG_LIST_msgType_get
    if _newclass:msgType = _swig_property(_epl.PHYMSG_LIST_msgType_get, _epl.PHYMSG_LIST_msgType_set)
    __swig_setmethods__["phyMsg"] = _epl.PHYMSG_LIST_phyMsg_set
    __swig_getmethods__["phyMsg"] = _epl.PHYMSG_LIST_phyMsg_get
    if _newclass:phyMsg = _swig_property(_epl.PHYMSG_LIST_phyMsg_get, _epl.PHYMSG_LIST_phyMsg_set)
    __swig_setmethods__["nxtMsg"] = _epl.PHYMSG_LIST_nxtMsg_set
    __swig_getmethods__["nxtMsg"] = _epl.PHYMSG_LIST_nxtMsg_get
    if _newclass:nxtMsg = _swig_property(_epl.PHYMSG_LIST_nxtMsg_get, _epl.PHYMSG_LIST_nxtMsg_set)
    def __init__(self, *args): 
        this = _epl.new_PHYMSG_LIST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PHYMSG_LIST
    __del__ = lambda self : None;
PHYMSG_LIST_swigregister = _epl.PHYMSG_LIST_swigregister
PHYMSG_LIST_swigregister(PHYMSG_LIST)

PTPEVT_TRANSMIT_TIMESTAMP_BIT = _epl.PTPEVT_TRANSMIT_TIMESTAMP_BIT
PTPEVT_RECEIVE_TIMESTAMP_BIT = _epl.PTPEVT_RECEIVE_TIMESTAMP_BIT
PTPEVT_EVENT_TIMESTAMP_BIT = _epl.PTPEVT_EVENT_TIMESTAMP_BIT
PTPEVT_TRIGGER_DONE_BIT = _epl.PTPEVT_TRIGGER_DONE_BIT
PTP_EVENT_PACKET_LENGTH = _epl.PTP_EVENT_PACKET_LENGTH
PTPEnable = _epl.PTPEnable
PTPSetTriggerConfig = _epl.PTPSetTriggerConfig
PTPSetEventConfig = _epl.PTPSetEventConfig
PTPSetTransmitConfig = _epl.PTPSetTransmitConfig
PTPSetPhyStatusFrameConfig = _epl.PTPSetPhyStatusFrameConfig
PTPSetReceiveConfig = _epl.PTPSetReceiveConfig
PTPCalcSourceIdHash = _epl.PTPCalcSourceIdHash
PTPSetTempRateDurationConfig = _epl.PTPSetTempRateDurationConfig
PTPSetClockConfig = _epl.PTPSetClockConfig
PTPSetGpioInterruptConfig = _epl.PTPSetGpioInterruptConfig
PTPSetMiscConfig = _epl.PTPSetMiscConfig
PTPClockStepAdjustment = _epl.PTPClockStepAdjustment
PTPClockSet = _epl.PTPClockSet
PTPClockSetRateAdjustment = _epl.PTPClockSetRateAdjustment
PTPCheckForEvents = _epl.PTPCheckForEvents
PTPArmTrigger = _epl.PTPArmTrigger
PTPHasTriggerExpired = _epl.PTPHasTriggerExpired
PTPCancelTrigger = _epl.PTPCancelTrigger
MonitorGpioSignals = _epl.MonitorGpioSignals
PTPClockReadCurrent = _epl.PTPClockReadCurrent
PTPGetTransmitTimestamp = _epl.PTPGetTransmitTimestamp
PTPGetReceiveTimestamp = _epl.PTPGetReceiveTimestamp
PTPGetTimestampFromFrame = _epl.PTPGetTimestampFromFrame
PTPGetEvent = _epl.PTPGetEvent
IsPhyStatusFrame = _epl.IsPhyStatusFrame
GetNextPhyMessage = _epl.GetNextPhyMessage
MDC_PORT_OFFSET = _epl.MDC_PORT_OFFSET
PORT_MII_DATA_0 = _epl.PORT_MII_DATA_0
PORT_MII_DATA_1 = _epl.PORT_MII_DATA_1
PORT_MII_CLK_0 = _epl.PORT_MII_CLK_0
PORT_MII_CLK_1 = _epl.PORT_MII_CLK_1
PORT_MII_DIRECT_DATA_0 = _epl.PORT_MII_DIRECT_DATA_0
PORT_MII_DIRECT_DATA_1 = _epl.PORT_MII_DIRECT_DATA_1
MDIO_OUT_PORT_OFFSET = _epl.MDIO_OUT_PORT_OFFSET
MDIO_IN_PORT_OFFSET = _epl.MDIO_IN_PORT_OFFSET
MDC_FDI_PORT_OFFSET = _epl.MDC_FDI_PORT_OFFSET
MDIO_FDI_OUT_LOW = _epl.MDIO_FDI_OUT_LOW
MDIO_FDI_OUT_HIGH = _epl.MDIO_FDI_OUT_HIGH
MDC_FDI_LOW = _epl.MDC_FDI_LOW
MDC_FDI_HIGH = _epl.MDC_FDI_HIGH
MDIO_IN_MASK = _epl.MDIO_IN_MASK
INT_NSC_MICRO_MDIO = _epl.INT_NSC_MICRO_MDIO
INT_DIRECT_CONNECT = _epl.INT_DIRECT_CONNECT
INT_FDI = _epl.INT_FDI
ifLPTReadReg = _epl.ifLPTReadReg
ifLPTWriteReg = _epl.ifLPTWriteReg
ifLPTMdioReadBit = _epl.ifLPTMdioReadBit
ifLPTMdioWriteBit = _epl.ifLPTMdioWriteBit
class PKT_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PKT_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PKT_LIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pType"] = _epl.PKT_LIST_pType_set
    __swig_getmethods__["pType"] = _epl.PKT_LIST_pType_get
    if _newclass:pType = _swig_property(_epl.PKT_LIST_pType_get, _epl.PKT_LIST_pType_set)
    __swig_setmethods__["nPkt"] = _epl.PKT_LIST_nPkt_set
    __swig_getmethods__["nPkt"] = _epl.PKT_LIST_nPkt_get
    if _newclass:nPkt = _swig_property(_epl.PKT_LIST_nPkt_get, _epl.PKT_LIST_nPkt_set)
    __swig_setmethods__["pSize"] = _epl.PKT_LIST_pSize_set
    __swig_getmethods__["pSize"] = _epl.PKT_LIST_pSize_get
    if _newclass:pSize = _swig_property(_epl.PKT_LIST_pSize_get, _epl.PKT_LIST_pSize_set)
    __swig_setmethods__["pPacket"] = _epl.PKT_LIST_pPacket_set
    __swig_getmethods__["pPacket"] = _epl.PKT_LIST_pPacket_get
    if _newclass:pPacket = _swig_property(_epl.PKT_LIST_pPacket_get, _epl.PKT_LIST_pPacket_set)
    __swig_setmethods__["nxtPkt"] = _epl.PKT_LIST_nxtPkt_set
    __swig_getmethods__["nxtPkt"] = _epl.PKT_LIST_nxtPkt_get
    if _newclass:nxtPkt = _swig_property(_epl.PKT_LIST_nxtPkt_get, _epl.PKT_LIST_nxtPkt_set)
    def __init__(self, *args): 
        this = _epl.new_PKT_LIST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PKT_LIST
    __del__ = lambda self : None;
PKT_LIST_swigregister = _epl.PKT_LIST_swigregister
PKT_LIST_swigregister(PKT_LIST)

MACInitialize = _epl.MACInitialize
MACDeInitialize = _epl.MACDeInitialize
MACSendPacket = _epl.MACSendPacket
MACSendPacketNoUdpChecksum = _epl.MACSendPacketNoUdpChecksum
MACFlushReceiveFifos = _epl.MACFlushReceiveFifos
MACReceivePacket = _epl.MACReceivePacket
PythonReload = _epl.PythonReload
MACReadReg = _epl.MACReadReg
MACWriteReg = _epl.MACWriteReg
MACMIIReadReg = _epl.MACMIIReadReg
MACMIIWriteReg = _epl.MACMIIWriteReg
SetDuplex = _epl.SetDuplex
CalcChecksum = _epl.CalcChecksum
FPGAWriteReg = _epl.FPGAWriteReg
class TimeRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeRepresentation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seconds"] = _epl.TimeRepresentation_seconds_set
    __swig_getmethods__["seconds"] = _epl.TimeRepresentation_seconds_get
    if _newclass:seconds = _swig_property(_epl.TimeRepresentation_seconds_get, _epl.TimeRepresentation_seconds_set)
    __swig_setmethods__["nanoseconds"] = _epl.TimeRepresentation_nanoseconds_set
    __swig_getmethods__["nanoseconds"] = _epl.TimeRepresentation_nanoseconds_get
    if _newclass:nanoseconds = _swig_property(_epl.TimeRepresentation_nanoseconds_get, _epl.TimeRepresentation_nanoseconds_set)
    def __init__(self, *args): 
        this = _epl.new_TimeRepresentation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_TimeRepresentation
    __del__ = lambda self : None;
TimeRepresentation_swigregister = _epl.TimeRepresentation_swigregister
TimeRepresentation_swigregister(TimeRepresentation)

class TimeInternal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInternal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInternal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seconds"] = _epl.TimeInternal_seconds_set
    __swig_getmethods__["seconds"] = _epl.TimeInternal_seconds_get
    if _newclass:seconds = _swig_property(_epl.TimeInternal_seconds_get, _epl.TimeInternal_seconds_set)
    __swig_setmethods__["nanoseconds"] = _epl.TimeInternal_nanoseconds_set
    __swig_getmethods__["nanoseconds"] = _epl.TimeInternal_nanoseconds_get
    if _newclass:nanoseconds = _swig_property(_epl.TimeInternal_nanoseconds_get, _epl.TimeInternal_nanoseconds_set)
    def __init__(self, *args): 
        this = _epl.new_TimeInternal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_TimeInternal
    __del__ = lambda self : None;
TimeInternal_swigregister = _epl.TimeInternal_swigregister
TimeInternal_swigregister(TimeInternal)

class IntervalTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalTimer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interval"] = _epl.IntervalTimer_interval_set
    __swig_getmethods__["interval"] = _epl.IntervalTimer_interval_get
    if _newclass:interval = _swig_property(_epl.IntervalTimer_interval_get, _epl.IntervalTimer_interval_set)
    __swig_setmethods__["left"] = _epl.IntervalTimer_left_set
    __swig_getmethods__["left"] = _epl.IntervalTimer_left_get
    if _newclass:left = _swig_property(_epl.IntervalTimer_left_get, _epl.IntervalTimer_left_set)
    __swig_setmethods__["expire"] = _epl.IntervalTimer_expire_set
    __swig_getmethods__["expire"] = _epl.IntervalTimer_expire_get
    if _newclass:expire = _swig_property(_epl.IntervalTimer_expire_get, _epl.IntervalTimer_expire_set)
    __swig_setmethods__["lastTime"] = _epl.IntervalTimer_lastTime_set
    __swig_getmethods__["lastTime"] = _epl.IntervalTimer_lastTime_get
    if _newclass:lastTime = _swig_property(_epl.IntervalTimer_lastTime_get, _epl.IntervalTimer_lastTime_set)
    def __init__(self, *args): 
        this = _epl.new_IntervalTimer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_IntervalTimer
    __del__ = lambda self : None;
IntervalTimer_swigregister = _epl.IntervalTimer_swigregister
IntervalTimer_swigregister(IntervalTimer)

class MsgHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["versionPTP"] = _epl.MsgHeader_versionPTP_set
    __swig_getmethods__["versionPTP"] = _epl.MsgHeader_versionPTP_get
    if _newclass:versionPTP = _swig_property(_epl.MsgHeader_versionPTP_get, _epl.MsgHeader_versionPTP_set)
    __swig_setmethods__["versionNetwork"] = _epl.MsgHeader_versionNetwork_set
    __swig_getmethods__["versionNetwork"] = _epl.MsgHeader_versionNetwork_get
    if _newclass:versionNetwork = _swig_property(_epl.MsgHeader_versionNetwork_get, _epl.MsgHeader_versionNetwork_set)
    __swig_setmethods__["subdomain"] = _epl.MsgHeader_subdomain_set
    __swig_getmethods__["subdomain"] = _epl.MsgHeader_subdomain_get
    if _newclass:subdomain = _swig_property(_epl.MsgHeader_subdomain_get, _epl.MsgHeader_subdomain_set)
    __swig_setmethods__["messageType"] = _epl.MsgHeader_messageType_set
    __swig_getmethods__["messageType"] = _epl.MsgHeader_messageType_get
    if _newclass:messageType = _swig_property(_epl.MsgHeader_messageType_get, _epl.MsgHeader_messageType_set)
    __swig_setmethods__["sourceCommunicationTechnology"] = _epl.MsgHeader_sourceCommunicationTechnology_set
    __swig_getmethods__["sourceCommunicationTechnology"] = _epl.MsgHeader_sourceCommunicationTechnology_get
    if _newclass:sourceCommunicationTechnology = _swig_property(_epl.MsgHeader_sourceCommunicationTechnology_get, _epl.MsgHeader_sourceCommunicationTechnology_set)
    __swig_setmethods__["sourceUuid"] = _epl.MsgHeader_sourceUuid_set
    __swig_getmethods__["sourceUuid"] = _epl.MsgHeader_sourceUuid_get
    if _newclass:sourceUuid = _swig_property(_epl.MsgHeader_sourceUuid_get, _epl.MsgHeader_sourceUuid_set)
    __swig_setmethods__["sourcePortId"] = _epl.MsgHeader_sourcePortId_set
    __swig_getmethods__["sourcePortId"] = _epl.MsgHeader_sourcePortId_get
    if _newclass:sourcePortId = _swig_property(_epl.MsgHeader_sourcePortId_get, _epl.MsgHeader_sourcePortId_set)
    __swig_setmethods__["sequenceId"] = _epl.MsgHeader_sequenceId_set
    __swig_getmethods__["sequenceId"] = _epl.MsgHeader_sequenceId_get
    if _newclass:sequenceId = _swig_property(_epl.MsgHeader_sequenceId_get, _epl.MsgHeader_sequenceId_set)
    __swig_setmethods__["control"] = _epl.MsgHeader_control_set
    __swig_getmethods__["control"] = _epl.MsgHeader_control_get
    if _newclass:control = _swig_property(_epl.MsgHeader_control_get, _epl.MsgHeader_control_set)
    __swig_setmethods__["flags"] = _epl.MsgHeader_flags_set
    __swig_getmethods__["flags"] = _epl.MsgHeader_flags_get
    if _newclass:flags = _swig_property(_epl.MsgHeader_flags_get, _epl.MsgHeader_flags_set)
    def __init__(self, *args): 
        this = _epl.new_MsgHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgHeader
    __del__ = lambda self : None;
MsgHeader_swigregister = _epl.MsgHeader_swigregister
MsgHeader_swigregister(MsgHeader)

class MsgSync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgSync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgSync, name)
    __repr__ = _swig_repr
    __swig_setmethods__["originTimestamp"] = _epl.MsgSync_originTimestamp_set
    __swig_getmethods__["originTimestamp"] = _epl.MsgSync_originTimestamp_get
    if _newclass:originTimestamp = _swig_property(_epl.MsgSync_originTimestamp_get, _epl.MsgSync_originTimestamp_set)
    __swig_setmethods__["epochNumber"] = _epl.MsgSync_epochNumber_set
    __swig_getmethods__["epochNumber"] = _epl.MsgSync_epochNumber_get
    if _newclass:epochNumber = _swig_property(_epl.MsgSync_epochNumber_get, _epl.MsgSync_epochNumber_set)
    __swig_setmethods__["currentUTCOffset"] = _epl.MsgSync_currentUTCOffset_set
    __swig_getmethods__["currentUTCOffset"] = _epl.MsgSync_currentUTCOffset_get
    if _newclass:currentUTCOffset = _swig_property(_epl.MsgSync_currentUTCOffset_get, _epl.MsgSync_currentUTCOffset_set)
    __swig_setmethods__["grandmasterCommunicationTechnology"] = _epl.MsgSync_grandmasterCommunicationTechnology_set
    __swig_getmethods__["grandmasterCommunicationTechnology"] = _epl.MsgSync_grandmasterCommunicationTechnology_get
    if _newclass:grandmasterCommunicationTechnology = _swig_property(_epl.MsgSync_grandmasterCommunicationTechnology_get, _epl.MsgSync_grandmasterCommunicationTechnology_set)
    __swig_setmethods__["grandmasterClockUuid"] = _epl.MsgSync_grandmasterClockUuid_set
    __swig_getmethods__["grandmasterClockUuid"] = _epl.MsgSync_grandmasterClockUuid_get
    if _newclass:grandmasterClockUuid = _swig_property(_epl.MsgSync_grandmasterClockUuid_get, _epl.MsgSync_grandmasterClockUuid_set)
    __swig_setmethods__["grandmasterPortId"] = _epl.MsgSync_grandmasterPortId_set
    __swig_getmethods__["grandmasterPortId"] = _epl.MsgSync_grandmasterPortId_get
    if _newclass:grandmasterPortId = _swig_property(_epl.MsgSync_grandmasterPortId_get, _epl.MsgSync_grandmasterPortId_set)
    __swig_setmethods__["grandmasterSequenceId"] = _epl.MsgSync_grandmasterSequenceId_set
    __swig_getmethods__["grandmasterSequenceId"] = _epl.MsgSync_grandmasterSequenceId_get
    if _newclass:grandmasterSequenceId = _swig_property(_epl.MsgSync_grandmasterSequenceId_get, _epl.MsgSync_grandmasterSequenceId_set)
    __swig_setmethods__["grandmasterClockStratum"] = _epl.MsgSync_grandmasterClockStratum_set
    __swig_getmethods__["grandmasterClockStratum"] = _epl.MsgSync_grandmasterClockStratum_get
    if _newclass:grandmasterClockStratum = _swig_property(_epl.MsgSync_grandmasterClockStratum_get, _epl.MsgSync_grandmasterClockStratum_set)
    __swig_setmethods__["grandmasterClockIdentifier"] = _epl.MsgSync_grandmasterClockIdentifier_set
    __swig_getmethods__["grandmasterClockIdentifier"] = _epl.MsgSync_grandmasterClockIdentifier_get
    if _newclass:grandmasterClockIdentifier = _swig_property(_epl.MsgSync_grandmasterClockIdentifier_get, _epl.MsgSync_grandmasterClockIdentifier_set)
    __swig_setmethods__["grandmasterClockVariance"] = _epl.MsgSync_grandmasterClockVariance_set
    __swig_getmethods__["grandmasterClockVariance"] = _epl.MsgSync_grandmasterClockVariance_get
    if _newclass:grandmasterClockVariance = _swig_property(_epl.MsgSync_grandmasterClockVariance_get, _epl.MsgSync_grandmasterClockVariance_set)
    __swig_setmethods__["grandmasterPreferred"] = _epl.MsgSync_grandmasterPreferred_set
    __swig_getmethods__["grandmasterPreferred"] = _epl.MsgSync_grandmasterPreferred_get
    if _newclass:grandmasterPreferred = _swig_property(_epl.MsgSync_grandmasterPreferred_get, _epl.MsgSync_grandmasterPreferred_set)
    __swig_setmethods__["grandmasterIsBoundaryClock"] = _epl.MsgSync_grandmasterIsBoundaryClock_set
    __swig_getmethods__["grandmasterIsBoundaryClock"] = _epl.MsgSync_grandmasterIsBoundaryClock_get
    if _newclass:grandmasterIsBoundaryClock = _swig_property(_epl.MsgSync_grandmasterIsBoundaryClock_get, _epl.MsgSync_grandmasterIsBoundaryClock_set)
    __swig_setmethods__["syncInterval"] = _epl.MsgSync_syncInterval_set
    __swig_getmethods__["syncInterval"] = _epl.MsgSync_syncInterval_get
    if _newclass:syncInterval = _swig_property(_epl.MsgSync_syncInterval_get, _epl.MsgSync_syncInterval_set)
    __swig_setmethods__["localClockVariance"] = _epl.MsgSync_localClockVariance_set
    __swig_getmethods__["localClockVariance"] = _epl.MsgSync_localClockVariance_get
    if _newclass:localClockVariance = _swig_property(_epl.MsgSync_localClockVariance_get, _epl.MsgSync_localClockVariance_set)
    __swig_setmethods__["localStepsRemoved"] = _epl.MsgSync_localStepsRemoved_set
    __swig_getmethods__["localStepsRemoved"] = _epl.MsgSync_localStepsRemoved_get
    if _newclass:localStepsRemoved = _swig_property(_epl.MsgSync_localStepsRemoved_get, _epl.MsgSync_localStepsRemoved_set)
    __swig_setmethods__["localClockStratum"] = _epl.MsgSync_localClockStratum_set
    __swig_getmethods__["localClockStratum"] = _epl.MsgSync_localClockStratum_get
    if _newclass:localClockStratum = _swig_property(_epl.MsgSync_localClockStratum_get, _epl.MsgSync_localClockStratum_set)
    __swig_setmethods__["localClockIdentifer"] = _epl.MsgSync_localClockIdentifer_set
    __swig_getmethods__["localClockIdentifer"] = _epl.MsgSync_localClockIdentifer_get
    if _newclass:localClockIdentifer = _swig_property(_epl.MsgSync_localClockIdentifer_get, _epl.MsgSync_localClockIdentifer_set)
    __swig_setmethods__["parentCommunicationTechnology"] = _epl.MsgSync_parentCommunicationTechnology_set
    __swig_getmethods__["parentCommunicationTechnology"] = _epl.MsgSync_parentCommunicationTechnology_get
    if _newclass:parentCommunicationTechnology = _swig_property(_epl.MsgSync_parentCommunicationTechnology_get, _epl.MsgSync_parentCommunicationTechnology_set)
    __swig_setmethods__["parentUuid"] = _epl.MsgSync_parentUuid_set
    __swig_getmethods__["parentUuid"] = _epl.MsgSync_parentUuid_get
    if _newclass:parentUuid = _swig_property(_epl.MsgSync_parentUuid_get, _epl.MsgSync_parentUuid_set)
    __swig_setmethods__["parentPortField"] = _epl.MsgSync_parentPortField_set
    __swig_getmethods__["parentPortField"] = _epl.MsgSync_parentPortField_get
    if _newclass:parentPortField = _swig_property(_epl.MsgSync_parentPortField_get, _epl.MsgSync_parentPortField_set)
    __swig_setmethods__["estimatedMasterVariance"] = _epl.MsgSync_estimatedMasterVariance_set
    __swig_getmethods__["estimatedMasterVariance"] = _epl.MsgSync_estimatedMasterVariance_get
    if _newclass:estimatedMasterVariance = _swig_property(_epl.MsgSync_estimatedMasterVariance_get, _epl.MsgSync_estimatedMasterVariance_set)
    __swig_setmethods__["estimatedMasterDrift"] = _epl.MsgSync_estimatedMasterDrift_set
    __swig_getmethods__["estimatedMasterDrift"] = _epl.MsgSync_estimatedMasterDrift_get
    if _newclass:estimatedMasterDrift = _swig_property(_epl.MsgSync_estimatedMasterDrift_get, _epl.MsgSync_estimatedMasterDrift_set)
    __swig_setmethods__["utcReasonable"] = _epl.MsgSync_utcReasonable_set
    __swig_getmethods__["utcReasonable"] = _epl.MsgSync_utcReasonable_get
    if _newclass:utcReasonable = _swig_property(_epl.MsgSync_utcReasonable_get, _epl.MsgSync_utcReasonable_set)
    def __init__(self, *args): 
        this = _epl.new_MsgSync(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgSync
    __del__ = lambda self : None;
MsgSync_swigregister = _epl.MsgSync_swigregister
MsgSync_swigregister(MsgSync)

class MsgFollowUp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgFollowUp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgFollowUp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["associatedSequenceId"] = _epl.MsgFollowUp_associatedSequenceId_set
    __swig_getmethods__["associatedSequenceId"] = _epl.MsgFollowUp_associatedSequenceId_get
    if _newclass:associatedSequenceId = _swig_property(_epl.MsgFollowUp_associatedSequenceId_get, _epl.MsgFollowUp_associatedSequenceId_set)
    __swig_setmethods__["preciseOriginTimestamp"] = _epl.MsgFollowUp_preciseOriginTimestamp_set
    __swig_getmethods__["preciseOriginTimestamp"] = _epl.MsgFollowUp_preciseOriginTimestamp_get
    if _newclass:preciseOriginTimestamp = _swig_property(_epl.MsgFollowUp_preciseOriginTimestamp_get, _epl.MsgFollowUp_preciseOriginTimestamp_set)
    def __init__(self, *args): 
        this = _epl.new_MsgFollowUp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgFollowUp
    __del__ = lambda self : None;
MsgFollowUp_swigregister = _epl.MsgFollowUp_swigregister
MsgFollowUp_swigregister(MsgFollowUp)

class MsgDelayResp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgDelayResp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgDelayResp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delayReceiptTimestamp"] = _epl.MsgDelayResp_delayReceiptTimestamp_set
    __swig_getmethods__["delayReceiptTimestamp"] = _epl.MsgDelayResp_delayReceiptTimestamp_get
    if _newclass:delayReceiptTimestamp = _swig_property(_epl.MsgDelayResp_delayReceiptTimestamp_get, _epl.MsgDelayResp_delayReceiptTimestamp_set)
    __swig_setmethods__["requestingSourceCommunicationTechnology"] = _epl.MsgDelayResp_requestingSourceCommunicationTechnology_set
    __swig_getmethods__["requestingSourceCommunicationTechnology"] = _epl.MsgDelayResp_requestingSourceCommunicationTechnology_get
    if _newclass:requestingSourceCommunicationTechnology = _swig_property(_epl.MsgDelayResp_requestingSourceCommunicationTechnology_get, _epl.MsgDelayResp_requestingSourceCommunicationTechnology_set)
    __swig_setmethods__["requestingSourceUuid"] = _epl.MsgDelayResp_requestingSourceUuid_set
    __swig_getmethods__["requestingSourceUuid"] = _epl.MsgDelayResp_requestingSourceUuid_get
    if _newclass:requestingSourceUuid = _swig_property(_epl.MsgDelayResp_requestingSourceUuid_get, _epl.MsgDelayResp_requestingSourceUuid_set)
    __swig_setmethods__["requestingSourcePortId"] = _epl.MsgDelayResp_requestingSourcePortId_set
    __swig_getmethods__["requestingSourcePortId"] = _epl.MsgDelayResp_requestingSourcePortId_get
    if _newclass:requestingSourcePortId = _swig_property(_epl.MsgDelayResp_requestingSourcePortId_get, _epl.MsgDelayResp_requestingSourcePortId_set)
    __swig_setmethods__["requestingSourceSequenceId"] = _epl.MsgDelayResp_requestingSourceSequenceId_set
    __swig_getmethods__["requestingSourceSequenceId"] = _epl.MsgDelayResp_requestingSourceSequenceId_get
    if _newclass:requestingSourceSequenceId = _swig_property(_epl.MsgDelayResp_requestingSourceSequenceId_get, _epl.MsgDelayResp_requestingSourceSequenceId_set)
    def __init__(self, *args): 
        this = _epl.new_MsgDelayResp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgDelayResp
    __del__ = lambda self : None;
MsgDelayResp_swigregister = _epl.MsgDelayResp_swigregister
MsgDelayResp_swigregister(MsgDelayResp)

class MsgManagementPayload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload, name)
    __repr__ = _swig_repr
    __swig_getmethods__["foreign"] = _epl.MsgManagementPayload_foreign_get
    if _newclass:foreign = _swig_property(_epl.MsgManagementPayload_foreign_get)
    __swig_getmethods__["globalTime"] = _epl.MsgManagementPayload_globalTime_get
    if _newclass:globalTime = _swig_property(_epl.MsgManagementPayload_globalTime_get)
    __swig_getmethods__["port"] = _epl.MsgManagementPayload_port_get
    if _newclass:port = _swig_property(_epl.MsgManagementPayload_port_get)
    __swig_getmethods__["parent"] = _epl.MsgManagementPayload_parent_get
    if _newclass:parent = _swig_property(_epl.MsgManagementPayload_parent_get)
    __swig_getmethods__["current"] = _epl.MsgManagementPayload_current_get
    if _newclass:current = _swig_property(_epl.MsgManagementPayload_current_get)
    __swig_getmethods__["defaultData"] = _epl.MsgManagementPayload_defaultData_get
    if _newclass:defaultData = _swig_property(_epl.MsgManagementPayload_defaultData_get)
    __swig_getmethods__["clockIdentity"] = _epl.MsgManagementPayload_clockIdentity_get
    if _newclass:clockIdentity = _swig_property(_epl.MsgManagementPayload_clockIdentity_get)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload
    __del__ = lambda self : None;
MsgManagementPayload_swigregister = _epl.MsgManagementPayload_swigregister
MsgManagementPayload_swigregister(MsgManagementPayload)

class MsgManagementPayload_foreign(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_foreign, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_foreign, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnedPortNumber"] = _epl.MsgManagementPayload_foreign_returnedPortNumber_set
    __swig_getmethods__["returnedPortNumber"] = _epl.MsgManagementPayload_foreign_returnedPortNumber_get
    if _newclass:returnedPortNumber = _swig_property(_epl.MsgManagementPayload_foreign_returnedPortNumber_get, _epl.MsgManagementPayload_foreign_returnedPortNumber_set)
    __swig_setmethods__["returnedRecordNumber"] = _epl.MsgManagementPayload_foreign_returnedRecordNumber_set
    __swig_getmethods__["returnedRecordNumber"] = _epl.MsgManagementPayload_foreign_returnedRecordNumber_get
    if _newclass:returnedRecordNumber = _swig_property(_epl.MsgManagementPayload_foreign_returnedRecordNumber_get, _epl.MsgManagementPayload_foreign_returnedRecordNumber_set)
    __swig_setmethods__["foreignMasterCommunicationTechnology"] = _epl.MsgManagementPayload_foreign_foreignMasterCommunicationTechnology_set
    __swig_getmethods__["foreignMasterCommunicationTechnology"] = _epl.MsgManagementPayload_foreign_foreignMasterCommunicationTechnology_get
    if _newclass:foreignMasterCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_foreign_foreignMasterCommunicationTechnology_get, _epl.MsgManagementPayload_foreign_foreignMasterCommunicationTechnology_set)
    __swig_setmethods__["foreignMasterUuid"] = _epl.MsgManagementPayload_foreign_foreignMasterUuid_set
    __swig_getmethods__["foreignMasterUuid"] = _epl.MsgManagementPayload_foreign_foreignMasterUuid_get
    if _newclass:foreignMasterUuid = _swig_property(_epl.MsgManagementPayload_foreign_foreignMasterUuid_get, _epl.MsgManagementPayload_foreign_foreignMasterUuid_set)
    __swig_setmethods__["foreignMasterPortId"] = _epl.MsgManagementPayload_foreign_foreignMasterPortId_set
    __swig_getmethods__["foreignMasterPortId"] = _epl.MsgManagementPayload_foreign_foreignMasterPortId_get
    if _newclass:foreignMasterPortId = _swig_property(_epl.MsgManagementPayload_foreign_foreignMasterPortId_get, _epl.MsgManagementPayload_foreign_foreignMasterPortId_set)
    __swig_setmethods__["foreignMasterSyncs"] = _epl.MsgManagementPayload_foreign_foreignMasterSyncs_set
    __swig_getmethods__["foreignMasterSyncs"] = _epl.MsgManagementPayload_foreign_foreignMasterSyncs_get
    if _newclass:foreignMasterSyncs = _swig_property(_epl.MsgManagementPayload_foreign_foreignMasterSyncs_get, _epl.MsgManagementPayload_foreign_foreignMasterSyncs_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_foreign(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_foreign
    __del__ = lambda self : None;
MsgManagementPayload_foreign_swigregister = _epl.MsgManagementPayload_foreign_swigregister
MsgManagementPayload_foreign_swigregister(MsgManagementPayload_foreign)

class MsgManagementPayload_globalTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_globalTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_globalTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["localTime"] = _epl.MsgManagementPayload_globalTime_localTime_set
    __swig_getmethods__["localTime"] = _epl.MsgManagementPayload_globalTime_localTime_get
    if _newclass:localTime = _swig_property(_epl.MsgManagementPayload_globalTime_localTime_get, _epl.MsgManagementPayload_globalTime_localTime_set)
    __swig_setmethods__["currentUtcOffset"] = _epl.MsgManagementPayload_globalTime_currentUtcOffset_set
    __swig_getmethods__["currentUtcOffset"] = _epl.MsgManagementPayload_globalTime_currentUtcOffset_get
    if _newclass:currentUtcOffset = _swig_property(_epl.MsgManagementPayload_globalTime_currentUtcOffset_get, _epl.MsgManagementPayload_globalTime_currentUtcOffset_set)
    __swig_setmethods__["leap59"] = _epl.MsgManagementPayload_globalTime_leap59_set
    __swig_getmethods__["leap59"] = _epl.MsgManagementPayload_globalTime_leap59_get
    if _newclass:leap59 = _swig_property(_epl.MsgManagementPayload_globalTime_leap59_get, _epl.MsgManagementPayload_globalTime_leap59_set)
    __swig_setmethods__["leap61"] = _epl.MsgManagementPayload_globalTime_leap61_set
    __swig_getmethods__["leap61"] = _epl.MsgManagementPayload_globalTime_leap61_get
    if _newclass:leap61 = _swig_property(_epl.MsgManagementPayload_globalTime_leap61_get, _epl.MsgManagementPayload_globalTime_leap61_set)
    __swig_setmethods__["epochNumber"] = _epl.MsgManagementPayload_globalTime_epochNumber_set
    __swig_getmethods__["epochNumber"] = _epl.MsgManagementPayload_globalTime_epochNumber_get
    if _newclass:epochNumber = _swig_property(_epl.MsgManagementPayload_globalTime_epochNumber_get, _epl.MsgManagementPayload_globalTime_epochNumber_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_globalTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_globalTime
    __del__ = lambda self : None;
MsgManagementPayload_globalTime_swigregister = _epl.MsgManagementPayload_globalTime_swigregister
MsgManagementPayload_globalTime_swigregister(MsgManagementPayload_globalTime)

class MsgManagementPayload_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnedPortNumber"] = _epl.MsgManagementPayload_port_returnedPortNumber_set
    __swig_getmethods__["returnedPortNumber"] = _epl.MsgManagementPayload_port_returnedPortNumber_get
    if _newclass:returnedPortNumber = _swig_property(_epl.MsgManagementPayload_port_returnedPortNumber_get, _epl.MsgManagementPayload_port_returnedPortNumber_set)
    __swig_setmethods__["portState"] = _epl.MsgManagementPayload_port_portState_set
    __swig_getmethods__["portState"] = _epl.MsgManagementPayload_port_portState_get
    if _newclass:portState = _swig_property(_epl.MsgManagementPayload_port_portState_get, _epl.MsgManagementPayload_port_portState_set)
    __swig_setmethods__["lastSyncEventSequenceNumber"] = _epl.MsgManagementPayload_port_lastSyncEventSequenceNumber_set
    __swig_getmethods__["lastSyncEventSequenceNumber"] = _epl.MsgManagementPayload_port_lastSyncEventSequenceNumber_get
    if _newclass:lastSyncEventSequenceNumber = _swig_property(_epl.MsgManagementPayload_port_lastSyncEventSequenceNumber_get, _epl.MsgManagementPayload_port_lastSyncEventSequenceNumber_set)
    __swig_setmethods__["lastGeneralEventSequenceNumber"] = _epl.MsgManagementPayload_port_lastGeneralEventSequenceNumber_set
    __swig_getmethods__["lastGeneralEventSequenceNumber"] = _epl.MsgManagementPayload_port_lastGeneralEventSequenceNumber_get
    if _newclass:lastGeneralEventSequenceNumber = _swig_property(_epl.MsgManagementPayload_port_lastGeneralEventSequenceNumber_get, _epl.MsgManagementPayload_port_lastGeneralEventSequenceNumber_set)
    __swig_setmethods__["portCommunicationTechnology"] = _epl.MsgManagementPayload_port_portCommunicationTechnology_set
    __swig_getmethods__["portCommunicationTechnology"] = _epl.MsgManagementPayload_port_portCommunicationTechnology_get
    if _newclass:portCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_port_portCommunicationTechnology_get, _epl.MsgManagementPayload_port_portCommunicationTechnology_set)
    __swig_setmethods__["portUuidField"] = _epl.MsgManagementPayload_port_portUuidField_set
    __swig_getmethods__["portUuidField"] = _epl.MsgManagementPayload_port_portUuidField_get
    if _newclass:portUuidField = _swig_property(_epl.MsgManagementPayload_port_portUuidField_get, _epl.MsgManagementPayload_port_portUuidField_set)
    __swig_setmethods__["portIdField"] = _epl.MsgManagementPayload_port_portIdField_set
    __swig_getmethods__["portIdField"] = _epl.MsgManagementPayload_port_portIdField_get
    if _newclass:portIdField = _swig_property(_epl.MsgManagementPayload_port_portIdField_get, _epl.MsgManagementPayload_port_portIdField_set)
    __swig_setmethods__["burstEnabled"] = _epl.MsgManagementPayload_port_burstEnabled_set
    __swig_getmethods__["burstEnabled"] = _epl.MsgManagementPayload_port_burstEnabled_get
    if _newclass:burstEnabled = _swig_property(_epl.MsgManagementPayload_port_burstEnabled_get, _epl.MsgManagementPayload_port_burstEnabled_set)
    __swig_setmethods__["subdomainAddressOctets"] = _epl.MsgManagementPayload_port_subdomainAddressOctets_set
    __swig_getmethods__["subdomainAddressOctets"] = _epl.MsgManagementPayload_port_subdomainAddressOctets_get
    if _newclass:subdomainAddressOctets = _swig_property(_epl.MsgManagementPayload_port_subdomainAddressOctets_get, _epl.MsgManagementPayload_port_subdomainAddressOctets_set)
    __swig_setmethods__["eventPortAddressOctets"] = _epl.MsgManagementPayload_port_eventPortAddressOctets_set
    __swig_getmethods__["eventPortAddressOctets"] = _epl.MsgManagementPayload_port_eventPortAddressOctets_get
    if _newclass:eventPortAddressOctets = _swig_property(_epl.MsgManagementPayload_port_eventPortAddressOctets_get, _epl.MsgManagementPayload_port_eventPortAddressOctets_set)
    __swig_setmethods__["generalPortAddressOctets"] = _epl.MsgManagementPayload_port_generalPortAddressOctets_set
    __swig_getmethods__["generalPortAddressOctets"] = _epl.MsgManagementPayload_port_generalPortAddressOctets_get
    if _newclass:generalPortAddressOctets = _swig_property(_epl.MsgManagementPayload_port_generalPortAddressOctets_get, _epl.MsgManagementPayload_port_generalPortAddressOctets_set)
    __swig_setmethods__["subdomainAddress"] = _epl.MsgManagementPayload_port_subdomainAddress_set
    __swig_getmethods__["subdomainAddress"] = _epl.MsgManagementPayload_port_subdomainAddress_get
    if _newclass:subdomainAddress = _swig_property(_epl.MsgManagementPayload_port_subdomainAddress_get, _epl.MsgManagementPayload_port_subdomainAddress_set)
    __swig_setmethods__["eventPortAddress"] = _epl.MsgManagementPayload_port_eventPortAddress_set
    __swig_getmethods__["eventPortAddress"] = _epl.MsgManagementPayload_port_eventPortAddress_get
    if _newclass:eventPortAddress = _swig_property(_epl.MsgManagementPayload_port_eventPortAddress_get, _epl.MsgManagementPayload_port_eventPortAddress_set)
    __swig_setmethods__["generalPortAddress"] = _epl.MsgManagementPayload_port_generalPortAddress_set
    __swig_getmethods__["generalPortAddress"] = _epl.MsgManagementPayload_port_generalPortAddress_get
    if _newclass:generalPortAddress = _swig_property(_epl.MsgManagementPayload_port_generalPortAddress_get, _epl.MsgManagementPayload_port_generalPortAddress_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_port(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_port
    __del__ = lambda self : None;
MsgManagementPayload_port_swigregister = _epl.MsgManagementPayload_port_swigregister
MsgManagementPayload_port_swigregister(MsgManagementPayload_port)

class MsgManagementPayload_parent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_parent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_parent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parentCommunicationTechnology"] = _epl.MsgManagementPayload_parent_parentCommunicationTechnology_set
    __swig_getmethods__["parentCommunicationTechnology"] = _epl.MsgManagementPayload_parent_parentCommunicationTechnology_get
    if _newclass:parentCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_parent_parentCommunicationTechnology_get, _epl.MsgManagementPayload_parent_parentCommunicationTechnology_set)
    __swig_setmethods__["parentUuid"] = _epl.MsgManagementPayload_parent_parentUuid_set
    __swig_getmethods__["parentUuid"] = _epl.MsgManagementPayload_parent_parentUuid_get
    if _newclass:parentUuid = _swig_property(_epl.MsgManagementPayload_parent_parentUuid_get, _epl.MsgManagementPayload_parent_parentUuid_set)
    __swig_setmethods__["parentPortId"] = _epl.MsgManagementPayload_parent_parentPortId_set
    __swig_getmethods__["parentPortId"] = _epl.MsgManagementPayload_parent_parentPortId_get
    if _newclass:parentPortId = _swig_property(_epl.MsgManagementPayload_parent_parentPortId_get, _epl.MsgManagementPayload_parent_parentPortId_set)
    __swig_setmethods__["parentLastSyncSequenceNumber"] = _epl.MsgManagementPayload_parent_parentLastSyncSequenceNumber_set
    __swig_getmethods__["parentLastSyncSequenceNumber"] = _epl.MsgManagementPayload_parent_parentLastSyncSequenceNumber_get
    if _newclass:parentLastSyncSequenceNumber = _swig_property(_epl.MsgManagementPayload_parent_parentLastSyncSequenceNumber_get, _epl.MsgManagementPayload_parent_parentLastSyncSequenceNumber_set)
    __swig_setmethods__["parentFollowupCapable"] = _epl.MsgManagementPayload_parent_parentFollowupCapable_set
    __swig_getmethods__["parentFollowupCapable"] = _epl.MsgManagementPayload_parent_parentFollowupCapable_get
    if _newclass:parentFollowupCapable = _swig_property(_epl.MsgManagementPayload_parent_parentFollowupCapable_get, _epl.MsgManagementPayload_parent_parentFollowupCapable_set)
    __swig_setmethods__["parentExternalTiming"] = _epl.MsgManagementPayload_parent_parentExternalTiming_set
    __swig_getmethods__["parentExternalTiming"] = _epl.MsgManagementPayload_parent_parentExternalTiming_get
    if _newclass:parentExternalTiming = _swig_property(_epl.MsgManagementPayload_parent_parentExternalTiming_get, _epl.MsgManagementPayload_parent_parentExternalTiming_set)
    __swig_setmethods__["parentVariance"] = _epl.MsgManagementPayload_parent_parentVariance_set
    __swig_getmethods__["parentVariance"] = _epl.MsgManagementPayload_parent_parentVariance_get
    if _newclass:parentVariance = _swig_property(_epl.MsgManagementPayload_parent_parentVariance_get, _epl.MsgManagementPayload_parent_parentVariance_set)
    __swig_setmethods__["parentStats"] = _epl.MsgManagementPayload_parent_parentStats_set
    __swig_getmethods__["parentStats"] = _epl.MsgManagementPayload_parent_parentStats_get
    if _newclass:parentStats = _swig_property(_epl.MsgManagementPayload_parent_parentStats_get, _epl.MsgManagementPayload_parent_parentStats_set)
    __swig_setmethods__["observedVariance"] = _epl.MsgManagementPayload_parent_observedVariance_set
    __swig_getmethods__["observedVariance"] = _epl.MsgManagementPayload_parent_observedVariance_get
    if _newclass:observedVariance = _swig_property(_epl.MsgManagementPayload_parent_observedVariance_get, _epl.MsgManagementPayload_parent_observedVariance_set)
    __swig_setmethods__["observedDrift"] = _epl.MsgManagementPayload_parent_observedDrift_set
    __swig_getmethods__["observedDrift"] = _epl.MsgManagementPayload_parent_observedDrift_get
    if _newclass:observedDrift = _swig_property(_epl.MsgManagementPayload_parent_observedDrift_get, _epl.MsgManagementPayload_parent_observedDrift_set)
    __swig_setmethods__["utcReasonable"] = _epl.MsgManagementPayload_parent_utcReasonable_set
    __swig_getmethods__["utcReasonable"] = _epl.MsgManagementPayload_parent_utcReasonable_get
    if _newclass:utcReasonable = _swig_property(_epl.MsgManagementPayload_parent_utcReasonable_get, _epl.MsgManagementPayload_parent_utcReasonable_set)
    __swig_setmethods__["grandmasterCommunicationTechnology"] = _epl.MsgManagementPayload_parent_grandmasterCommunicationTechnology_set
    __swig_getmethods__["grandmasterCommunicationTechnology"] = _epl.MsgManagementPayload_parent_grandmasterCommunicationTechnology_get
    if _newclass:grandmasterCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_parent_grandmasterCommunicationTechnology_get, _epl.MsgManagementPayload_parent_grandmasterCommunicationTechnology_set)
    __swig_setmethods__["grandmasterUuidField"] = _epl.MsgManagementPayload_parent_grandmasterUuidField_set
    __swig_getmethods__["grandmasterUuidField"] = _epl.MsgManagementPayload_parent_grandmasterUuidField_get
    if _newclass:grandmasterUuidField = _swig_property(_epl.MsgManagementPayload_parent_grandmasterUuidField_get, _epl.MsgManagementPayload_parent_grandmasterUuidField_set)
    __swig_setmethods__["grandmasterPortIdField"] = _epl.MsgManagementPayload_parent_grandmasterPortIdField_set
    __swig_getmethods__["grandmasterPortIdField"] = _epl.MsgManagementPayload_parent_grandmasterPortIdField_get
    if _newclass:grandmasterPortIdField = _swig_property(_epl.MsgManagementPayload_parent_grandmasterPortIdField_get, _epl.MsgManagementPayload_parent_grandmasterPortIdField_set)
    __swig_setmethods__["grandmasterStratum"] = _epl.MsgManagementPayload_parent_grandmasterStratum_set
    __swig_getmethods__["grandmasterStratum"] = _epl.MsgManagementPayload_parent_grandmasterStratum_get
    if _newclass:grandmasterStratum = _swig_property(_epl.MsgManagementPayload_parent_grandmasterStratum_get, _epl.MsgManagementPayload_parent_grandmasterStratum_set)
    __swig_setmethods__["grandmasterIdentifier"] = _epl.MsgManagementPayload_parent_grandmasterIdentifier_set
    __swig_getmethods__["grandmasterIdentifier"] = _epl.MsgManagementPayload_parent_grandmasterIdentifier_get
    if _newclass:grandmasterIdentifier = _swig_property(_epl.MsgManagementPayload_parent_grandmasterIdentifier_get, _epl.MsgManagementPayload_parent_grandmasterIdentifier_set)
    __swig_setmethods__["grandmasterVariance"] = _epl.MsgManagementPayload_parent_grandmasterVariance_set
    __swig_getmethods__["grandmasterVariance"] = _epl.MsgManagementPayload_parent_grandmasterVariance_get
    if _newclass:grandmasterVariance = _swig_property(_epl.MsgManagementPayload_parent_grandmasterVariance_get, _epl.MsgManagementPayload_parent_grandmasterVariance_set)
    __swig_setmethods__["grandmasterPreferred"] = _epl.MsgManagementPayload_parent_grandmasterPreferred_set
    __swig_getmethods__["grandmasterPreferred"] = _epl.MsgManagementPayload_parent_grandmasterPreferred_get
    if _newclass:grandmasterPreferred = _swig_property(_epl.MsgManagementPayload_parent_grandmasterPreferred_get, _epl.MsgManagementPayload_parent_grandmasterPreferred_set)
    __swig_setmethods__["grandmasterIsBoundaryClock"] = _epl.MsgManagementPayload_parent_grandmasterIsBoundaryClock_set
    __swig_getmethods__["grandmasterIsBoundaryClock"] = _epl.MsgManagementPayload_parent_grandmasterIsBoundaryClock_get
    if _newclass:grandmasterIsBoundaryClock = _swig_property(_epl.MsgManagementPayload_parent_grandmasterIsBoundaryClock_get, _epl.MsgManagementPayload_parent_grandmasterIsBoundaryClock_set)
    __swig_setmethods__["grandmasterSequenceNumber"] = _epl.MsgManagementPayload_parent_grandmasterSequenceNumber_set
    __swig_getmethods__["grandmasterSequenceNumber"] = _epl.MsgManagementPayload_parent_grandmasterSequenceNumber_get
    if _newclass:grandmasterSequenceNumber = _swig_property(_epl.MsgManagementPayload_parent_grandmasterSequenceNumber_get, _epl.MsgManagementPayload_parent_grandmasterSequenceNumber_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_parent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_parent
    __del__ = lambda self : None;
MsgManagementPayload_parent_swigregister = _epl.MsgManagementPayload_parent_swigregister
MsgManagementPayload_parent_swigregister(MsgManagementPayload_parent)

class MsgManagementPayload_current(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_current, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_current, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stepsRemoved"] = _epl.MsgManagementPayload_current_stepsRemoved_set
    __swig_getmethods__["stepsRemoved"] = _epl.MsgManagementPayload_current_stepsRemoved_get
    if _newclass:stepsRemoved = _swig_property(_epl.MsgManagementPayload_current_stepsRemoved_get, _epl.MsgManagementPayload_current_stepsRemoved_set)
    __swig_setmethods__["offsetFromMaster"] = _epl.MsgManagementPayload_current_offsetFromMaster_set
    __swig_getmethods__["offsetFromMaster"] = _epl.MsgManagementPayload_current_offsetFromMaster_get
    if _newclass:offsetFromMaster = _swig_property(_epl.MsgManagementPayload_current_offsetFromMaster_get, _epl.MsgManagementPayload_current_offsetFromMaster_set)
    __swig_setmethods__["oneWayDelay"] = _epl.MsgManagementPayload_current_oneWayDelay_set
    __swig_getmethods__["oneWayDelay"] = _epl.MsgManagementPayload_current_oneWayDelay_get
    if _newclass:oneWayDelay = _swig_property(_epl.MsgManagementPayload_current_oneWayDelay_get, _epl.MsgManagementPayload_current_oneWayDelay_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_current(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_current
    __del__ = lambda self : None;
MsgManagementPayload_current_swigregister = _epl.MsgManagementPayload_current_swigregister
MsgManagementPayload_current_swigregister(MsgManagementPayload_current)

class MsgManagementPayload_defaultData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_defaultData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_defaultData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clockCommunicationTechnology"] = _epl.MsgManagementPayload_defaultData_clockCommunicationTechnology_set
    __swig_getmethods__["clockCommunicationTechnology"] = _epl.MsgManagementPayload_defaultData_clockCommunicationTechnology_get
    if _newclass:clockCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_defaultData_clockCommunicationTechnology_get, _epl.MsgManagementPayload_defaultData_clockCommunicationTechnology_set)
    __swig_setmethods__["clockUuidField"] = _epl.MsgManagementPayload_defaultData_clockUuidField_set
    __swig_getmethods__["clockUuidField"] = _epl.MsgManagementPayload_defaultData_clockUuidField_get
    if _newclass:clockUuidField = _swig_property(_epl.MsgManagementPayload_defaultData_clockUuidField_get, _epl.MsgManagementPayload_defaultData_clockUuidField_set)
    __swig_setmethods__["clockPortField"] = _epl.MsgManagementPayload_defaultData_clockPortField_set
    __swig_getmethods__["clockPortField"] = _epl.MsgManagementPayload_defaultData_clockPortField_get
    if _newclass:clockPortField = _swig_property(_epl.MsgManagementPayload_defaultData_clockPortField_get, _epl.MsgManagementPayload_defaultData_clockPortField_set)
    __swig_setmethods__["clockStratum"] = _epl.MsgManagementPayload_defaultData_clockStratum_set
    __swig_getmethods__["clockStratum"] = _epl.MsgManagementPayload_defaultData_clockStratum_get
    if _newclass:clockStratum = _swig_property(_epl.MsgManagementPayload_defaultData_clockStratum_get, _epl.MsgManagementPayload_defaultData_clockStratum_set)
    __swig_setmethods__["clockIdentifier"] = _epl.MsgManagementPayload_defaultData_clockIdentifier_set
    __swig_getmethods__["clockIdentifier"] = _epl.MsgManagementPayload_defaultData_clockIdentifier_get
    if _newclass:clockIdentifier = _swig_property(_epl.MsgManagementPayload_defaultData_clockIdentifier_get, _epl.MsgManagementPayload_defaultData_clockIdentifier_set)
    __swig_setmethods__["clockVariance"] = _epl.MsgManagementPayload_defaultData_clockVariance_set
    __swig_getmethods__["clockVariance"] = _epl.MsgManagementPayload_defaultData_clockVariance_get
    if _newclass:clockVariance = _swig_property(_epl.MsgManagementPayload_defaultData_clockVariance_get, _epl.MsgManagementPayload_defaultData_clockVariance_set)
    __swig_setmethods__["clockFollowupCapable"] = _epl.MsgManagementPayload_defaultData_clockFollowupCapable_set
    __swig_getmethods__["clockFollowupCapable"] = _epl.MsgManagementPayload_defaultData_clockFollowupCapable_get
    if _newclass:clockFollowupCapable = _swig_property(_epl.MsgManagementPayload_defaultData_clockFollowupCapable_get, _epl.MsgManagementPayload_defaultData_clockFollowupCapable_set)
    __swig_setmethods__["preferred"] = _epl.MsgManagementPayload_defaultData_preferred_set
    __swig_getmethods__["preferred"] = _epl.MsgManagementPayload_defaultData_preferred_get
    if _newclass:preferred = _swig_property(_epl.MsgManagementPayload_defaultData_preferred_get, _epl.MsgManagementPayload_defaultData_preferred_set)
    __swig_setmethods__["initializable"] = _epl.MsgManagementPayload_defaultData_initializable_set
    __swig_getmethods__["initializable"] = _epl.MsgManagementPayload_defaultData_initializable_get
    if _newclass:initializable = _swig_property(_epl.MsgManagementPayload_defaultData_initializable_get, _epl.MsgManagementPayload_defaultData_initializable_set)
    __swig_setmethods__["externalTiming"] = _epl.MsgManagementPayload_defaultData_externalTiming_set
    __swig_getmethods__["externalTiming"] = _epl.MsgManagementPayload_defaultData_externalTiming_get
    if _newclass:externalTiming = _swig_property(_epl.MsgManagementPayload_defaultData_externalTiming_get, _epl.MsgManagementPayload_defaultData_externalTiming_set)
    __swig_setmethods__["isBoundaryClock"] = _epl.MsgManagementPayload_defaultData_isBoundaryClock_set
    __swig_getmethods__["isBoundaryClock"] = _epl.MsgManagementPayload_defaultData_isBoundaryClock_get
    if _newclass:isBoundaryClock = _swig_property(_epl.MsgManagementPayload_defaultData_isBoundaryClock_get, _epl.MsgManagementPayload_defaultData_isBoundaryClock_set)
    __swig_setmethods__["syncInterval"] = _epl.MsgManagementPayload_defaultData_syncInterval_set
    __swig_getmethods__["syncInterval"] = _epl.MsgManagementPayload_defaultData_syncInterval_get
    if _newclass:syncInterval = _swig_property(_epl.MsgManagementPayload_defaultData_syncInterval_get, _epl.MsgManagementPayload_defaultData_syncInterval_set)
    __swig_setmethods__["subdomainName"] = _epl.MsgManagementPayload_defaultData_subdomainName_set
    __swig_getmethods__["subdomainName"] = _epl.MsgManagementPayload_defaultData_subdomainName_get
    if _newclass:subdomainName = _swig_property(_epl.MsgManagementPayload_defaultData_subdomainName_get, _epl.MsgManagementPayload_defaultData_subdomainName_set)
    __swig_setmethods__["numberPorts"] = _epl.MsgManagementPayload_defaultData_numberPorts_set
    __swig_getmethods__["numberPorts"] = _epl.MsgManagementPayload_defaultData_numberPorts_get
    if _newclass:numberPorts = _swig_property(_epl.MsgManagementPayload_defaultData_numberPorts_get, _epl.MsgManagementPayload_defaultData_numberPorts_set)
    __swig_setmethods__["numberForeignRecords"] = _epl.MsgManagementPayload_defaultData_numberForeignRecords_set
    __swig_getmethods__["numberForeignRecords"] = _epl.MsgManagementPayload_defaultData_numberForeignRecords_get
    if _newclass:numberForeignRecords = _swig_property(_epl.MsgManagementPayload_defaultData_numberForeignRecords_get, _epl.MsgManagementPayload_defaultData_numberForeignRecords_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_defaultData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_defaultData
    __del__ = lambda self : None;
MsgManagementPayload_defaultData_swigregister = _epl.MsgManagementPayload_defaultData_swigregister
MsgManagementPayload_defaultData_swigregister(MsgManagementPayload_defaultData)

class MsgManagementPayload_clockIdentity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagementPayload_clockIdentity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagementPayload_clockIdentity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clockCommunicationTechnology"] = _epl.MsgManagementPayload_clockIdentity_clockCommunicationTechnology_set
    __swig_getmethods__["clockCommunicationTechnology"] = _epl.MsgManagementPayload_clockIdentity_clockCommunicationTechnology_get
    if _newclass:clockCommunicationTechnology = _swig_property(_epl.MsgManagementPayload_clockIdentity_clockCommunicationTechnology_get, _epl.MsgManagementPayload_clockIdentity_clockCommunicationTechnology_set)
    __swig_setmethods__["clockUuidField"] = _epl.MsgManagementPayload_clockIdentity_clockUuidField_set
    __swig_getmethods__["clockUuidField"] = _epl.MsgManagementPayload_clockIdentity_clockUuidField_get
    if _newclass:clockUuidField = _swig_property(_epl.MsgManagementPayload_clockIdentity_clockUuidField_get, _epl.MsgManagementPayload_clockIdentity_clockUuidField_set)
    __swig_setmethods__["clockPortField"] = _epl.MsgManagementPayload_clockIdentity_clockPortField_set
    __swig_getmethods__["clockPortField"] = _epl.MsgManagementPayload_clockIdentity_clockPortField_get
    if _newclass:clockPortField = _swig_property(_epl.MsgManagementPayload_clockIdentity_clockPortField_get, _epl.MsgManagementPayload_clockIdentity_clockPortField_set)
    __swig_setmethods__["manufacturerIdentity"] = _epl.MsgManagementPayload_clockIdentity_manufacturerIdentity_set
    __swig_getmethods__["manufacturerIdentity"] = _epl.MsgManagementPayload_clockIdentity_manufacturerIdentity_get
    if _newclass:manufacturerIdentity = _swig_property(_epl.MsgManagementPayload_clockIdentity_manufacturerIdentity_get, _epl.MsgManagementPayload_clockIdentity_manufacturerIdentity_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagementPayload_clockIdentity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagementPayload_clockIdentity
    __del__ = lambda self : None;
MsgManagementPayload_clockIdentity_swigregister = _epl.MsgManagementPayload_clockIdentity_swigregister
MsgManagementPayload_clockIdentity_swigregister(MsgManagementPayload_clockIdentity)

class MsgManagement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgManagement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgManagement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targetCommunicationTechnology"] = _epl.MsgManagement_targetCommunicationTechnology_set
    __swig_getmethods__["targetCommunicationTechnology"] = _epl.MsgManagement_targetCommunicationTechnology_get
    if _newclass:targetCommunicationTechnology = _swig_property(_epl.MsgManagement_targetCommunicationTechnology_get, _epl.MsgManagement_targetCommunicationTechnology_set)
    __swig_setmethods__["targetUuid"] = _epl.MsgManagement_targetUuid_set
    __swig_getmethods__["targetUuid"] = _epl.MsgManagement_targetUuid_get
    if _newclass:targetUuid = _swig_property(_epl.MsgManagement_targetUuid_get, _epl.MsgManagement_targetUuid_set)
    __swig_setmethods__["targetPortId"] = _epl.MsgManagement_targetPortId_set
    __swig_getmethods__["targetPortId"] = _epl.MsgManagement_targetPortId_get
    if _newclass:targetPortId = _swig_property(_epl.MsgManagement_targetPortId_get, _epl.MsgManagement_targetPortId_set)
    __swig_setmethods__["startingBoundaryHops"] = _epl.MsgManagement_startingBoundaryHops_set
    __swig_getmethods__["startingBoundaryHops"] = _epl.MsgManagement_startingBoundaryHops_get
    if _newclass:startingBoundaryHops = _swig_property(_epl.MsgManagement_startingBoundaryHops_get, _epl.MsgManagement_startingBoundaryHops_set)
    __swig_setmethods__["boundaryHops"] = _epl.MsgManagement_boundaryHops_set
    __swig_getmethods__["boundaryHops"] = _epl.MsgManagement_boundaryHops_get
    if _newclass:boundaryHops = _swig_property(_epl.MsgManagement_boundaryHops_get, _epl.MsgManagement_boundaryHops_set)
    __swig_setmethods__["managementMessageKey"] = _epl.MsgManagement_managementMessageKey_set
    __swig_getmethods__["managementMessageKey"] = _epl.MsgManagement_managementMessageKey_get
    if _newclass:managementMessageKey = _swig_property(_epl.MsgManagement_managementMessageKey_get, _epl.MsgManagement_managementMessageKey_set)
    __swig_setmethods__["parameterLength"] = _epl.MsgManagement_parameterLength_set
    __swig_getmethods__["parameterLength"] = _epl.MsgManagement_parameterLength_get
    if _newclass:parameterLength = _swig_property(_epl.MsgManagement_parameterLength_get, _epl.MsgManagement_parameterLength_set)
    __swig_setmethods__["recordKey"] = _epl.MsgManagement_recordKey_set
    __swig_getmethods__["recordKey"] = _epl.MsgManagement_recordKey_get
    if _newclass:recordKey = _swig_property(_epl.MsgManagement_recordKey_get, _epl.MsgManagement_recordKey_set)
    __swig_setmethods__["payload"] = _epl.MsgManagement_payload_set
    __swig_getmethods__["payload"] = _epl.MsgManagement_payload_get
    if _newclass:payload = _swig_property(_epl.MsgManagement_payload_get, _epl.MsgManagement_payload_set)
    def __init__(self, *args): 
        this = _epl.new_MsgManagement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_MsgManagement
    __del__ = lambda self : None;
MsgManagement_swigregister = _epl.MsgManagement_swigregister
MsgManagement_swigregister(MsgManagement)

class ForeignMasterRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForeignMasterRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForeignMasterRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["foreign_master_communication_technology"] = _epl.ForeignMasterRecord_foreign_master_communication_technology_set
    __swig_getmethods__["foreign_master_communication_technology"] = _epl.ForeignMasterRecord_foreign_master_communication_technology_get
    if _newclass:foreign_master_communication_technology = _swig_property(_epl.ForeignMasterRecord_foreign_master_communication_technology_get, _epl.ForeignMasterRecord_foreign_master_communication_technology_set)
    __swig_setmethods__["foreign_master_uuid"] = _epl.ForeignMasterRecord_foreign_master_uuid_set
    __swig_getmethods__["foreign_master_uuid"] = _epl.ForeignMasterRecord_foreign_master_uuid_get
    if _newclass:foreign_master_uuid = _swig_property(_epl.ForeignMasterRecord_foreign_master_uuid_get, _epl.ForeignMasterRecord_foreign_master_uuid_set)
    __swig_setmethods__["foreign_master_port_id"] = _epl.ForeignMasterRecord_foreign_master_port_id_set
    __swig_getmethods__["foreign_master_port_id"] = _epl.ForeignMasterRecord_foreign_master_port_id_get
    if _newclass:foreign_master_port_id = _swig_property(_epl.ForeignMasterRecord_foreign_master_port_id_get, _epl.ForeignMasterRecord_foreign_master_port_id_set)
    __swig_setmethods__["foreign_master_syncs"] = _epl.ForeignMasterRecord_foreign_master_syncs_set
    __swig_getmethods__["foreign_master_syncs"] = _epl.ForeignMasterRecord_foreign_master_syncs_get
    if _newclass:foreign_master_syncs = _swig_property(_epl.ForeignMasterRecord_foreign_master_syncs_get, _epl.ForeignMasterRecord_foreign_master_syncs_set)
    __swig_setmethods__["header"] = _epl.ForeignMasterRecord_header_set
    __swig_getmethods__["header"] = _epl.ForeignMasterRecord_header_get
    if _newclass:header = _swig_property(_epl.ForeignMasterRecord_header_get, _epl.ForeignMasterRecord_header_set)
    __swig_setmethods__["sync"] = _epl.ForeignMasterRecord_sync_set
    __swig_getmethods__["sync"] = _epl.ForeignMasterRecord_sync_get
    if _newclass:sync = _swig_property(_epl.ForeignMasterRecord_sync_get, _epl.ForeignMasterRecord_sync_set)
    def __init__(self, *args): 
        this = _epl.new_ForeignMasterRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_ForeignMasterRecord
    __del__ = lambda self : None;
ForeignMasterRecord_swigregister = _epl.ForeignMasterRecord_swigregister
ForeignMasterRecord_swigregister(ForeignMasterRecord)

class RunTimeOpts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunTimeOpts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunTimeOpts, name)
    __repr__ = _swig_repr
    __swig_setmethods__["revA1SiliconFlag"] = _epl.RunTimeOpts_revA1SiliconFlag_set
    __swig_getmethods__["revA1SiliconFlag"] = _epl.RunTimeOpts_revA1SiliconFlag_get
    if _newclass:revA1SiliconFlag = _swig_property(_epl.RunTimeOpts_revA1SiliconFlag_get, _epl.RunTimeOpts_revA1SiliconFlag_set)
    __swig_setmethods__["syncInterval"] = _epl.RunTimeOpts_syncInterval_set
    __swig_getmethods__["syncInterval"] = _epl.RunTimeOpts_syncInterval_get
    if _newclass:syncInterval = _swig_property(_epl.RunTimeOpts_syncInterval_get, _epl.RunTimeOpts_syncInterval_set)
    __swig_setmethods__["subdomainName"] = _epl.RunTimeOpts_subdomainName_set
    __swig_getmethods__["subdomainName"] = _epl.RunTimeOpts_subdomainName_get
    if _newclass:subdomainName = _swig_property(_epl.RunTimeOpts_subdomainName_get, _epl.RunTimeOpts_subdomainName_set)
    __swig_setmethods__["clockIdentifier"] = _epl.RunTimeOpts_clockIdentifier_set
    __swig_getmethods__["clockIdentifier"] = _epl.RunTimeOpts_clockIdentifier_get
    if _newclass:clockIdentifier = _swig_property(_epl.RunTimeOpts_clockIdentifier_get, _epl.RunTimeOpts_clockIdentifier_set)
    __swig_setmethods__["clockVariance"] = _epl.RunTimeOpts_clockVariance_set
    __swig_getmethods__["clockVariance"] = _epl.RunTimeOpts_clockVariance_get
    if _newclass:clockVariance = _swig_property(_epl.RunTimeOpts_clockVariance_get, _epl.RunTimeOpts_clockVariance_set)
    __swig_setmethods__["clockStratum"] = _epl.RunTimeOpts_clockStratum_set
    __swig_getmethods__["clockStratum"] = _epl.RunTimeOpts_clockStratum_get
    if _newclass:clockStratum = _swig_property(_epl.RunTimeOpts_clockStratum_get, _epl.RunTimeOpts_clockStratum_set)
    __swig_setmethods__["clockPreferred"] = _epl.RunTimeOpts_clockPreferred_set
    __swig_getmethods__["clockPreferred"] = _epl.RunTimeOpts_clockPreferred_get
    if _newclass:clockPreferred = _swig_property(_epl.RunTimeOpts_clockPreferred_get, _epl.RunTimeOpts_clockPreferred_set)
    __swig_setmethods__["currentUtcOffset"] = _epl.RunTimeOpts_currentUtcOffset_set
    __swig_getmethods__["currentUtcOffset"] = _epl.RunTimeOpts_currentUtcOffset_get
    if _newclass:currentUtcOffset = _swig_property(_epl.RunTimeOpts_currentUtcOffset_get, _epl.RunTimeOpts_currentUtcOffset_set)
    __swig_setmethods__["epochNumber"] = _epl.RunTimeOpts_epochNumber_set
    __swig_getmethods__["epochNumber"] = _epl.RunTimeOpts_epochNumber_get
    if _newclass:epochNumber = _swig_property(_epl.RunTimeOpts_epochNumber_get, _epl.RunTimeOpts_epochNumber_set)
    __swig_setmethods__["ifaceName"] = _epl.RunTimeOpts_ifaceName_set
    __swig_getmethods__["ifaceName"] = _epl.RunTimeOpts_ifaceName_get
    if _newclass:ifaceName = _swig_property(_epl.RunTimeOpts_ifaceName_get, _epl.RunTimeOpts_ifaceName_set)
    __swig_setmethods__["noResetClock"] = _epl.RunTimeOpts_noResetClock_set
    __swig_getmethods__["noResetClock"] = _epl.RunTimeOpts_noResetClock_get
    if _newclass:noResetClock = _swig_property(_epl.RunTimeOpts_noResetClock_get, _epl.RunTimeOpts_noResetClock_set)
    __swig_setmethods__["noAdjust"] = _epl.RunTimeOpts_noAdjust_set
    __swig_getmethods__["noAdjust"] = _epl.RunTimeOpts_noAdjust_get
    if _newclass:noAdjust = _swig_property(_epl.RunTimeOpts_noAdjust_get, _epl.RunTimeOpts_noAdjust_set)
    __swig_setmethods__["displayStats"] = _epl.RunTimeOpts_displayStats_set
    __swig_getmethods__["displayStats"] = _epl.RunTimeOpts_displayStats_get
    if _newclass:displayStats = _swig_property(_epl.RunTimeOpts_displayStats_get, _epl.RunTimeOpts_displayStats_set)
    __swig_setmethods__["csvStats"] = _epl.RunTimeOpts_csvStats_set
    __swig_getmethods__["csvStats"] = _epl.RunTimeOpts_csvStats_get
    if _newclass:csvStats = _swig_property(_epl.RunTimeOpts_csvStats_get, _epl.RunTimeOpts_csvStats_set)
    __swig_setmethods__["directAddress"] = _epl.RunTimeOpts_directAddress_set
    __swig_getmethods__["directAddress"] = _epl.RunTimeOpts_directAddress_get
    if _newclass:directAddress = _swig_property(_epl.RunTimeOpts_directAddress_get, _epl.RunTimeOpts_directAddress_set)
    __swig_setmethods__["ap"] = _epl.RunTimeOpts_ap_set
    __swig_getmethods__["ap"] = _epl.RunTimeOpts_ap_get
    if _newclass:ap = _swig_property(_epl.RunTimeOpts_ap_get, _epl.RunTimeOpts_ap_set)
    __swig_setmethods__["ai"] = _epl.RunTimeOpts_ai_set
    __swig_getmethods__["ai"] = _epl.RunTimeOpts_ai_get
    if _newclass:ai = _swig_property(_epl.RunTimeOpts_ai_get, _epl.RunTimeOpts_ai_set)
    __swig_setmethods__["s"] = _epl.RunTimeOpts_s_set
    __swig_getmethods__["s"] = _epl.RunTimeOpts_s_get
    if _newclass:s = _swig_property(_epl.RunTimeOpts_s_get, _epl.RunTimeOpts_s_set)
    __swig_setmethods__["inboundLatency"] = _epl.RunTimeOpts_inboundLatency_set
    __swig_getmethods__["inboundLatency"] = _epl.RunTimeOpts_inboundLatency_get
    if _newclass:inboundLatency = _swig_property(_epl.RunTimeOpts_inboundLatency_get, _epl.RunTimeOpts_inboundLatency_set)
    __swig_setmethods__["outboundLatency"] = _epl.RunTimeOpts_outboundLatency_set
    __swig_getmethods__["outboundLatency"] = _epl.RunTimeOpts_outboundLatency_get
    if _newclass:outboundLatency = _swig_property(_epl.RunTimeOpts_outboundLatency_get, _epl.RunTimeOpts_outboundLatency_set)
    __swig_setmethods__["max_foreign_records"] = _epl.RunTimeOpts_max_foreign_records_set
    __swig_getmethods__["max_foreign_records"] = _epl.RunTimeOpts_max_foreign_records_get
    if _newclass:max_foreign_records = _swig_property(_epl.RunTimeOpts_max_foreign_records_get, _epl.RunTimeOpts_max_foreign_records_set)
    __swig_setmethods__["slaveOnly"] = _epl.RunTimeOpts_slaveOnly_set
    __swig_getmethods__["slaveOnly"] = _epl.RunTimeOpts_slaveOnly_get
    if _newclass:slaveOnly = _swig_property(_epl.RunTimeOpts_slaveOnly_get, _epl.RunTimeOpts_slaveOnly_set)
    __swig_setmethods__["probe"] = _epl.RunTimeOpts_probe_set
    __swig_getmethods__["probe"] = _epl.RunTimeOpts_probe_get
    if _newclass:probe = _swig_property(_epl.RunTimeOpts_probe_get, _epl.RunTimeOpts_probe_set)
    __swig_setmethods__["probe_management_key"] = _epl.RunTimeOpts_probe_management_key_set
    __swig_getmethods__["probe_management_key"] = _epl.RunTimeOpts_probe_management_key_get
    if _newclass:probe_management_key = _swig_property(_epl.RunTimeOpts_probe_management_key_get, _epl.RunTimeOpts_probe_management_key_set)
    __swig_setmethods__["probe_record_key"] = _epl.RunTimeOpts_probe_record_key_set
    __swig_getmethods__["probe_record_key"] = _epl.RunTimeOpts_probe_record_key_get
    if _newclass:probe_record_key = _swig_property(_epl.RunTimeOpts_probe_record_key_get, _epl.RunTimeOpts_probe_record_key_set)
    __swig_setmethods__["halfEpoch"] = _epl.RunTimeOpts_halfEpoch_set
    __swig_getmethods__["halfEpoch"] = _epl.RunTimeOpts_halfEpoch_get
    if _newclass:halfEpoch = _swig_property(_epl.RunTimeOpts_halfEpoch_get, _epl.RunTimeOpts_halfEpoch_set)
    __swig_setmethods__["destMACAddress"] = _epl.RunTimeOpts_destMACAddress_set
    __swig_getmethods__["destMACAddress"] = _epl.RunTimeOpts_destMACAddress_get
    if _newclass:destMACAddress = _swig_property(_epl.RunTimeOpts_destMACAddress_get, _epl.RunTimeOpts_destMACAddress_set)
    __swig_setmethods__["localMACAddress"] = _epl.RunTimeOpts_localMACAddress_set
    __swig_getmethods__["localMACAddress"] = _epl.RunTimeOpts_localMACAddress_get
    if _newclass:localMACAddress = _swig_property(_epl.RunTimeOpts_localMACAddress_get, _epl.RunTimeOpts_localMACAddress_set)
    __swig_setmethods__["udpChksumEnable"] = _epl.RunTimeOpts_udpChksumEnable_set
    __swig_getmethods__["udpChksumEnable"] = _epl.RunTimeOpts_udpChksumEnable_get
    if _newclass:udpChksumEnable = _swig_property(_epl.RunTimeOpts_udpChksumEnable_get, _epl.RunTimeOpts_udpChksumEnable_set)
    __swig_setmethods__["srcIPAddress"] = _epl.RunTimeOpts_srcIPAddress_set
    __swig_getmethods__["srcIPAddress"] = _epl.RunTimeOpts_srcIPAddress_get
    if _newclass:srcIPAddress = _swig_property(_epl.RunTimeOpts_srcIPAddress_get, _epl.RunTimeOpts_srcIPAddress_set)
    __swig_setmethods__["eplPortHandle"] = _epl.RunTimeOpts_eplPortHandle_set
    __swig_getmethods__["eplPortHandle"] = _epl.RunTimeOpts_eplPortHandle_get
    if _newclass:eplPortHandle = _swig_property(_epl.RunTimeOpts_eplPortHandle_get, _epl.RunTimeOpts_eplPortHandle_set)
    __swig_setmethods__["oaiHandle"] = _epl.RunTimeOpts_oaiHandle_set
    __swig_getmethods__["oaiHandle"] = _epl.RunTimeOpts_oaiHandle_get
    if _newclass:oaiHandle = _swig_property(_epl.RunTimeOpts_oaiHandle_get, _epl.RunTimeOpts_oaiHandle_set)
    __swig_setmethods__["forceBMCFlag"] = _epl.RunTimeOpts_forceBMCFlag_set
    __swig_getmethods__["forceBMCFlag"] = _epl.RunTimeOpts_forceBMCFlag_get
    if _newclass:forceBMCFlag = _swig_property(_epl.RunTimeOpts_forceBMCFlag_get, _epl.RunTimeOpts_forceBMCFlag_set)
    __swig_setmethods__["useOneStepFlag"] = _epl.RunTimeOpts_useOneStepFlag_set
    __swig_getmethods__["useOneStepFlag"] = _epl.RunTimeOpts_useOneStepFlag_get
    if _newclass:useOneStepFlag = _swig_property(_epl.RunTimeOpts_useOneStepFlag_get, _epl.RunTimeOpts_useOneStepFlag_set)
    __swig_setmethods__["useTempRateFlag"] = _epl.RunTimeOpts_useTempRateFlag_set
    __swig_getmethods__["useTempRateFlag"] = _epl.RunTimeOpts_useTempRateFlag_get
    if _newclass:useTempRateFlag = _swig_property(_epl.RunTimeOpts_useTempRateFlag_get, _epl.RunTimeOpts_useTempRateFlag_set)
    __swig_setmethods__["tempRateLength"] = _epl.RunTimeOpts_tempRateLength_set
    __swig_getmethods__["tempRateLength"] = _epl.RunTimeOpts_tempRateLength_get
    if _newclass:tempRateLength = _swig_property(_epl.RunTimeOpts_tempRateLength_get, _epl.RunTimeOpts_tempRateLength_set)
    __swig_setmethods__["limiterEnable"] = _epl.RunTimeOpts_limiterEnable_set
    __swig_getmethods__["limiterEnable"] = _epl.RunTimeOpts_limiterEnable_get
    if _newclass:limiterEnable = _swig_property(_epl.RunTimeOpts_limiterEnable_get, _epl.RunTimeOpts_limiterEnable_set)
    __swig_setmethods__["limiterThresh"] = _epl.RunTimeOpts_limiterThresh_set
    __swig_getmethods__["limiterThresh"] = _epl.RunTimeOpts_limiterThresh_get
    if _newclass:limiterThresh = _swig_property(_epl.RunTimeOpts_limiterThresh_get, _epl.RunTimeOpts_limiterThresh_set)
    __swig_setmethods__["limiterThreshMax"] = _epl.RunTimeOpts_limiterThreshMax_set
    __swig_getmethods__["limiterThreshMax"] = _epl.RunTimeOpts_limiterThreshMax_get
    if _newclass:limiterThreshMax = _swig_property(_epl.RunTimeOpts_limiterThreshMax_get, _epl.RunTimeOpts_limiterThreshMax_set)
    __swig_setmethods__["limiterGoodThresh"] = _epl.RunTimeOpts_limiterGoodThresh_set
    __swig_getmethods__["limiterGoodThresh"] = _epl.RunTimeOpts_limiterGoodThresh_get
    if _newclass:limiterGoodThresh = _swig_property(_epl.RunTimeOpts_limiterGoodThresh_get, _epl.RunTimeOpts_limiterGoodThresh_set)
    __swig_setmethods__["limiterLimitMultiplier"] = _epl.RunTimeOpts_limiterLimitMultiplier_set
    __swig_getmethods__["limiterLimitMultiplier"] = _epl.RunTimeOpts_limiterLimitMultiplier_get
    if _newclass:limiterLimitMultiplier = _swig_property(_epl.RunTimeOpts_limiterLimitMultiplier_get, _epl.RunTimeOpts_limiterLimitMultiplier_set)
    __swig_setmethods__["syncAdjustValue"] = _epl.RunTimeOpts_syncAdjustValue_set
    __swig_getmethods__["syncAdjustValue"] = _epl.RunTimeOpts_syncAdjustValue_get
    if _newclass:syncAdjustValue = _swig_property(_epl.RunTimeOpts_syncAdjustValue_get, _epl.RunTimeOpts_syncAdjustValue_set)
    __swig_setmethods__["delayReqAdjustValue"] = _epl.RunTimeOpts_delayReqAdjustValue_set
    __swig_getmethods__["delayReqAdjustValue"] = _epl.RunTimeOpts_delayReqAdjustValue_get
    if _newclass:delayReqAdjustValue = _swig_property(_epl.RunTimeOpts_delayReqAdjustValue_get, _epl.RunTimeOpts_delayReqAdjustValue_set)
    __swig_setmethods__["numRateSamples"] = _epl.RunTimeOpts_numRateSamples_set
    __swig_getmethods__["numRateSamples"] = _epl.RunTimeOpts_numRateSamples_get
    if _newclass:numRateSamples = _swig_property(_epl.RunTimeOpts_numRateSamples_get, _epl.RunTimeOpts_numRateSamples_set)
    __swig_setmethods__["numRateAvgs"] = _epl.RunTimeOpts_numRateAvgs_set
    __swig_getmethods__["numRateAvgs"] = _epl.RunTimeOpts_numRateAvgs_get
    if _newclass:numRateAvgs = _swig_property(_epl.RunTimeOpts_numRateAvgs_get, _epl.RunTimeOpts_numRateAvgs_set)
    __swig_setmethods__["numOneWayAvgSamples"] = _epl.RunTimeOpts_numOneWayAvgSamples_set
    __swig_getmethods__["numOneWayAvgSamples"] = _epl.RunTimeOpts_numOneWayAvgSamples_get
    if _newclass:numOneWayAvgSamples = _swig_property(_epl.RunTimeOpts_numOneWayAvgSamples_get, _epl.RunTimeOpts_numOneWayAvgSamples_set)
    __swig_setmethods__["syncEthMode"] = _epl.RunTimeOpts_syncEthMode_set
    __swig_getmethods__["syncEthMode"] = _epl.RunTimeOpts_syncEthMode_get
    if _newclass:syncEthMode = _swig_property(_epl.RunTimeOpts_syncEthMode_get, _epl.RunTimeOpts_syncEthMode_set)
    __swig_setmethods__["phaseAlignClkoutFlag"] = _epl.RunTimeOpts_phaseAlignClkoutFlag_set
    __swig_getmethods__["phaseAlignClkoutFlag"] = _epl.RunTimeOpts_phaseAlignClkoutFlag_get
    if _newclass:phaseAlignClkoutFlag = _swig_property(_epl.RunTimeOpts_phaseAlignClkoutFlag_get, _epl.RunTimeOpts_phaseAlignClkoutFlag_set)
    __swig_setmethods__["clkOutEnableFlag"] = _epl.RunTimeOpts_clkOutEnableFlag_set
    __swig_getmethods__["clkOutEnableFlag"] = _epl.RunTimeOpts_clkOutEnableFlag_get
    if _newclass:clkOutEnableFlag = _swig_property(_epl.RunTimeOpts_clkOutEnableFlag_get, _epl.RunTimeOpts_clkOutEnableFlag_set)
    __swig_setmethods__["clkOutDivide"] = _epl.RunTimeOpts_clkOutDivide_set
    __swig_getmethods__["clkOutDivide"] = _epl.RunTimeOpts_clkOutDivide_get
    if _newclass:clkOutDivide = _swig_property(_epl.RunTimeOpts_clkOutDivide_get, _epl.RunTimeOpts_clkOutDivide_set)
    __swig_setmethods__["clkOutSpeed"] = _epl.RunTimeOpts_clkOutSpeed_set
    __swig_getmethods__["clkOutSpeed"] = _epl.RunTimeOpts_clkOutSpeed_get
    if _newclass:clkOutSpeed = _swig_property(_epl.RunTimeOpts_clkOutSpeed_get, _epl.RunTimeOpts_clkOutSpeed_set)
    __swig_setmethods__["clkOutSource"] = _epl.RunTimeOpts_clkOutSource_set
    __swig_getmethods__["clkOutSource"] = _epl.RunTimeOpts_clkOutSource_get
    if _newclass:clkOutSource = _swig_property(_epl.RunTimeOpts_clkOutSource_get, _epl.RunTimeOpts_clkOutSource_set)
    __swig_setmethods__["ppsEnableFlag"] = _epl.RunTimeOpts_ppsEnableFlag_set
    __swig_getmethods__["ppsEnableFlag"] = _epl.RunTimeOpts_ppsEnableFlag_get
    if _newclass:ppsEnableFlag = _swig_property(_epl.RunTimeOpts_ppsEnableFlag_get, _epl.RunTimeOpts_ppsEnableFlag_set)
    __swig_setmethods__["ppsStartTime"] = _epl.RunTimeOpts_ppsStartTime_set
    __swig_getmethods__["ppsStartTime"] = _epl.RunTimeOpts_ppsStartTime_get
    if _newclass:ppsStartTime = _swig_property(_epl.RunTimeOpts_ppsStartTime_get, _epl.RunTimeOpts_ppsStartTime_set)
    __swig_setmethods__["ppsRiseOrFallFlag"] = _epl.RunTimeOpts_ppsRiseOrFallFlag_set
    __swig_getmethods__["ppsRiseOrFallFlag"] = _epl.RunTimeOpts_ppsRiseOrFallFlag_get
    if _newclass:ppsRiseOrFallFlag = _swig_property(_epl.RunTimeOpts_ppsRiseOrFallFlag_get, _epl.RunTimeOpts_ppsRiseOrFallFlag_set)
    __swig_setmethods__["ppsGpio"] = _epl.RunTimeOpts_ppsGpio_set
    __swig_getmethods__["ppsGpio"] = _epl.RunTimeOpts_ppsGpio_get
    if _newclass:ppsGpio = _swig_property(_epl.RunTimeOpts_ppsGpio_get, _epl.RunTimeOpts_ppsGpio_set)
    __swig_setmethods__["clkOutPeriod"] = _epl.RunTimeOpts_clkOutPeriod_set
    __swig_getmethods__["clkOutPeriod"] = _epl.RunTimeOpts_clkOutPeriod_get
    if _newclass:clkOutPeriod = _swig_property(_epl.RunTimeOpts_clkOutPeriod_get, _epl.RunTimeOpts_clkOutPeriod_set)
    __swig_setmethods__["haveLoopbackedSend"] = _epl.RunTimeOpts_haveLoopbackedSend_set
    __swig_getmethods__["haveLoopbackedSend"] = _epl.RunTimeOpts_haveLoopbackedSend_get
    if _newclass:haveLoopbackedSend = _swig_property(_epl.RunTimeOpts_haveLoopbackedSend_get, _epl.RunTimeOpts_haveLoopbackedSend_set)
    __swig_setmethods__["lastSendLength"] = _epl.RunTimeOpts_lastSendLength_set
    __swig_getmethods__["lastSendLength"] = _epl.RunTimeOpts_lastSendLength_get
    if _newclass:lastSendLength = _swig_property(_epl.RunTimeOpts_lastSendLength_get, _epl.RunTimeOpts_lastSendLength_set)
    __swig_setmethods__["txBuff"] = _epl.RunTimeOpts_txBuff_set
    __swig_getmethods__["txBuff"] = _epl.RunTimeOpts_txBuff_get
    if _newclass:txBuff = _swig_property(_epl.RunTimeOpts_txBuff_get, _epl.RunTimeOpts_txBuff_set)
    __swig_setmethods__["rxBuff"] = _epl.RunTimeOpts_rxBuff_set
    __swig_getmethods__["rxBuff"] = _epl.RunTimeOpts_rxBuff_get
    if _newclass:rxBuff = _swig_property(_epl.RunTimeOpts_rxBuff_get, _epl.RunTimeOpts_rxBuff_set)
    def __init__(self, *args): 
        this = _epl.new_RunTimeOpts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_RunTimeOpts
    __del__ = lambda self : None;
RunTimeOpts_swigregister = _epl.RunTimeOpts_swigregister
RunTimeOpts_swigregister(RunTimeOpts)

class PtpClock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtpClock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtpClock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clock_communication_technology"] = _epl.PtpClock_clock_communication_technology_set
    __swig_getmethods__["clock_communication_technology"] = _epl.PtpClock_clock_communication_technology_get
    if _newclass:clock_communication_technology = _swig_property(_epl.PtpClock_clock_communication_technology_get, _epl.PtpClock_clock_communication_technology_set)
    __swig_setmethods__["clock_uuid_field"] = _epl.PtpClock_clock_uuid_field_set
    __swig_getmethods__["clock_uuid_field"] = _epl.PtpClock_clock_uuid_field_get
    if _newclass:clock_uuid_field = _swig_property(_epl.PtpClock_clock_uuid_field_get, _epl.PtpClock_clock_uuid_field_set)
    __swig_setmethods__["clock_port_id_field"] = _epl.PtpClock_clock_port_id_field_set
    __swig_getmethods__["clock_port_id_field"] = _epl.PtpClock_clock_port_id_field_get
    if _newclass:clock_port_id_field = _swig_property(_epl.PtpClock_clock_port_id_field_get, _epl.PtpClock_clock_port_id_field_set)
    __swig_setmethods__["clock_stratum"] = _epl.PtpClock_clock_stratum_set
    __swig_getmethods__["clock_stratum"] = _epl.PtpClock_clock_stratum_get
    if _newclass:clock_stratum = _swig_property(_epl.PtpClock_clock_stratum_get, _epl.PtpClock_clock_stratum_set)
    __swig_setmethods__["clock_identifier"] = _epl.PtpClock_clock_identifier_set
    __swig_getmethods__["clock_identifier"] = _epl.PtpClock_clock_identifier_get
    if _newclass:clock_identifier = _swig_property(_epl.PtpClock_clock_identifier_get, _epl.PtpClock_clock_identifier_set)
    __swig_setmethods__["clock_variance"] = _epl.PtpClock_clock_variance_set
    __swig_getmethods__["clock_variance"] = _epl.PtpClock_clock_variance_get
    if _newclass:clock_variance = _swig_property(_epl.PtpClock_clock_variance_get, _epl.PtpClock_clock_variance_set)
    __swig_setmethods__["clock_followup_capable"] = _epl.PtpClock_clock_followup_capable_set
    __swig_getmethods__["clock_followup_capable"] = _epl.PtpClock_clock_followup_capable_get
    if _newclass:clock_followup_capable = _swig_property(_epl.PtpClock_clock_followup_capable_get, _epl.PtpClock_clock_followup_capable_set)
    __swig_setmethods__["preferred"] = _epl.PtpClock_preferred_set
    __swig_getmethods__["preferred"] = _epl.PtpClock_preferred_get
    if _newclass:preferred = _swig_property(_epl.PtpClock_preferred_get, _epl.PtpClock_preferred_set)
    __swig_setmethods__["initializable"] = _epl.PtpClock_initializable_set
    __swig_getmethods__["initializable"] = _epl.PtpClock_initializable_get
    if _newclass:initializable = _swig_property(_epl.PtpClock_initializable_get, _epl.PtpClock_initializable_set)
    __swig_setmethods__["external_timing"] = _epl.PtpClock_external_timing_set
    __swig_getmethods__["external_timing"] = _epl.PtpClock_external_timing_get
    if _newclass:external_timing = _swig_property(_epl.PtpClock_external_timing_get, _epl.PtpClock_external_timing_set)
    __swig_setmethods__["is_boundary_clock"] = _epl.PtpClock_is_boundary_clock_set
    __swig_getmethods__["is_boundary_clock"] = _epl.PtpClock_is_boundary_clock_get
    if _newclass:is_boundary_clock = _swig_property(_epl.PtpClock_is_boundary_clock_get, _epl.PtpClock_is_boundary_clock_set)
    __swig_setmethods__["sync_interval"] = _epl.PtpClock_sync_interval_set
    __swig_getmethods__["sync_interval"] = _epl.PtpClock_sync_interval_get
    if _newclass:sync_interval = _swig_property(_epl.PtpClock_sync_interval_get, _epl.PtpClock_sync_interval_set)
    __swig_setmethods__["subdomain_name"] = _epl.PtpClock_subdomain_name_set
    __swig_getmethods__["subdomain_name"] = _epl.PtpClock_subdomain_name_get
    if _newclass:subdomain_name = _swig_property(_epl.PtpClock_subdomain_name_get, _epl.PtpClock_subdomain_name_set)
    __swig_setmethods__["number_ports"] = _epl.PtpClock_number_ports_set
    __swig_getmethods__["number_ports"] = _epl.PtpClock_number_ports_get
    if _newclass:number_ports = _swig_property(_epl.PtpClock_number_ports_get, _epl.PtpClock_number_ports_set)
    __swig_setmethods__["number_foreign_records"] = _epl.PtpClock_number_foreign_records_set
    __swig_getmethods__["number_foreign_records"] = _epl.PtpClock_number_foreign_records_get
    if _newclass:number_foreign_records = _swig_property(_epl.PtpClock_number_foreign_records_get, _epl.PtpClock_number_foreign_records_set)
    __swig_setmethods__["steps_removed"] = _epl.PtpClock_steps_removed_set
    __swig_getmethods__["steps_removed"] = _epl.PtpClock_steps_removed_get
    if _newclass:steps_removed = _swig_property(_epl.PtpClock_steps_removed_get, _epl.PtpClock_steps_removed_set)
    __swig_setmethods__["offset_from_master"] = _epl.PtpClock_offset_from_master_set
    __swig_getmethods__["offset_from_master"] = _epl.PtpClock_offset_from_master_get
    if _newclass:offset_from_master = _swig_property(_epl.PtpClock_offset_from_master_get, _epl.PtpClock_offset_from_master_set)
    __swig_setmethods__["one_way_delay"] = _epl.PtpClock_one_way_delay_set
    __swig_getmethods__["one_way_delay"] = _epl.PtpClock_one_way_delay_get
    if _newclass:one_way_delay = _swig_property(_epl.PtpClock_one_way_delay_get, _epl.PtpClock_one_way_delay_set)
    __swig_setmethods__["parent_communication_technology"] = _epl.PtpClock_parent_communication_technology_set
    __swig_getmethods__["parent_communication_technology"] = _epl.PtpClock_parent_communication_technology_get
    if _newclass:parent_communication_technology = _swig_property(_epl.PtpClock_parent_communication_technology_get, _epl.PtpClock_parent_communication_technology_set)
    __swig_setmethods__["parent_uuid"] = _epl.PtpClock_parent_uuid_set
    __swig_getmethods__["parent_uuid"] = _epl.PtpClock_parent_uuid_get
    if _newclass:parent_uuid = _swig_property(_epl.PtpClock_parent_uuid_get, _epl.PtpClock_parent_uuid_set)
    __swig_setmethods__["parent_port_id"] = _epl.PtpClock_parent_port_id_set
    __swig_getmethods__["parent_port_id"] = _epl.PtpClock_parent_port_id_get
    if _newclass:parent_port_id = _swig_property(_epl.PtpClock_parent_port_id_get, _epl.PtpClock_parent_port_id_set)
    __swig_setmethods__["parent_last_sync_sequence_number"] = _epl.PtpClock_parent_last_sync_sequence_number_set
    __swig_getmethods__["parent_last_sync_sequence_number"] = _epl.PtpClock_parent_last_sync_sequence_number_get
    if _newclass:parent_last_sync_sequence_number = _swig_property(_epl.PtpClock_parent_last_sync_sequence_number_get, _epl.PtpClock_parent_last_sync_sequence_number_set)
    __swig_setmethods__["parent_followup_capable"] = _epl.PtpClock_parent_followup_capable_set
    __swig_getmethods__["parent_followup_capable"] = _epl.PtpClock_parent_followup_capable_get
    if _newclass:parent_followup_capable = _swig_property(_epl.PtpClock_parent_followup_capable_get, _epl.PtpClock_parent_followup_capable_set)
    __swig_setmethods__["parent_external_timing"] = _epl.PtpClock_parent_external_timing_set
    __swig_getmethods__["parent_external_timing"] = _epl.PtpClock_parent_external_timing_get
    if _newclass:parent_external_timing = _swig_property(_epl.PtpClock_parent_external_timing_get, _epl.PtpClock_parent_external_timing_set)
    __swig_setmethods__["parent_variance"] = _epl.PtpClock_parent_variance_set
    __swig_getmethods__["parent_variance"] = _epl.PtpClock_parent_variance_get
    if _newclass:parent_variance = _swig_property(_epl.PtpClock_parent_variance_get, _epl.PtpClock_parent_variance_set)
    __swig_setmethods__["parent_stats"] = _epl.PtpClock_parent_stats_set
    __swig_getmethods__["parent_stats"] = _epl.PtpClock_parent_stats_get
    if _newclass:parent_stats = _swig_property(_epl.PtpClock_parent_stats_get, _epl.PtpClock_parent_stats_set)
    __swig_setmethods__["observed_variance"] = _epl.PtpClock_observed_variance_set
    __swig_getmethods__["observed_variance"] = _epl.PtpClock_observed_variance_get
    if _newclass:observed_variance = _swig_property(_epl.PtpClock_observed_variance_get, _epl.PtpClock_observed_variance_set)
    __swig_setmethods__["observed_drift"] = _epl.PtpClock_observed_drift_set
    __swig_getmethods__["observed_drift"] = _epl.PtpClock_observed_drift_get
    if _newclass:observed_drift = _swig_property(_epl.PtpClock_observed_drift_get, _epl.PtpClock_observed_drift_set)
    __swig_setmethods__["utc_reasonable"] = _epl.PtpClock_utc_reasonable_set
    __swig_getmethods__["utc_reasonable"] = _epl.PtpClock_utc_reasonable_get
    if _newclass:utc_reasonable = _swig_property(_epl.PtpClock_utc_reasonable_get, _epl.PtpClock_utc_reasonable_set)
    __swig_setmethods__["grandmaster_communication_technology"] = _epl.PtpClock_grandmaster_communication_technology_set
    __swig_getmethods__["grandmaster_communication_technology"] = _epl.PtpClock_grandmaster_communication_technology_get
    if _newclass:grandmaster_communication_technology = _swig_property(_epl.PtpClock_grandmaster_communication_technology_get, _epl.PtpClock_grandmaster_communication_technology_set)
    __swig_setmethods__["grandmaster_uuid_field"] = _epl.PtpClock_grandmaster_uuid_field_set
    __swig_getmethods__["grandmaster_uuid_field"] = _epl.PtpClock_grandmaster_uuid_field_get
    if _newclass:grandmaster_uuid_field = _swig_property(_epl.PtpClock_grandmaster_uuid_field_get, _epl.PtpClock_grandmaster_uuid_field_set)
    __swig_setmethods__["grandmaster_port_id_field"] = _epl.PtpClock_grandmaster_port_id_field_set
    __swig_getmethods__["grandmaster_port_id_field"] = _epl.PtpClock_grandmaster_port_id_field_get
    if _newclass:grandmaster_port_id_field = _swig_property(_epl.PtpClock_grandmaster_port_id_field_get, _epl.PtpClock_grandmaster_port_id_field_set)
    __swig_setmethods__["grandmaster_stratum"] = _epl.PtpClock_grandmaster_stratum_set
    __swig_getmethods__["grandmaster_stratum"] = _epl.PtpClock_grandmaster_stratum_get
    if _newclass:grandmaster_stratum = _swig_property(_epl.PtpClock_grandmaster_stratum_get, _epl.PtpClock_grandmaster_stratum_set)
    __swig_setmethods__["grandmaster_identifier"] = _epl.PtpClock_grandmaster_identifier_set
    __swig_getmethods__["grandmaster_identifier"] = _epl.PtpClock_grandmaster_identifier_get
    if _newclass:grandmaster_identifier = _swig_property(_epl.PtpClock_grandmaster_identifier_get, _epl.PtpClock_grandmaster_identifier_set)
    __swig_setmethods__["grandmaster_variance"] = _epl.PtpClock_grandmaster_variance_set
    __swig_getmethods__["grandmaster_variance"] = _epl.PtpClock_grandmaster_variance_get
    if _newclass:grandmaster_variance = _swig_property(_epl.PtpClock_grandmaster_variance_get, _epl.PtpClock_grandmaster_variance_set)
    __swig_setmethods__["grandmaster_preferred"] = _epl.PtpClock_grandmaster_preferred_set
    __swig_getmethods__["grandmaster_preferred"] = _epl.PtpClock_grandmaster_preferred_get
    if _newclass:grandmaster_preferred = _swig_property(_epl.PtpClock_grandmaster_preferred_get, _epl.PtpClock_grandmaster_preferred_set)
    __swig_setmethods__["grandmaster_is_boundary_clock"] = _epl.PtpClock_grandmaster_is_boundary_clock_set
    __swig_getmethods__["grandmaster_is_boundary_clock"] = _epl.PtpClock_grandmaster_is_boundary_clock_get
    if _newclass:grandmaster_is_boundary_clock = _swig_property(_epl.PtpClock_grandmaster_is_boundary_clock_get, _epl.PtpClock_grandmaster_is_boundary_clock_set)
    __swig_setmethods__["grandmaster_sequence_number"] = _epl.PtpClock_grandmaster_sequence_number_set
    __swig_getmethods__["grandmaster_sequence_number"] = _epl.PtpClock_grandmaster_sequence_number_get
    if _newclass:grandmaster_sequence_number = _swig_property(_epl.PtpClock_grandmaster_sequence_number_get, _epl.PtpClock_grandmaster_sequence_number_set)
    __swig_setmethods__["current_utc_offset"] = _epl.PtpClock_current_utc_offset_set
    __swig_getmethods__["current_utc_offset"] = _epl.PtpClock_current_utc_offset_get
    if _newclass:current_utc_offset = _swig_property(_epl.PtpClock_current_utc_offset_get, _epl.PtpClock_current_utc_offset_set)
    __swig_setmethods__["leap_59"] = _epl.PtpClock_leap_59_set
    __swig_getmethods__["leap_59"] = _epl.PtpClock_leap_59_get
    if _newclass:leap_59 = _swig_property(_epl.PtpClock_leap_59_get, _epl.PtpClock_leap_59_set)
    __swig_setmethods__["leap_61"] = _epl.PtpClock_leap_61_set
    __swig_getmethods__["leap_61"] = _epl.PtpClock_leap_61_get
    if _newclass:leap_61 = _swig_property(_epl.PtpClock_leap_61_get, _epl.PtpClock_leap_61_set)
    __swig_setmethods__["epoch_number"] = _epl.PtpClock_epoch_number_set
    __swig_getmethods__["epoch_number"] = _epl.PtpClock_epoch_number_get
    if _newclass:epoch_number = _swig_property(_epl.PtpClock_epoch_number_get, _epl.PtpClock_epoch_number_set)
    __swig_setmethods__["port_state"] = _epl.PtpClock_port_state_set
    __swig_getmethods__["port_state"] = _epl.PtpClock_port_state_get
    if _newclass:port_state = _swig_property(_epl.PtpClock_port_state_get, _epl.PtpClock_port_state_set)
    __swig_setmethods__["last_sync_event_sequence_number"] = _epl.PtpClock_last_sync_event_sequence_number_set
    __swig_getmethods__["last_sync_event_sequence_number"] = _epl.PtpClock_last_sync_event_sequence_number_get
    if _newclass:last_sync_event_sequence_number = _swig_property(_epl.PtpClock_last_sync_event_sequence_number_get, _epl.PtpClock_last_sync_event_sequence_number_set)
    __swig_setmethods__["last_general_event_sequence_number"] = _epl.PtpClock_last_general_event_sequence_number_set
    __swig_getmethods__["last_general_event_sequence_number"] = _epl.PtpClock_last_general_event_sequence_number_get
    if _newclass:last_general_event_sequence_number = _swig_property(_epl.PtpClock_last_general_event_sequence_number_get, _epl.PtpClock_last_general_event_sequence_number_set)
    __swig_setmethods__["subdomain_address"] = _epl.PtpClock_subdomain_address_set
    __swig_getmethods__["subdomain_address"] = _epl.PtpClock_subdomain_address_get
    if _newclass:subdomain_address = _swig_property(_epl.PtpClock_subdomain_address_get, _epl.PtpClock_subdomain_address_set)
    __swig_setmethods__["event_port_address"] = _epl.PtpClock_event_port_address_set
    __swig_getmethods__["event_port_address"] = _epl.PtpClock_event_port_address_get
    if _newclass:event_port_address = _swig_property(_epl.PtpClock_event_port_address_get, _epl.PtpClock_event_port_address_set)
    __swig_setmethods__["general_port_address"] = _epl.PtpClock_general_port_address_set
    __swig_getmethods__["general_port_address"] = _epl.PtpClock_general_port_address_get
    if _newclass:general_port_address = _swig_property(_epl.PtpClock_general_port_address_get, _epl.PtpClock_general_port_address_set)
    __swig_setmethods__["port_communication_technology"] = _epl.PtpClock_port_communication_technology_set
    __swig_getmethods__["port_communication_technology"] = _epl.PtpClock_port_communication_technology_get
    if _newclass:port_communication_technology = _swig_property(_epl.PtpClock_port_communication_technology_get, _epl.PtpClock_port_communication_technology_set)
    __swig_setmethods__["port_uuid_field"] = _epl.PtpClock_port_uuid_field_set
    __swig_getmethods__["port_uuid_field"] = _epl.PtpClock_port_uuid_field_get
    if _newclass:port_uuid_field = _swig_property(_epl.PtpClock_port_uuid_field_get, _epl.PtpClock_port_uuid_field_set)
    __swig_setmethods__["port_id_field"] = _epl.PtpClock_port_id_field_set
    __swig_getmethods__["port_id_field"] = _epl.PtpClock_port_id_field_get
    if _newclass:port_id_field = _swig_property(_epl.PtpClock_port_id_field_get, _epl.PtpClock_port_id_field_set)
    __swig_setmethods__["burst_enabled"] = _epl.PtpClock_burst_enabled_set
    __swig_getmethods__["burst_enabled"] = _epl.PtpClock_burst_enabled_get
    if _newclass:burst_enabled = _swig_property(_epl.PtpClock_burst_enabled_get, _epl.PtpClock_burst_enabled_set)
    __swig_setmethods__["foreign"] = _epl.PtpClock_foreign_set
    __swig_getmethods__["foreign"] = _epl.PtpClock_foreign_get
    if _newclass:foreign = _swig_property(_epl.PtpClock_foreign_get, _epl.PtpClock_foreign_set)
    __swig_setmethods__["halfEpoch"] = _epl.PtpClock_halfEpoch_set
    __swig_getmethods__["halfEpoch"] = _epl.PtpClock_halfEpoch_get
    if _newclass:halfEpoch = _swig_property(_epl.PtpClock_halfEpoch_get, _epl.PtpClock_halfEpoch_set)
    __swig_setmethods__["max_foreign_records"] = _epl.PtpClock_max_foreign_records_set
    __swig_getmethods__["max_foreign_records"] = _epl.PtpClock_max_foreign_records_get
    if _newclass:max_foreign_records = _swig_property(_epl.PtpClock_max_foreign_records_get, _epl.PtpClock_max_foreign_records_set)
    __swig_setmethods__["foreign_record_i"] = _epl.PtpClock_foreign_record_i_set
    __swig_getmethods__["foreign_record_i"] = _epl.PtpClock_foreign_record_i_get
    if _newclass:foreign_record_i = _swig_property(_epl.PtpClock_foreign_record_i_get, _epl.PtpClock_foreign_record_i_set)
    __swig_setmethods__["foreign_record_best"] = _epl.PtpClock_foreign_record_best_set
    __swig_getmethods__["foreign_record_best"] = _epl.PtpClock_foreign_record_best_get
    if _newclass:foreign_record_best = _swig_property(_epl.PtpClock_foreign_record_best_get, _epl.PtpClock_foreign_record_best_set)
    __swig_setmethods__["record_update"] = _epl.PtpClock_record_update_set
    __swig_getmethods__["record_update"] = _epl.PtpClock_record_update_get
    if _newclass:record_update = _swig_property(_epl.PtpClock_record_update_get, _epl.PtpClock_record_update_set)
    __swig_setmethods__["random_seed"] = _epl.PtpClock_random_seed_set
    __swig_getmethods__["random_seed"] = _epl.PtpClock_random_seed_get
    if _newclass:random_seed = _swig_property(_epl.PtpClock_random_seed_get, _epl.PtpClock_random_seed_set)
    __swig_setmethods__["msgTmpHeader"] = _epl.PtpClock_msgTmpHeader_set
    __swig_getmethods__["msgTmpHeader"] = _epl.PtpClock_msgTmpHeader_get
    if _newclass:msgTmpHeader = _swig_property(_epl.PtpClock_msgTmpHeader_get, _epl.PtpClock_msgTmpHeader_set)
    __swig_setmethods__["msgObuf"] = _epl.PtpClock_msgObuf_set
    __swig_getmethods__["msgObuf"] = _epl.PtpClock_msgObuf_get
    if _newclass:msgObuf = _swig_property(_epl.PtpClock_msgObuf_get, _epl.PtpClock_msgObuf_set)
    __swig_setmethods__["msgIbuf"] = _epl.PtpClock_msgIbuf_set
    __swig_getmethods__["msgIbuf"] = _epl.PtpClock_msgIbuf_get
    if _newclass:msgIbuf = _swig_property(_epl.PtpClock_msgIbuf_get, _epl.PtpClock_msgIbuf_set)
    __swig_setmethods__["master_to_slave_delay"] = _epl.PtpClock_master_to_slave_delay_set
    __swig_getmethods__["master_to_slave_delay"] = _epl.PtpClock_master_to_slave_delay_get
    if _newclass:master_to_slave_delay = _swig_property(_epl.PtpClock_master_to_slave_delay_get, _epl.PtpClock_master_to_slave_delay_set)
    __swig_setmethods__["slave_to_master_delay"] = _epl.PtpClock_slave_to_master_delay_set
    __swig_getmethods__["slave_to_master_delay"] = _epl.PtpClock_slave_to_master_delay_get
    if _newclass:slave_to_master_delay = _swig_property(_epl.PtpClock_slave_to_master_delay_get, _epl.PtpClock_slave_to_master_delay_set)
    __swig_setmethods__["delay_req_receive_time"] = _epl.PtpClock_delay_req_receive_time_set
    __swig_getmethods__["delay_req_receive_time"] = _epl.PtpClock_delay_req_receive_time_get
    if _newclass:delay_req_receive_time = _swig_property(_epl.PtpClock_delay_req_receive_time_get, _epl.PtpClock_delay_req_receive_time_set)
    __swig_setmethods__["delay_req_send_time"] = _epl.PtpClock_delay_req_send_time_set
    __swig_getmethods__["delay_req_send_time"] = _epl.PtpClock_delay_req_send_time_get
    if _newclass:delay_req_send_time = _swig_property(_epl.PtpClock_delay_req_send_time_get, _epl.PtpClock_delay_req_send_time_set)
    __swig_setmethods__["sync_receive_time"] = _epl.PtpClock_sync_receive_time_set
    __swig_getmethods__["sync_receive_time"] = _epl.PtpClock_sync_receive_time_get
    if _newclass:sync_receive_time = _swig_property(_epl.PtpClock_sync_receive_time_get, _epl.PtpClock_sync_receive_time_set)
    __swig_setmethods__["Q"] = _epl.PtpClock_Q_set
    __swig_getmethods__["Q"] = _epl.PtpClock_Q_get
    if _newclass:Q = _swig_property(_epl.PtpClock_Q_get, _epl.PtpClock_Q_set)
    __swig_setmethods__["R"] = _epl.PtpClock_R_set
    __swig_getmethods__["R"] = _epl.PtpClock_R_get
    if _newclass:R = _swig_property(_epl.PtpClock_R_get, _epl.PtpClock_R_set)
    __swig_setmethods__["sentDelayReq"] = _epl.PtpClock_sentDelayReq_set
    __swig_getmethods__["sentDelayReq"] = _epl.PtpClock_sentDelayReq_get
    if _newclass:sentDelayReq = _swig_property(_epl.PtpClock_sentDelayReq_get, _epl.PtpClock_sentDelayReq_set)
    __swig_setmethods__["sentDelayReqSequenceId"] = _epl.PtpClock_sentDelayReqSequenceId_set
    __swig_getmethods__["sentDelayReqSequenceId"] = _epl.PtpClock_sentDelayReqSequenceId_get
    if _newclass:sentDelayReqSequenceId = _swig_property(_epl.PtpClock_sentDelayReqSequenceId_get, _epl.PtpClock_sentDelayReqSequenceId_set)
    __swig_setmethods__["waitingForFollow"] = _epl.PtpClock_waitingForFollow_set
    __swig_getmethods__["waitingForFollow"] = _epl.PtpClock_waitingForFollow_get
    if _newclass:waitingForFollow = _swig_property(_epl.PtpClock_waitingForFollow_get, _epl.PtpClock_waitingForFollow_set)
    __swig_setmethods__["ofm_filt"] = _epl.PtpClock_ofm_filt_set
    __swig_getmethods__["ofm_filt"] = _epl.PtpClock_ofm_filt_get
    if _newclass:ofm_filt = _swig_property(_epl.PtpClock_ofm_filt_get, _epl.PtpClock_ofm_filt_set)
    __swig_setmethods__["owd_filt"] = _epl.PtpClock_owd_filt_set
    __swig_getmethods__["owd_filt"] = _epl.PtpClock_owd_filt_get
    if _newclass:owd_filt = _swig_property(_epl.PtpClock_owd_filt_get, _epl.PtpClock_owd_filt_set)
    __swig_setmethods__["message_activity"] = _epl.PtpClock_message_activity_set
    __swig_getmethods__["message_activity"] = _epl.PtpClock_message_activity_get
    if _newclass:message_activity = _swig_property(_epl.PtpClock_message_activity_get, _epl.PtpClock_message_activity_set)
    __swig_setmethods__["itimer"] = _epl.PtpClock_itimer_set
    __swig_getmethods__["itimer"] = _epl.PtpClock_itimer_get
    if _newclass:itimer = _swig_property(_epl.PtpClock_itimer_get, _epl.PtpClock_itimer_set)
    __swig_setmethods__["netPath"] = _epl.PtpClock_netPath_set
    __swig_getmethods__["netPath"] = _epl.PtpClock_netPath_get
    if _newclass:netPath = _swig_property(_epl.PtpClock_netPath_get, _epl.PtpClock_netPath_set)
    __swig_setmethods__["rtOpts"] = _epl.PtpClock_rtOpts_set
    __swig_getmethods__["rtOpts"] = _epl.PtpClock_rtOpts_get
    if _newclass:rtOpts = _swig_property(_epl.PtpClock_rtOpts_get, _epl.PtpClock_rtOpts_set)
    __swig_setmethods__["numSyncsSeen"] = _epl.PtpClock_numSyncsSeen_set
    __swig_getmethods__["numSyncsSeen"] = _epl.PtpClock_numSyncsSeen_get
    if _newclass:numSyncsSeen = _swig_property(_epl.PtpClock_numSyncsSeen_get, _epl.PtpClock_numSyncsSeen_set)
    __swig_setmethods__["lastOffset"] = _epl.PtpClock_lastOffset_set
    __swig_getmethods__["lastOffset"] = _epl.PtpClock_lastOffset_get
    if _newclass:lastOffset = _swig_property(_epl.PtpClock_lastOffset_get, _epl.PtpClock_lastOffset_set)
    __swig_setmethods__["currRateAdj"] = _epl.PtpClock_currRateAdj_set
    __swig_getmethods__["currRateAdj"] = _epl.PtpClock_currRateAdj_get
    if _newclass:currRateAdj = _swig_property(_epl.PtpClock_currRateAdj_get, _epl.PtpClock_currRateAdj_set)
    __swig_setmethods__["oneWayList"] = _epl.PtpClock_oneWayList_set
    __swig_getmethods__["oneWayList"] = _epl.PtpClock_oneWayList_get
    if _newclass:oneWayList = _swig_property(_epl.PtpClock_oneWayList_get, _epl.PtpClock_oneWayList_set)
    __swig_setmethods__["oneWayWriteIdx"] = _epl.PtpClock_oneWayWriteIdx_set
    __swig_getmethods__["oneWayWriteIdx"] = _epl.PtpClock_oneWayWriteIdx_get
    if _newclass:oneWayWriteIdx = _swig_property(_epl.PtpClock_oneWayWriteIdx_get, _epl.PtpClock_oneWayWriteIdx_set)
    __swig_setmethods__["numOneWayValues"] = _epl.PtpClock_numOneWayValues_set
    __swig_getmethods__["numOneWayValues"] = _epl.PtpClock_numOneWayValues_get
    if _newclass:numOneWayValues = _swig_property(_epl.PtpClock_numOneWayValues_get, _epl.PtpClock_numOneWayValues_set)
    __swig_setmethods__["oneWayAvg"] = _epl.PtpClock_oneWayAvg_set
    __swig_getmethods__["oneWayAvg"] = _epl.PtpClock_oneWayAvg_get
    if _newclass:oneWayAvg = _swig_property(_epl.PtpClock_oneWayAvg_get, _epl.PtpClock_oneWayAvg_set)
    __swig_setmethods__["ignoreNextRateFlag"] = _epl.PtpClock_ignoreNextRateFlag_set
    __swig_getmethods__["ignoreNextRateFlag"] = _epl.PtpClock_ignoreNextRateFlag_get
    if _newclass:ignoreNextRateFlag = _swig_property(_epl.PtpClock_ignoreNextRateFlag_get, _epl.PtpClock_ignoreNextRateFlag_set)
    __swig_setmethods__["prevOffsetFromMaster"] = _epl.PtpClock_prevOffsetFromMaster_set
    __swig_getmethods__["prevOffsetFromMaster"] = _epl.PtpClock_prevOffsetFromMaster_get
    if _newclass:prevOffsetFromMaster = _swig_property(_epl.PtpClock_prevOffsetFromMaster_get, _epl.PtpClock_prevOffsetFromMaster_set)
    __swig_setmethods__["offsetDelta"] = _epl.PtpClock_offsetDelta_set
    __swig_getmethods__["offsetDelta"] = _epl.PtpClock_offsetDelta_get
    if _newclass:offsetDelta = _swig_property(_epl.PtpClock_offsetDelta_get, _epl.PtpClock_offsetDelta_set)
    __swig_setmethods__["didStepFlag"] = _epl.PtpClock_didStepFlag_set
    __swig_getmethods__["didStepFlag"] = _epl.PtpClock_didStepFlag_get
    if _newclass:didStepFlag = _swig_property(_epl.PtpClock_didStepFlag_get, _epl.PtpClock_didStepFlag_set)
    __swig_setmethods__["waitingForAdjFlag"] = _epl.PtpClock_waitingForAdjFlag_set
    __swig_getmethods__["waitingForAdjFlag"] = _epl.PtpClock_waitingForAdjFlag_get
    if _newclass:waitingForAdjFlag = _swig_property(_epl.PtpClock_waitingForAdjFlag_get, _epl.PtpClock_waitingForAdjFlag_set)
    __swig_setmethods__["ignoreSyncCount"] = _epl.PtpClock_ignoreSyncCount_set
    __swig_getmethods__["ignoreSyncCount"] = _epl.PtpClock_ignoreSyncCount_get
    if _newclass:ignoreSyncCount = _swig_property(_epl.PtpClock_ignoreSyncCount_get, _epl.PtpClock_ignoreSyncCount_set)
    __swig_setmethods__["numGoodOffsets"] = _epl.PtpClock_numGoodOffsets_set
    __swig_getmethods__["numGoodOffsets"] = _epl.PtpClock_numGoodOffsets_get
    if _newclass:numGoodOffsets = _swig_property(_epl.PtpClock_numGoodOffsets_get, _epl.PtpClock_numGoodOffsets_set)
    __swig_setmethods__["prevSyncRxTime"] = _epl.PtpClock_prevSyncRxTime_set
    __swig_getmethods__["prevSyncRxTime"] = _epl.PtpClock_prevSyncRxTime_get
    if _newclass:prevSyncRxTime = _swig_property(_epl.PtpClock_prevSyncRxTime_get, _epl.PtpClock_prevSyncRxTime_set)
    __swig_setmethods__["prevSyncTxTime"] = _epl.PtpClock_prevSyncTxTime_set
    __swig_getmethods__["prevSyncTxTime"] = _epl.PtpClock_prevSyncTxTime_get
    if _newclass:prevSyncTxTime = _swig_property(_epl.PtpClock_prevSyncTxTime_get, _epl.PtpClock_prevSyncTxTime_set)
    __swig_setmethods__["currRate"] = _epl.PtpClock_currRate_set
    __swig_getmethods__["currRate"] = _epl.PtpClock_currRate_get
    if _newclass:currRate = _swig_property(_epl.PtpClock_currRate_get, _epl.PtpClock_currRate_set)
    __swig_setmethods__["lastRateAdj"] = _epl.PtpClock_lastRateAdj_set
    __swig_getmethods__["lastRateAdj"] = _epl.PtpClock_lastRateAdj_get
    if _newclass:lastRateAdj = _swig_property(_epl.PtpClock_lastRateAdj_get, _epl.PtpClock_lastRateAdj_set)
    __swig_setmethods__["rateHistory"] = _epl.PtpClock_rateHistory_set
    __swig_getmethods__["rateHistory"] = _epl.PtpClock_rateHistory_get
    if _newclass:rateHistory = _swig_property(_epl.PtpClock_rateHistory_get, _epl.PtpClock_rateHistory_set)
    __swig_setmethods__["rateSampleRateIdx"] = _epl.PtpClock_rateSampleRateIdx_set
    __swig_getmethods__["rateSampleRateIdx"] = _epl.PtpClock_rateSampleRateIdx_get
    if _newclass:rateSampleRateIdx = _swig_property(_epl.PtpClock_rateSampleRateIdx_get, _epl.PtpClock_rateSampleRateIdx_set)
    __swig_setmethods__["numRateHistValues"] = _epl.PtpClock_numRateHistValues_set
    __swig_getmethods__["numRateHistValues"] = _epl.PtpClock_numRateHistValues_get
    if _newclass:numRateHistValues = _swig_property(_epl.PtpClock_numRateHistValues_get, _epl.PtpClock_numRateHistValues_set)
    __swig_setmethods__["avgRatesHistory"] = _epl.PtpClock_avgRatesHistory_set
    __swig_getmethods__["avgRatesHistory"] = _epl.PtpClock_avgRatesHistory_get
    if _newclass:avgRatesHistory = _swig_property(_epl.PtpClock_avgRatesHistory_get, _epl.PtpClock_avgRatesHistory_set)
    __swig_setmethods__["avgRatesWriteIdx"] = _epl.PtpClock_avgRatesWriteIdx_set
    __swig_getmethods__["avgRatesWriteIdx"] = _epl.PtpClock_avgRatesWriteIdx_get
    if _newclass:avgRatesWriteIdx = _swig_property(_epl.PtpClock_avgRatesWriteIdx_get, _epl.PtpClock_avgRatesWriteIdx_set)
    __swig_setmethods__["numAvgRatesHistValues"] = _epl.PtpClock_numAvgRatesHistValues_set
    __swig_getmethods__["numAvgRatesHistValues"] = _epl.PtpClock_numAvgRatesHistValues_get
    if _newclass:numAvgRatesHistValues = _swig_property(_epl.PtpClock_numAvgRatesHistValues_get, _epl.PtpClock_numAvgRatesHistValues_set)
    __swig_getmethods__["msgTmp"] = _epl.PtpClock_msgTmp_get
    if _newclass:msgTmp = _swig_property(_epl.PtpClock_msgTmp_get)
    def __init__(self, *args): 
        this = _epl.new_PtpClock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PtpClock
    __del__ = lambda self : None;
PtpClock_swigregister = _epl.PtpClock_swigregister
PtpClock_swigregister(PtpClock)

class PtpClock_msgTmp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtpClock_msgTmp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtpClock_msgTmp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync"] = _epl.PtpClock_msgTmp_sync_set
    __swig_getmethods__["sync"] = _epl.PtpClock_msgTmp_sync_get
    if _newclass:sync = _swig_property(_epl.PtpClock_msgTmp_sync_get, _epl.PtpClock_msgTmp_sync_set)
    __swig_setmethods__["follow"] = _epl.PtpClock_msgTmp_follow_set
    __swig_getmethods__["follow"] = _epl.PtpClock_msgTmp_follow_get
    if _newclass:follow = _swig_property(_epl.PtpClock_msgTmp_follow_get, _epl.PtpClock_msgTmp_follow_set)
    __swig_setmethods__["req"] = _epl.PtpClock_msgTmp_req_set
    __swig_getmethods__["req"] = _epl.PtpClock_msgTmp_req_get
    if _newclass:req = _swig_property(_epl.PtpClock_msgTmp_req_get, _epl.PtpClock_msgTmp_req_set)
    __swig_setmethods__["resp"] = _epl.PtpClock_msgTmp_resp_set
    __swig_getmethods__["resp"] = _epl.PtpClock_msgTmp_resp_get
    if _newclass:resp = _swig_property(_epl.PtpClock_msgTmp_resp_get, _epl.PtpClock_msgTmp_resp_set)
    __swig_setmethods__["manage"] = _epl.PtpClock_msgTmp_manage_set
    __swig_getmethods__["manage"] = _epl.PtpClock_msgTmp_manage_get
    if _newclass:manage = _swig_property(_epl.PtpClock_msgTmp_manage_get, _epl.PtpClock_msgTmp_manage_set)
    def __init__(self, *args): 
        this = _epl.new_PtpClock_msgTmp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_PtpClock_msgTmp
    __del__ = lambda self : None;
PtpClock_msgTmp_swigregister = _epl.PtpClock_msgTmp_swigregister
PtpClock_msgTmp_swigregister(PtpClock_msgTmp)

class offset_from_master_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, offset_from_master_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, offset_from_master_filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nsec_prev"] = _epl.offset_from_master_filter_nsec_prev_set
    __swig_getmethods__["nsec_prev"] = _epl.offset_from_master_filter_nsec_prev_get
    if _newclass:nsec_prev = _swig_property(_epl.offset_from_master_filter_nsec_prev_get, _epl.offset_from_master_filter_nsec_prev_set)
    __swig_setmethods__["y"] = _epl.offset_from_master_filter_y_set
    __swig_getmethods__["y"] = _epl.offset_from_master_filter_y_get
    if _newclass:y = _swig_property(_epl.offset_from_master_filter_y_get, _epl.offset_from_master_filter_y_set)
    def __init__(self, *args): 
        this = _epl.new_offset_from_master_filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_offset_from_master_filter
    __del__ = lambda self : None;
offset_from_master_filter_swigregister = _epl.offset_from_master_filter_swigregister
offset_from_master_filter_swigregister(offset_from_master_filter)

class one_way_delay_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, one_way_delay_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, one_way_delay_filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nsec_prev"] = _epl.one_way_delay_filter_nsec_prev_set
    __swig_getmethods__["nsec_prev"] = _epl.one_way_delay_filter_nsec_prev_get
    if _newclass:nsec_prev = _swig_property(_epl.one_way_delay_filter_nsec_prev_get, _epl.one_way_delay_filter_nsec_prev_set)
    __swig_setmethods__["y"] = _epl.one_way_delay_filter_y_set
    __swig_getmethods__["y"] = _epl.one_way_delay_filter_y_get
    if _newclass:y = _swig_property(_epl.one_way_delay_filter_y_get, _epl.one_way_delay_filter_y_set)
    __swig_setmethods__["s_exp"] = _epl.one_way_delay_filter_s_exp_set
    __swig_getmethods__["s_exp"] = _epl.one_way_delay_filter_s_exp_get
    if _newclass:s_exp = _swig_property(_epl.one_way_delay_filter_s_exp_get, _epl.one_way_delay_filter_s_exp_set)
    def __init__(self, *args): 
        this = _epl.new_one_way_delay_filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_one_way_delay_filter
    __del__ = lambda self : None;
one_way_delay_filter_swigregister = _epl.one_way_delay_filter_swigregister
one_way_delay_filter_swigregister(one_way_delay_filter)

class NetPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetPath, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventSock"] = _epl.NetPath_eventSock_set
    __swig_getmethods__["eventSock"] = _epl.NetPath_eventSock_get
    if _newclass:eventSock = _swig_property(_epl.NetPath_eventSock_get, _epl.NetPath_eventSock_set)
    __swig_setmethods__["generalSock"] = _epl.NetPath_generalSock_set
    __swig_getmethods__["generalSock"] = _epl.NetPath_generalSock_get
    if _newclass:generalSock = _swig_property(_epl.NetPath_generalSock_get, _epl.NetPath_generalSock_set)
    __swig_setmethods__["bcastAddr"] = _epl.NetPath_bcastAddr_set
    __swig_getmethods__["bcastAddr"] = _epl.NetPath_bcastAddr_get
    if _newclass:bcastAddr = _swig_property(_epl.NetPath_bcastAddr_get, _epl.NetPath_bcastAddr_set)
    __swig_setmethods__["rtOpts"] = _epl.NetPath_rtOpts_set
    __swig_getmethods__["rtOpts"] = _epl.NetPath_rtOpts_get
    if _newclass:rtOpts = _swig_property(_epl.NetPath_rtOpts_get, _epl.NetPath_rtOpts_set)
    __swig_setmethods__["ptpClock"] = _epl.NetPath_ptpClock_set
    __swig_getmethods__["ptpClock"] = _epl.NetPath_ptpClock_get
    if _newclass:ptpClock = _swig_property(_epl.NetPath_ptpClock_get, _epl.NetPath_ptpClock_set)
    def __init__(self, *args): 
        this = _epl.new_NetPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_NetPath
    __del__ = lambda self : None;
NetPath_swigregister = _epl.NetPath_swigregister
NetPath_swigregister(NetPath)

POW_2_32 = _epl.POW_2_32
MANUFACTURER_ID = _epl.MANUFACTURER_ID
DEFAULT_SYNC_INTERVAL = _epl.DEFAULT_SYNC_INTERVAL
DEFAULT_UTC_OFFSET = _epl.DEFAULT_UTC_OFFSET
DEFAULT_CLOCK_VARIANCE = _epl.DEFAULT_CLOCK_VARIANCE
DEFAULT_CLOCK_STRATUM = _epl.DEFAULT_CLOCK_STRATUM
DEFAULT_INBOUND_LATENCY = _epl.DEFAULT_INBOUND_LATENCY
DEFAULT_INBOUND_LATENCY_10MB = _epl.DEFAULT_INBOUND_LATENCY_10MB
DEFAULT_OUTBOUND_LATENCY = _epl.DEFAULT_OUTBOUND_LATENCY
DEFAULT_OUTBOUND_LATENCY_10MB = _epl.DEFAULT_OUTBOUND_LATENCY_10MB
DEFAULT_NO_RESET_CLOCK = _epl.DEFAULT_NO_RESET_CLOCK
DEFAULT_AP = _epl.DEFAULT_AP
DEFAULT_AI = _epl.DEFAULT_AI
DEFAULT_DELAY_S = _epl.DEFAULT_DELAY_S
DEFUALT_MAX_FOREIGN_RECORDS = _epl.DEFUALT_MAX_FOREIGN_RECORDS
CLOCK_FOLLOWUP = _epl.CLOCK_FOLLOWUP
INITIALIZABLE = _epl.INITIALIZABLE
BURST_ENABLED = _epl.BURST_ENABLED
EXTERNAL_TIMING = _epl.EXTERNAL_TIMING
BOUNDARY_CLOCK = _epl.BOUNDARY_CLOCK
NUMBER_PORTS = _epl.NUMBER_PORTS
VERSION_PTP = _epl.VERSION_PTP
VERSION_NETWORK = _epl.VERSION_NETWORK
DEFAULT_PTP_DOMAIN_NAME = _epl.DEFAULT_PTP_DOMAIN_NAME
ALTERNATE_PTP_DOMAIN1_NAME = _epl.ALTERNATE_PTP_DOMAIN1_NAME
ALTERNATE_PTP_DOMAIN2_NAME = _epl.ALTERNATE_PTP_DOMAIN2_NAME
ALTERNATE_PTP_DOMAIN3_NAME = _epl.ALTERNATE_PTP_DOMAIN3_NAME
IDENTIFIER_ATOM = _epl.IDENTIFIER_ATOM
IDENTIFIER_GPS = _epl.IDENTIFIER_GPS
IDENTIFIER_NTP = _epl.IDENTIFIER_NTP
IDENTIFIER_HAND = _epl.IDENTIFIER_HAND
IDENTIFIER_INIT = _epl.IDENTIFIER_INIT
IDENTIFIER_DFLT = _epl.IDENTIFIER_DFLT
PTP_UUID_LENGTH = _epl.PTP_UUID_LENGTH
PTP_CODE_STRING_LENGTH = _epl.PTP_CODE_STRING_LENGTH
PTP_SUBDOMAIN_NAME_LENGTH = _epl.PTP_SUBDOMAIN_NAME_LENGTH
PTP_MAX_MANAGEMENT_PAYLOAD_SIZE = _epl.PTP_MAX_MANAGEMENT_PAYLOAD_SIZE
PTP_DELAY_REQ_INTERVAL = _epl.PTP_DELAY_REQ_INTERVAL
PTP_FOREIGN_MASTER_THRESHOLD = _epl.PTP_FOREIGN_MASTER_THRESHOLD
PTP_RANDOMIZING_SLOTS = _epl.PTP_RANDOMIZING_SLOTS
PTP_LOG_VARIANCE_THRESHOLD = _epl.PTP_LOG_VARIANCE_THRESHOLD
PTP_LOG_VARIANCE_HYSTERESIS = _epl.PTP_LOG_VARIANCE_HYSTERESIS
MANUFACTURER_ID_LENGTH = _epl.MANUFACTURER_ID_LENGTH
PTP_CLOSED = _epl.PTP_CLOSED
PTP_ETHER = _epl.PTP_ETHER
PTP_FFBUS = _epl.PTP_FFBUS
PTP_PROFIBUS = _epl.PTP_PROFIBUS
PTP_LON = _epl.PTP_LON
PTP_DNET = _epl.PTP_DNET
PTP_SDS = _epl.PTP_SDS
PTP_CONTROLNET = _epl.PTP_CONTROLNET
PTP_CANOPEN = _epl.PTP_CANOPEN
PTP_IEEE1394 = _epl.PTP_IEEE1394
PTP_IEEE802_11A = _epl.PTP_IEEE802_11A
PTP_IEEE_WIRELESS = _epl.PTP_IEEE_WIRELESS
PTP_INFINIBAND = _epl.PTP_INFINIBAND
PTP_BLUETOOTH = _epl.PTP_BLUETOOTH
PTP_IEEE802_15_1 = _epl.PTP_IEEE802_15_1
PTP_IEEE1451_2 = _epl.PTP_IEEE1451_2
PTP_IEEE1451_5 = _epl.PTP_IEEE1451_5
PTP_USB = _epl.PTP_USB
PTP_ISA = _epl.PTP_ISA
PTP_PCI = _epl.PTP_PCI
PTP_VXI = _epl.PTP_VXI
PTP_DEFAULT = _epl.PTP_DEFAULT
PTP_INITIALIZING = _epl.PTP_INITIALIZING
PTP_FAULTY = _epl.PTP_FAULTY
PTP_DISABLED = _epl.PTP_DISABLED
PTP_LISTENING = _epl.PTP_LISTENING
PTP_PRE_MASTER = _epl.PTP_PRE_MASTER
PTP_MASTER = _epl.PTP_MASTER
PTP_PASSIVE = _epl.PTP_PASSIVE
PTP_UNCALIBRATED = _epl.PTP_UNCALIBRATED
PTP_SLAVE = _epl.PTP_SLAVE
PTP_SYNC_MESSAGE = _epl.PTP_SYNC_MESSAGE
PTP_DELAY_REQ_MESSAGE = _epl.PTP_DELAY_REQ_MESSAGE
PTP_FOLLOWUP_MESSAGE = _epl.PTP_FOLLOWUP_MESSAGE
PTP_DELAY_RESP_MESSAGE = _epl.PTP_DELAY_RESP_MESSAGE
PTP_MANAGEMENT_MESSAGE = _epl.PTP_MANAGEMENT_MESSAGE
PTP_SYNC_MESSAGE_BURST = _epl.PTP_SYNC_MESSAGE_BURST
PTP_DELAY_REQ_MESSAGE_BURST = _epl.PTP_DELAY_REQ_MESSAGE_BURST
PTP_LI_61 = _epl.PTP_LI_61
PTP_LI_59 = _epl.PTP_LI_59
PTP_BOUNDARY_CLOCK = _epl.PTP_BOUNDARY_CLOCK
PTP_ASSIST = _epl.PTP_ASSIST
PTP_EXT_SYNC = _epl.PTP_EXT_SYNC
PARENT_STATS = _epl.PARENT_STATS
PTP_SYNC_BURST = _epl.PTP_SYNC_BURST
PTP_MM_NULL = _epl.PTP_MM_NULL
PTP_MM_OBTAIN_IDENTITY = _epl.PTP_MM_OBTAIN_IDENTITY
PTP_MM_CLOCK_IDENTITY = _epl.PTP_MM_CLOCK_IDENTITY
PTP_MM_INITIALIZE_CLOCK = _epl.PTP_MM_INITIALIZE_CLOCK
PTP_MM_SET_SUBDOMAIN = _epl.PTP_MM_SET_SUBDOMAIN
PTP_MM_CLEAR_DESIGNATED_PREFERRED_MASTER = _epl.PTP_MM_CLEAR_DESIGNATED_PREFERRED_MASTER
PTP_MM_SET_DESIGNATED_PREFERRED_MASTER = _epl.PTP_MM_SET_DESIGNATED_PREFERRED_MASTER
PTP_MM_GET_DEFAULT_DATA_SET = _epl.PTP_MM_GET_DEFAULT_DATA_SET
PTP_MM_DEFAULT_DATA_SET = _epl.PTP_MM_DEFAULT_DATA_SET
PTP_MM_UPDATE_DEFAULT_DATA_SET = _epl.PTP_MM_UPDATE_DEFAULT_DATA_SET
PTP_MM_GET_CURRENT_DATA_SET = _epl.PTP_MM_GET_CURRENT_DATA_SET
PTP_MM_CURRENT_DATA_SET = _epl.PTP_MM_CURRENT_DATA_SET
PTP_MM_GET_PARENT_DATA_SET = _epl.PTP_MM_GET_PARENT_DATA_SET
PTP_MM_PARENT_DATA_SET = _epl.PTP_MM_PARENT_DATA_SET
PTP_MM_GET_PORT_DATA_SET = _epl.PTP_MM_GET_PORT_DATA_SET
PTP_MM_PORT_DATA_SET = _epl.PTP_MM_PORT_DATA_SET
PTP_MM_GET_GLOBAL_TIME_DATA_SET = _epl.PTP_MM_GET_GLOBAL_TIME_DATA_SET
PTP_MM_GLOBAL_TIME_DATA_SET = _epl.PTP_MM_GLOBAL_TIME_DATA_SET
PTP_MM_UPDATE_GLOBAL_TIME_PROPERTIES = _epl.PTP_MM_UPDATE_GLOBAL_TIME_PROPERTIES
PTP_MM_GOTO_FAULTY_STATE = _epl.PTP_MM_GOTO_FAULTY_STATE
PTP_MM_GET_FOREIGN_DATA_SET = _epl.PTP_MM_GET_FOREIGN_DATA_SET
PTP_MM_FOREIGN_DATA_SET = _epl.PTP_MM_FOREIGN_DATA_SET
PTP_MM_SET_SYNC_INTERVAL = _epl.PTP_MM_SET_SYNC_INTERVAL
PTP_MM_DISABLE_PORT = _epl.PTP_MM_DISABLE_PORT
PTP_MM_ENABLE_PORT = _epl.PTP_MM_ENABLE_PORT
PTP_MM_DISABLE_BURST = _epl.PTP_MM_DISABLE_BURST
PTP_MM_ENABLE_BURST = _epl.PTP_MM_ENABLE_BURST
PTP_MM_SET_TIME = _epl.PTP_MM_SET_TIME
SYNC_RECEIPT_TIMER = _epl.SYNC_RECEIPT_TIMER
SYNC_INTERVAL_TIMER = _epl.SYNC_INTERVAL_TIMER
QUALIFICATION_TIMER = _epl.QUALIFICATION_TIMER
TIMER_ARRAY_SIZE = _epl.TIMER_ARRAY_SIZE
STS_PSF_DATA = _epl.STS_PSF_DATA
STS_OFFSET_DATA = _epl.STS_OFFSET_DATA
class STS_OFFSET_DATA_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STS_OFFSET_DATA_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STS_OFFSET_DATA_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset_from_master"] = _epl.STS_OFFSET_DATA_STRUCT_offset_from_master_set
    __swig_getmethods__["offset_from_master"] = _epl.STS_OFFSET_DATA_STRUCT_offset_from_master_get
    if _newclass:offset_from_master = _swig_property(_epl.STS_OFFSET_DATA_STRUCT_offset_from_master_get, _epl.STS_OFFSET_DATA_STRUCT_offset_from_master_set)
    __swig_setmethods__["master_to_slave_delay"] = _epl.STS_OFFSET_DATA_STRUCT_master_to_slave_delay_set
    __swig_getmethods__["master_to_slave_delay"] = _epl.STS_OFFSET_DATA_STRUCT_master_to_slave_delay_get
    if _newclass:master_to_slave_delay = _swig_property(_epl.STS_OFFSET_DATA_STRUCT_master_to_slave_delay_get, _epl.STS_OFFSET_DATA_STRUCT_master_to_slave_delay_set)
    __swig_setmethods__["slave_to_master_delay"] = _epl.STS_OFFSET_DATA_STRUCT_slave_to_master_delay_set
    __swig_getmethods__["slave_to_master_delay"] = _epl.STS_OFFSET_DATA_STRUCT_slave_to_master_delay_get
    if _newclass:slave_to_master_delay = _swig_property(_epl.STS_OFFSET_DATA_STRUCT_slave_to_master_delay_get, _epl.STS_OFFSET_DATA_STRUCT_slave_to_master_delay_set)
    __swig_setmethods__["oneWayAvg"] = _epl.STS_OFFSET_DATA_STRUCT_oneWayAvg_set
    __swig_getmethods__["oneWayAvg"] = _epl.STS_OFFSET_DATA_STRUCT_oneWayAvg_get
    if _newclass:oneWayAvg = _swig_property(_epl.STS_OFFSET_DATA_STRUCT_oneWayAvg_get, _epl.STS_OFFSET_DATA_STRUCT_oneWayAvg_set)
    def __init__(self, *args): 
        this = _epl.new_STS_OFFSET_DATA_STRUCT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_STS_OFFSET_DATA_STRUCT
    __del__ = lambda self : None;
STS_OFFSET_DATA_STRUCT_swigregister = _epl.STS_OFFSET_DATA_STRUCT_swigregister
STS_OFFSET_DATA_STRUCT_swigregister(STS_OFFSET_DATA_STRUCT)

PTPThread = _epl.PTPThread
PTPThreadC = _epl.PTPThreadC
PTPKillThread = _epl.PTPKillThread
PTPPrintf = _epl.PTPPrintf
class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _epl.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _epl.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _epl.charArray___getitem__(*args)
    def __setitem__(*args): return _epl.charArray___setitem__(*args)
    def cast(*args): return _epl.charArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _epl.charArray_frompointer
    if _newclass:frompointer = staticmethod(_epl.charArray_frompointer)
charArray_swigregister = _epl.charArray_swigregister
charArray_swigregister(charArray)
charArray_frompointer = _epl.charArray_frompointer



